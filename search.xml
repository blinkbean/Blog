<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode-236-二叉树的最近公共祖先</title>
      <link href="uncatesgorized/leetcode-236-er-cha-shu-de-zui-jin-gong-gong-zu-xian/"/>
      <url>uncatesgorized/leetcode-236-er-cha-shu-de-zui-jin-gong-gong-zu-xian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-215-数组中的第K个最大元素</title>
      <link href="suan-fa/leetcode-215-shu-zu-zhong-de-di-k-ge-zui-da-yuan-su/"/>
      <url>suan-fa/leetcode-215-shu-zu-zhong-de-di-k-ge-zui-da-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p>示例 1:</p><p>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5<br>示例 2:</p><p>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4<br>输出: 4<br>说明:</p><p>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array">https://leetcode-cn.com/problems/kth-largest-element-in-an-array</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>最小堆</li></ul><pre class="line-numbers language-none"><code class="language-none">type MinHeap struct &#123;arr  []intsize int&#125;func (m *MinHeap) Len() int &#123;return len(m.arr)&#125;func (m *MinHeap) Less(i, j int) bool &#123;return m.arr[i] &lt; m.arr[j]&#125;func (m *MinHeap) Swap(i, j int) &#123;m.arr[i], m.arr[j] &#x3D; m.arr[j], m.arr[i]&#125;func (m *MinHeap) Push(v interface&#123;&#125;) &#123;m.arr &#x3D; append(m.arr, v.(int))&#125;func (m *MinHeap) Pop() interface&#123;&#125; &#123;t :&#x3D; m.arr[m.Len()-1] &#x2F;&#x2F; 最后一个m.arr &#x3D; m.arr[0 : m.Len()-1]return t&#125;func (m *MinHeap) Top() int &#123;return m.arr[0] &#x2F;&#x2F; 第一个&#125;func (m *MinHeap) RealPush(v int) &#123;if m.size &#x3D;&#x3D; m.Len() &#123;if m.Top() &lt; v &#123;heap.Pop(m)heap.Push(m, v)&#125;&#125; else &#123;heap.Push(m, v)&#125;&#125;func InitHeap(size int) MinHeap &#123;m :&#x3D; MinHeap&#123;arr:  make([]int, 0),size: size,&#125;heap.Init(&amp;m)return m&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-20-有效括号</title>
      <link href="suan-fa/leetcode-20-you-xiao-gua-hao/"/>
      <url>suan-fa/leetcode-20-you-xiao-gua-hao/</url>
      
        <content type="html"><![CDATA[<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">https://leetcode-cn.com/problems/valid-parentheses/</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>滑动窗口</li></ul><pre class="line-numbers language-none"><code class="language-none">type stack struct &#123;arr []int32&#125;func (s *stack) push(c int32) &#123;s.arr &#x3D; append(s.arr, c)&#125;func (s *stack) pop() int32 &#123;var t int32if !s.isEmpty() &#123;t &#x3D; s.arr[len(s.arr)-1]s.arr &#x3D; s.arr[:len(s.arr)-1]&#125;return t&#125;func (s *stack) isEmpty() bool &#123;if len(s.arr) &#x3D;&#x3D; 0 &#123;return true&#125;return false&#125;func isValid(s string) bool &#123;m :&#x3D; map[int32]int32&#123;&#39;)&#39;: &#39;(&#39;,&#39;]&#39;: &#39;[&#39;,&#39;&#125;&#39;: &#39;&#123;&#39;,&#125;sta :&#x3D; stack&#123;arr: make([]int32, 0, 0)&#125;for _, v :&#x3D; range s &#123;if mv, ok :&#x3D; m[v]; ok &#123;if sta.pop() !&#x3D; mv &#123;return false&#125;&#125; else &#123;sta.push(v)&#125;&#125;if sta.isEmpty() &#123;return true&#125;return false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch data</title>
      <link href="uncatesgorized/elasticsearch-data/"/>
      <url>uncatesgorized/elasticsearch-data/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">&#123;Id:443,Name:&quot;林黛玉&quot;,Description:&quot;可叹停机德，堪怜咏絮才。玉带林中挂，金簪雪里埋。&quot;,Age:15&#125;,&#123;Id:444,Name:&quot;薛宝钗&quot;,Description:&quot;可叹停机德，堪怜咏絮才。玉带林中挂，金簪雪里埋。&quot;,Age:17&#125;,&#123;Id:445,Name:&quot;贾元春&quot;,Description:&quot;二十年来辨是非，榴花开处照宫闱。三春争及初春景，虎兔相逢大梦归。&quot;,Age:45&#125;,&#123;Id:446,Name:&quot;贾探春&quot;,Description:&quot;才自精明志自高，生于末世运偏消。清明涕送江边望，千里东风一梦遥。&quot;,Age:19&#125;,&#123;Id:447,Name:&quot;贾迎春&quot;,Description:&quot;子系中山狼，得志便猖狂。金闺花柳质，一载赴黄粱。&quot;,Age:22&#125;,&#123;Id:448,Name:&quot;贾惜春&quot;,Description:&quot;勘破三春景不长，缁衣顿改昔年装。可怜绣户侯门女，独卧青灯古佛旁。&quot;,Age:13&#125;,&#123;Id:449,Name:&quot;史湘云&quot;,Description:&quot;富贵又何为，襁褓之间父母违。展眼吊斜晖，湘江水逝楚云飞。&quot;,Age:15&#125;,&#123;Id:450,Name:&quot;妙玉&quot;,Description:&quot;欲洁何曾洁，云空未必空。可怜金玉质，终陷淖泥中！&quot;,Age:18&#125;,&#123;Id:451,Name:&quot;王熙凤&quot;,Description:&quot;凡鸟偏从末世来，都知爱慕此生才。一从二令三人木，哭向金陵事更哀。&quot;,Age:35&#125;,&#123;Id:452,Name:&quot;巧姐&quot;,Description:&quot;势败休云贵，家亡莫论亲。偶因济刘氏，巧得遇恩人。&quot;,Age:9&#125;,&#123;Id:453,Name:&quot;李纨&quot;,Description:&quot;桃李春风结子完，到头谁似一盆兰。如冰水好空相妒，枉与他人作笑谈！&quot;,Age:36&#125;,&#123;Id:454,Name:&quot;秦可卿&quot;,Description:&quot;情天情海幻情身，情既相逢必主淫。漫言不肖皆荣出，造衅开端实在宁。&quot;,Age:35&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-随机函数</title>
      <link href="hou-duan-kai-fa/python-sui-ji-han-shu/"/>
      <url>hou-duan-kai-fa/python-sui-ji-han-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.runoob.com/python/python-numbers.html">菜鸟教程</a></p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-import randomprint random.randint(1,10)         # 产生 1 到 10 的一个整数型随机数  print random.choice(rande(10))   # 产生 0 到 9 的一个整数型随机数  print random.random()              # 产生 [0,1) 之间的随机浮点数print random.uniform(0,100)        # 产生  [0,100] 之间的随机浮点数，不是整数print random.choice(&#39;tomorrow&#39;)    # 从序列中随机选取一个元素print random.randrange(1,100,2)    # 生成从1到100的间隔为2的随机整数mylist &#x3D; list(&quot;hello,world!&quot;)      # 将序列a中的元素顺序打乱random.shuffle(mylist)print mylist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Windows多版本安装</title>
      <link href="xiao-lu-gong-ju/python-windows-duo-ban-ben-an-zhuang/"/>
      <url>xiao-lu-gong-ju/python-windows-duo-ban-ben-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h4 id="可能的解决方案"><a href="#可能的解决方案" class="headerlink" title="可能的解决方案"></a>可能的解决方案</h4><ul><li>安装多个python版本，使用不同的命令进s行版本的区分<pre class="line-numbers language-none"><code class="language-none">C:\Users\hero\python2Python 2.7.X&gt;&gt;&gt;C:\Users\hero\python3Python 3.X.X&gt;&gt;&gt;两个python版本都装了pip以后怎么办?python安装路径找到Scripts文件夹，进入里面找到pip*-script.py，打开修改第一句为要指定的python解释器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>virtualenv</li><li>anaconda(推荐)</li><li>…(如果有更好的方案再补充)<h4 id="anaconda是什么？"><a href="#anaconda是什么？" class="headerlink" title="anaconda是什么？"></a>anaconda是什么？</h4></li><li>Anaconda是开源的python发行版本，包含了大量科学包。主要是可以用来进行python的环境管理，也就是说利用Conda可以在同一台机器上进行不同版本python的切换<h4 id="为什么用anaconda？"><a href="#为什么用anaconda？" class="headerlink" title="为什么用anaconda？"></a>为什么用anaconda？</h4></li><li>希望自己的机器上同时拥有不同版本的python，以满足不同代码的需求。</li><li>Windows环境下使用virtualenv对Python进行多版本隔离，但是前提是能安装上多个版本。[笑哭.jpg]</li><li>Win8.1安装Python==3.5==以上提示缺失==api-ms-win-crt-runtime-l1-1-0.dll==问题<h4 id="怎么安装anaconda？"><a href="#怎么安装anaconda？" class="headerlink" title="怎么安装anaconda？"></a>怎么安装anaconda？</h4></li><li>国内镜像地址 : <blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学开源软件镜像站</a><br><a href="https://jingyan.baidu.com/article/3f16e0031e87522591c10320.html">如何安装Anaconda和Python</a></p></blockquote></li></ul><h4 id="安装anaconda过程"><a href="#安装anaconda过程" class="headerlink" title="安装anaconda过程"></a>安装anaconda过程</h4><ul><li>安装好anaconda之后会自带：base(root)<br>的python</li><li>安装其他版本的python<blockquote><ul><li>添加清华镜像(不然安装会超时)</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Conda命令"><a href="#Conda命令" class="headerlink" title="Conda命令"></a>Conda命令</h4><pre class="line-numbers language-none"><code class="language-none">conda create --name python27 python&#x3D;2.7 环境2.7名称python27conda create –name cpu 创建一个名为cpu的环境 source activate cpu 激活cpu环境 source deactivate 禁用当前环境 conda remove –name 环境名 –all conda search 软件名 &#x2F;&#x2F;可以查看到对应的不同版本 conda install 软件名 安装软件 conda list 查看已安装的package conda list -n 环境名 查看指定环境已安装的package conda install -n 环境名 软件名 指定环境名 安装软件 如果不用-n指定环境名称，则被安装在当前活跃环境 conda update -n 环境名 软件名 指定环境名更新软件 conda remove -n 环境名 软件名 删除指定环境的指定软件包 conda env list &#x2F;&#x2F;查看现有的环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-官网例子读懂MRO继承</title>
      <link href="hou-duan-kai-fa/python-guan-wang-li-zi-du-dong-mro-ji-cheng/"/>
      <url>hou-duan-kai-fa/python-guan-wang-li-zi-du-dong-mro-ji-cheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/25321349">知乎详解（官网翻译）</a></p><p><a href="http://python.jobbole.com/85685/">MRO历史</a></p><h4 id="C3方法解析顺序-The-C3-Method-Resolution-Order"><a href="#C3方法解析顺序-The-C3-Method-Resolution-Order" class="headerlink" title="C3方法解析顺序(The C3 Method Resolution Order)"></a>C3方法解析顺序(The C3 Method Resolution Order)</h4><ul><li><p>像深度又像广度排序</p><h5 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h5><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; O &#x3D; object&gt;&gt;&gt; class F(O): pass&gt;&gt;&gt; class E(O): pass&gt;&gt;&gt; class D(O): pass&gt;&gt;&gt; class C(D,F): pass&gt;&gt;&gt; class B(D,E): pass&gt;&gt;&gt; class A(B,C): pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">                          6                         ---Level 3                 | O |                  (more general)                      &#x2F;  ---  \                     &#x2F;    |    \                      |                    &#x2F;     |     \                     |                   &#x2F;      |      \                    |                  ---    ---    ---                   |Level 2        3 | D | 4| E |  | F | 5                |                  ---    ---    ---                   |                   \  \ _ &#x2F;       |                   |                    \    &#x2F; \ _    |                   |                     \  &#x2F;      \  |                   |                      ---      ---                    |Level 1            1 | B |    | C | 2                 |                      ---      ---                    |                        \      &#x2F;                      |                         \    &#x2F;                      \ &#x2F;                           ---Level 0                 0 | A |              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">L[A] &#x3D; A + merge(BDEO,CDFO,BC)     &#x3D; A + B + merge(DEO,CDFO,C)     &#x3D; A + B + C + merge(DEO,DFO)     &#x3D; A + B + C + D + merge(EO,FO)     &#x3D; A + B + C + D + E + merge(O,FO)     &#x3D; A + B + C + D + E + F + merge(O,O)     &#x3D; A B C D E F O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h5><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; O &#x3D; object&gt;&gt;&gt; class F(O): pass&gt;&gt;&gt; class E(O): pass&gt;&gt;&gt; class D(O): pass&gt;&gt;&gt; class C(D,F): pass&gt;&gt;&gt; class B(E,D): pass&gt;&gt;&gt; class A(B,C): pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">                           6                          ---Level 3                  | O |                       &#x2F;  ---  \                      &#x2F;    |    \                     &#x2F;     |     \                    &#x2F;      |      \                  ---     ---    ---Level 2        2 | E | 4 | D |  | F | 5                  ---     ---    ---                   \      &#x2F; \     &#x2F;                    \    &#x2F;   \   &#x2F;                     \  &#x2F;     \ &#x2F;                      ---     ---Level 1            1 | B |   | C | 3                      ---     ---                       \       &#x2F;                        \     &#x2F;                          ---Level 0                0 | A |                          ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; A.mro()(&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;,&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.F&#39;&gt;,&lt;type &#39;object&#39;&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="什么时候对MRO来说是非法的？"><a href="#什么时候对MRO来说是非法的？" class="headerlink" title="什么时候对MRO来说是非法的？"></a>什么时候对MRO来说是非法的？</h4><ul><li><h5 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h5><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; O &#x3D; object&gt;&gt;&gt; class X(O): pass&gt;&gt;&gt; class Y(O): pass&gt;&gt;&gt; class A(X,Y): pass&gt;&gt;&gt; class B(Y,X): pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> -----------|           ||    O      ||  &#x2F;   \    | - X    Y  &#x2F;   |  &#x2F; | &#x2F;   | &#x2F;  |&#x2F;   A    B   \   &#x2F;     ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">L[O] &#x3D; 0L[X] &#x3D; X OL[Y] &#x3D; Y OL[A] &#x3D; A X Y OL[B] &#x3D; B Y X O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">L[C] &#x3D; C + merge(AXYO, BYXO, AB)     &#x3D; C + A + merge(XYO, BYXO, B)     &#x3D; C + A + B + merge(XYO, YXO)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>这时，我们不能合并列表XYO和列表YXO，：因此，没有了符合规则的head，C3算法停止。在这种情形下，Python 2.3会抛出一个异常(TypeError: MRO conflict among bases Y, X)，因为X在YXO的tail中,而Y在XYO的tail中,阻止创建模棱两可的继承层次。Python 2.2不会抛出异常，而是选择了一种特定的方法解析顺序(CABXYO).</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂-整数的二进制中有几个1</title>
      <link href="uncatesgorized/za-zheng-shu-de-er-jin-zhi-zhong-you-ji-ge-1/"/>
      <url>uncatesgorized/za-zheng-shu-de-er-jin-zhi-zhong-you-ji-ge-1/</url>
      
        <content type="html"><![CDATA[<h3 id="x-amp-x-1-消除x最后一位的1"><a href="#x-amp-x-1-消除x最后一位的1" class="headerlink" title="x &amp; (x - 1) 消除x最后一位的1"></a>x &amp; (x - 1) 消除x最后一位的1</h3><pre class="line-numbers language-none"><code class="language-none">x &#x3D; 1515 &#x3D; 0b111114 &#x3D; 0b1110y &#x3D; x &amp; (x-1)y &#x3D; 0b1110  # 消去了x最后一位的1y &#x3D; 1414 &#x3D; 0b111013 &#x3D; 0b1101z &#x3D; y &amp; (y-1)z &#x3D; 0b1100  # 消去了y最后一位的1……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>O(1) 时间检测X是否是2的n次方<blockquote><p>一个数如果是2的n次方，则这个数的二进制中只有一个1<br>如果消去最后一位的1，则这个数为0</p></blockquote><pre class="line-numbers language-none"><code class="language-none">x &#x3D; 1616 &#x3D; 0b1000015 &#x3D; 0b01111x &amp; (x - 1) &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>一个整数的二进制中有多少个1<blockquote><p>x &amp; (x - 1) 可以消除最后一位的1<br>while循环消除最后一位的1，直到结果为0</p></blockquote><pre class="line-numbers language-none"><code class="language-none">a &#x3D; 15b &#x3D; 0while a &gt; 0:a &#x3D; a &amp; (a - 1)b +&#x3D; 1print b # 1的个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-常用命令整理</title>
      <link href="uncatesgorized/linux-chang-yong-ming-ling-zheng-li/"/>
      <url>uncatesgorized/linux-chang-yong-ming-ling-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="开进程并发下载"><a href="#开进程并发下载" class="headerlink" title="开进程并发下载"></a>开进程并发下载</h4><pre class="line-numbers language-none"><code class="language-none">for ((s&#x3D;1987;s&lt;2019;s&#x3D;s+1))dofor ((m&#x3D;1;m&lt;13;m&#x3D;m+1))doaa&#x3D;($s&#39;_&#39;$m)echo $aawget https:&#x2F;&#x2F;transtats.bts.gov&#x2F;PREZIP&#x2F;On_Time_Reporting_Carrier_On_Time_Performance_1987_present_$aa.zip &amp;donedone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="远程复制"><a href="#远程复制" class="headerlink" title="远程复制"></a>远程复制</h4><pre class="line-numbers language-none"><code class="language-none">从前面的文件夹复制到后面的文件夹scp -r remote_username@remote_ip:remote_folder local_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看外网ip"><a href="#查看外网ip" class="headerlink" title="查看外网ip"></a>查看外网ip</h4><pre class="line-numbers language-none"><code class="language-none">curl -L tool.lu&#x2F;ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h4><pre class="line-numbers language-none"><code class="language-none">du -h --max-depth&#x3D;0 .&#x2F;2017_credits.txt由小到大du -sh * | sort -n由大到小du -sh * | sort -nr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h4><pre class="line-numbers language-none"><code class="language-none">ip addr show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="看日志"><a href="#看日志" class="headerlink" title="看日志"></a>看日志</h4><pre class="line-numbers language-none"><code class="language-none">看线上日志要用less&#x2F;more，千万别用vi，vi会一次把文件全读入，内存耗光<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="远程文件弄到本地文件夹"><a href="#远程文件弄到本地文件夹" class="headerlink" title="远程文件弄到本地文件夹"></a>远程文件弄到本地文件夹</h4><pre class="line-numbers language-none"><code class="language-none">shutil.copy(remote_file, local_file_dir)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="echo导出select数据"><a href="#echo导出select数据" class="headerlink" title="echo导出select数据"></a>echo导出select数据</h4><pre class="line-numbers language-none"><code class="language-none">echo &quot;select * from miveshow_money.user_credits_history limit 1&quot; | mysql -umiveshow -h10.0.110.115 -pmiveshow123 -Dmiveshow &gt; o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="统计文件和文件夹的总量"><a href="#统计文件和文件夹的总量" class="headerlink" title="统计文件和文件夹的总量"></a>统计文件和文件夹的总量</h4><pre class="line-numbers language-none"><code class="language-none">ls | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="统计文件个数"><a href="#统计文件个数" class="headerlink" title="统计文件个数"></a>统计文件个数</h4><pre class="line-numbers language-none"><code class="language-none">ls -l |grep &quot;^-&quot;|wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="统计当前目录下的所有目录"><a href="#统计当前目录下的所有目录" class="headerlink" title="统计当前目录下的所有目录"></a>统计当前目录下的所有目录</h4><pre class="line-numbers language-none"><code class="language-none">文件以-开头目录以d开头1、ls -l | grep &quot;^d&quot;目录以&#x2F;结尾2、ls -F | grep &quot;&#x2F;$&quot;配合查看文件数量的命令查看目录数量ls -l | grep &quot;^d&quot; | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序、去重"><a href="#排序、去重" class="headerlink" title="排序、去重"></a>排序、去重</h4><pre class="line-numbers language-none"><code class="language-none">sort -n test.txt | uniq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="grep多个关键字-or"><a href="#grep多个关键字-or" class="headerlink" title="grep多个关键字(or)"></a>grep多个关键字(or)</h4><pre class="line-numbers language-none"><code class="language-none">grep file.txt -E &quot;aaa|bbb|ccc&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除多行"><a href="#删除多行" class="headerlink" title="删除多行"></a>删除多行</h4><p>删除多行，闭区间[1,999]</p><pre class="line-numbers language-none"><code class="language-none">vi file.txt:1,999d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="覆盖方式生成文件"><a href="#覆盖方式生成文件" class="headerlink" title="覆盖方式生成文件"></a>覆盖方式生成文件</h4><pre class="line-numbers language-none"><code class="language-none">cat file.log | grep test &gt; result.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成或追加到文件"><a href="#生成或追加到文件" class="headerlink" title="生成或追加到文件"></a>生成或追加到文件</h4><pre class="line-numbers language-none"><code class="language-none">cat file.log | grep test &gt;&gt; result.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim基本操作命令</title>
      <link href="uncatesgorized/linux-vim-ji-ben-cao-zuo-ming-ling/"/>
      <url>uncatesgorized/linux-vim-ji-ben-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h4><ul><li><p><code>i</code></p><blockquote><p>insert 进入编辑模式</p></blockquote></li><li><p><code>I</code></p><blockquote><p>insert before line 在行首开始插入</p></blockquote></li><li><p><code>a</code></p><blockquote><p>append 和 ==i== 相似，不同在于在当前光标所在字母前，还是后插入（一试便知）</p></blockquote></li><li><p><code>A</code></p><blockquote><p>append after line 在行尾开始插入</p></blockquote></li><li><p><code>o</code></p><blockquote><p>open a line below 在当前行下面新生成一行并进入编辑模式（你是不是还在的敲回车呢！）</p></blockquote></li><li><p><code>O</code></p><blockquote><p>append a line above 在当前行上一行开始插入</p></blockquote></li><li><p><code>Ctrl + h</code></p><blockquote><p>删除上一个字符</p></blockquote></li><li><p><code>Ctrl + w</code></p><blockquote><p>删除上一个单词</p></blockquote></li><li><p><code>Ctrl + u</code></p><blockquote><p>删除当前行</p></blockquote></li></ul><h4 id="Normal模式"><a href="#Normal模式" class="headerlink" title="Normal模式"></a>Normal模式</h4><ul><li><code>:set nu</code><blockquote><p>设置行号</p></blockquote></li><li><code>:set hls</code><blockquote><p>设置搜索结果高亮</p></blockquote></li><li><code>:set incsearch</code><blockquote><p>增量搜索结果高亮</p></blockquote></li><li><code>:vs</code><blockquote><p>垂直分屏</p></blockquote></li><li><code>:sp</code><blockquote><p>水平分屏</p></blockquote></li><li><code>:q</code><blockquote><p>退出当前分屏 </p></blockquote></li><li><code>:% s/hello/world/g</code><blockquote><p>将当前文件中的hello替换为world</p></blockquote></li><li><code>:% s/\&lt;xxx\&gt;/yyy/g</code><blockquote><p>正则匹配xxx</p></blockquote></li></ul><h6 id="替换标志位"><a href="#替换标志位" class="headerlink" title="替换标志位"></a>替换标志位</h6><ul><li><code>g</code> global 全局范围内执行</li><li><code>c</code> confirm 表示确认，可以确认或拒绝修改</li><li><code>n</code> number 报告匹配到的次数而不替换，可以用来查询匹配次数</li></ul><h6 id="反人类的上下左右"><a href="#反人类的上下左右" class="headerlink" title="反人类的上下左右"></a>反人类的上下左右</h6><p>hjkl</p><ul><li><code>h</code> 左移(四个键的最左边)</li><li><code>l</code> 右移(四个键的最右边)</li><li><code>j</code> 下移</li><li><code>k</code> 上移</li></ul><h6 id="单词间移动"><a href="#单词间移动" class="headerlink" title="单词间移动"></a>单词间移动</h6><p>word：以非空白符分割的单词(真单词)<br>WORD：以空白符分割的单词(不一定是单词)</p><ul><li><code>w/W</code> 移动到下一个单词word/WORD的开头</li><li><code>e/E</code> 移动到下一个单词word/WORD的结尾</li><li><code>b/B</code> 移动带上一个单词word/WORD的开头</li></ul><h6 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h6><ul><li><code>f&#123;char&#125;</code>  同一行搜索并移动到该字符</li><li><code>t&#123;char&#125;</code>  同行搜索并移动到该字符的前一个字符</li><li><code>; </code>分号下一个</li><li><code>, </code>逗号上一个</li><li><code>F&#123;char&#125;</code> 反过来搜索前面的字符</li><li><code>0</code> 移动到行首第一个字符</li><li><code>^</code> 移动到第一个非空字符</li><li><code>$</code> 移动到行尾</li><li><code>g_</code> 移动到行尾非空白字符</li><li><code>zz</code> 把当前行置为屏幕中间</li></ul><h6 id="文件开头、结尾"><a href="#文件开头、结尾" class="headerlink" title="文件开头、结尾"></a>文件开头、结尾</h6><ul><li><code>gg</code> 快速移动到文件开头</li><li><code>G</code> 快速移动到文件结尾</li></ul><h6 id="屏幕开头、中间、结尾"><a href="#屏幕开头、中间、结尾" class="headerlink" title="屏幕开头、中间、结尾"></a>屏幕开头、中间、结尾</h6><ul><li><code>H</code> Head  跳转到屏幕开头</li><li><code>M</code> Middle 跳转到屏幕中间</li><li><code>L</code> Lower 跳转到屏幕结尾</li></ul><h6 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h6><ul><li><code>Ctrl + u</code> upword 向上翻页</li><li><code>Ctrl + f</code> forward 向下翻页</li></ul><h4 id="Visual可视模式"><a href="#Visual可视模式" class="headerlink" title="Visual可视模式"></a>Visual可视模式</h4><ul><li><code>v</code><blockquote><p>VISUAL 进入可视模式，此时按上下左右可选中状态</p></blockquote></li><li><code>V</code><blockquote><p>VISUAL LINE 选中整行</p></blockquote></li><li><code>Ctrl v</code><blockquote><p>VISUAL BLOCK 方块选中</p></blockquote></li></ul><h5 id="选中之后干什么"><a href="#选中之后干什么" class="headerlink" title="选中之后干什么"></a>选中之后干什么</h5><ul><li><code>d</code><blockquote><p>delete 删除选中内容</p></blockquote></li><li><code>y</code><blockquote><p>yanke 复制选中内容</p></blockquote></li><li><code>p</code><blockquote><p>paste 粘贴内容（在当前光标位置后或下以行粘贴内容）</p></blockquote></li></ul><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><code>Ctrl + [</code><blockquote><p>快速切换Insert模式到Normal模式</p></blockquote></li><li><code>gi</code><blockquote><p>快速回到最后一次编辑的位置</p></blockquote></li></ul><h4 id="Vim增删改查"><a href="#Vim增删改查" class="headerlink" title="Vim增删改查"></a>Vim增删改查</h4><h6 id="增加字符"><a href="#增加字符" class="headerlink" title="增加字符"></a>增加字符</h6><ul><li><code>a/i/o</code><h6 id="快速删除"><a href="#快速删除" class="headerlink" title="快速删除"></a>快速删除</h6></li><li><code>x</code> 快速删除一个字符</li><li><code>d</code> 配合文本对象快速删除一个单词</li><li><code>d</code>和<code>x</code>都可以搭配数字来执行多次</li><li><code>dw</code>==<code>daw</code> 删除单词个空格</li><li><code>diw</code> 删除单词，不删空格</li><li><code>dt&#123;char&#125;</code> 删除光标到目标字符之间的所有字符</li><li><code>d0</code> 删除到行首之间的字符</li><li><code>d$</code> 删除到行尾之间的字符</li><li><code>4x</code> 删除4个字符</li><li><code>2dd</code> 删除两行</li></ul><h6 id="快速修改"><a href="#快速修改" class="headerlink" title="快速修改"></a>快速修改</h6><ul><li><code>r</code> replace r{char} 替换光标所在字符</li><li><code>R</code> 以替换的形式输入</li><li><code>c</code> change</li><li><code>s</code> substitute 删除光标所在字符，并进入插入模式</li><li><code>2s</code> 删除两个字符并进入插入模式</li></ul><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><ul><li><code>/</code> 正向查询</li><li><code>?</code> 反向查询</li><li><code>n</code> 跳转到下一个匹配</li><li><code>N</code> 跳转到上一个匹配</li><li><code>*</code> 进行当前单词的前向匹配</li><li><code>#</code> 进行当前单词的后向匹配</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—Mode,ImageFilter对比实践</title>
      <link href="hou-duan-kai-fa/python-pil-mode-imagefilter-dui-bi-shi-jian/"/>
      <url>hou-duan-kai-fa/python-pil-mode-imagefilter-dui-bi-shi-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h4><ul><li>学习 一定要找一个好的Object(???)，不然怎么学的下去嘛。<br><img src="https://img-blog.csdnimg.cn/20190727193629193.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="图像的mode"><a href="#图像的mode" class="headerlink" title="图像的mode"></a>图像的mode</h4><ul><li>mode属性是图像的色彩通道的数量和名字，同时也包括像素的类型和颜色深度信息。她们之间的区别可能要放大点才能看得清，比如说一万倍?。<table><thead><tr><th>modes</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>1位像素，黑和白，存成8位的像素</td></tr><tr><td>L</td><td>8位像素，黑白</td></tr><tr><td>P</td><td>8位像素，使用调色板映射到任何其他模式</td></tr><tr><td>RGB</td><td>3*8位像素，真彩</td></tr><tr><td>RGBA</td><td>4*8位像素，真彩+透明通道</td></tr><tr><td>CMYK</td><td>4*8位像素，颜色隔离</td></tr><tr><td>YCbCr</td><td>3*8位像素，彩色视频格式</td></tr><tr><td>I</td><td>32位整形像素</td></tr><tr><td>F</td><td>32位浮点型像素</td></tr><tr><td>RGBX</td><td>有padding的真彩色</td></tr><tr><td>HSV</td><td></td></tr></tbody></table></li></ul><p><img src="https://img-blog.csdnimg.cn/20190727193538101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="图像滤波器"><a href="#图像滤波器" class="headerlink" title="图像滤波器"></a>图像滤波器</h4><ul><li>你更喜欢花非花，雾非雾的朦胧，还是线条清晰，棱角分明的透彻。<table><thead><tr><th>Filter</th><th>描述</th></tr></thead><tbody><tr><td>BLUR</td><td>模糊滤波</td></tr><tr><td>CONTOUR</td><td>轮廓滤波</td></tr><tr><td>DETAIL</td><td>细节增强滤波</td></tr><tr><td>EDGE_ENHANCE</td><td>边缘增强滤波</td></tr><tr><td>EDGE_ENHANCE_MORE</td><td>深度边缘增强滤波</td></tr><tr><td>EMBOSS</td><td>浮雕滤波</td></tr><tr><td>FIND_EDGES</td><td>寻找边缘信息的滤波</td></tr><tr><td>SMOOTH</td><td>平滑滤波</td></tr><tr><td>SMOOTH_MORE</td><td>深度平滑滤波</td></tr><tr><td>SHARPEN</td><td>锐化滤波</td></tr></tbody></table></li></ul><p><img src="https://img-blog.csdnimg.cn/2019072719355829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/local/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageFilterfont_posotion <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span>color <span class="token operator">=</span>  <span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span>font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'Arial.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"unic"</span><span class="token punctuation">)</span>thumbnail_size <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span>row_count <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">def</span> <span class="token function">create_thumbnail</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> thumbnail_size    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span>size<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    <span class="token keyword">return</span> im<span class="token keyword">class</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    BLUR <span class="token operator">=</span> <span class="token string">"BLUR"</span>    CONTOUR <span class="token operator">=</span> <span class="token string">"CONTOUR"</span>    DETAIL <span class="token operator">=</span> <span class="token string">"DETAIL"</span>    EDGE_ENHANCE <span class="token operator">=</span> <span class="token string">"EDGE_ENHANCE"</span>    EDGE_ENHANCE_MORE <span class="token operator">=</span> <span class="token string">"EDGE_ENHANCE_MORE"</span>    EMBOSS <span class="token operator">=</span> <span class="token string">"EMBOSS"</span>    FIND_EDGES <span class="token operator">=</span> <span class="token string">"FIND_EDGES"</span>    SMOOTH <span class="token operator">=</span> <span class="token string">"SMOOTH"</span>    SMOOTH_MORE <span class="token operator">=</span> <span class="token string">"SMOOTH_MORE"</span>    SHARPEN <span class="token operator">=</span> <span class="token string">"SHARPEN"</span>    FilterList <span class="token operator">=</span> <span class="token punctuation">[</span>BLUR<span class="token punctuation">,</span> CONTOUR<span class="token punctuation">,</span> DETAIL<span class="token punctuation">,</span>                  EDGE_ENHANCE<span class="token punctuation">,</span> EDGE_ENHANCE_MORE<span class="token punctuation">,</span> EMBOSS<span class="token punctuation">,</span>                  FIND_EDGES<span class="token punctuation">,</span> SMOOTH<span class="token punctuation">,</span> SMOOTH_MORE<span class="token punctuation">,</span>                  SHARPEN<span class="token punctuation">]</span>    ImageFilterList <span class="token operator">=</span> <span class="token punctuation">[</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>CONTOUR<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>DETAIL<span class="token punctuation">,</span>                       ImageFilter<span class="token punctuation">.</span>EDGE_ENHANCE<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>EDGE_ENHANCE_MORE<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>EMBOSS<span class="token punctuation">,</span>                       ImageFilter<span class="token punctuation">.</span>FIND_EDGES<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>SMOOTH<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>SMOOTH_MORE<span class="token punctuation">,</span>                       ImageFilter<span class="token punctuation">.</span>SHARPEN<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyMode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    MODE1 <span class="token operator">=</span> <span class="token string">"1"</span>    L <span class="token operator">=</span> <span class="token string">"L"</span>    I <span class="token operator">=</span> <span class="token string">"I"</span>    F <span class="token operator">=</span> <span class="token string">"F"</span>    P <span class="token operator">=</span> <span class="token string">"P"</span>    RGB <span class="token operator">=</span> <span class="token string">"RGB"</span>    RGBX <span class="token operator">=</span> <span class="token string">"RGBX"</span>    RGBA <span class="token operator">=</span> <span class="token string">"RGBA"</span>    CMYK <span class="token operator">=</span> <span class="token string">"CMYK"</span>    YCbCr <span class="token operator">=</span> <span class="token string">"YCbCr"</span>    <span class="token comment"># LAB = "LAB"</span>    HSV <span class="token operator">=</span> <span class="token string">"HSV"</span>    ModeList <span class="token operator">=</span> <span class="token punctuation">[</span>MODE1<span class="token punctuation">,</span> L<span class="token punctuation">,</span> I<span class="token punctuation">,</span> F<span class="token punctuation">,</span> P<span class="token punctuation">,</span> RGB<span class="token punctuation">,</span> RGBX<span class="token punctuation">,</span> RGBA<span class="token punctuation">,</span> CMYK<span class="token punctuation">,</span> YCbCr<span class="token punctuation">,</span> HSV<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_position</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    pic_width <span class="token operator">=</span> width<span class="token operator">*</span>row_count    position <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">%</span>pic_width<span class="token punctuation">,</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">/</span>pic_width<span class="token operator">*</span>width    <span class="token keyword">return</span> position<span class="token keyword">def</span> <span class="token function">get_pic_size</span><span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> pic_num<span class="token punctuation">,</span> row_count<span class="token punctuation">)</span><span class="token punctuation">:</span>    pic_width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> row_count    extra_row <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> pic_num <span class="token operator">%</span> row_count <span class="token keyword">else</span> <span class="token number">0</span>    pic_height <span class="token operator">=</span> <span class="token punctuation">(</span>pic_num <span class="token operator">/</span> row_count <span class="token operator">+</span> extra_row<span class="token punctuation">)</span> <span class="token operator">*</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> pic_width<span class="token punctuation">,</span> pic_height<span class="token keyword">def</span> <span class="token function">create_filter</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyFilter<span class="token punctuation">.</span>FilterList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyFilter<span class="token punctuation">.</span>FilterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        CONTOURimg <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOUR <span class="token operator">=</span> CONTOURimg<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>MyFilter<span class="token punctuation">.</span>ImageFilterList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOUR<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MyFilter<span class="token punctuation">.</span>FilterList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOUR<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># image.save("filter.jpg")</span>    image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_mode</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        CONTOUR <span class="token operator">=</span> img<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOUR<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># image.save("mode.jpg")</span>    image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    create_mode<span class="token punctuation">(</span><span class="token string">"res.jpg"</span><span class="token punctuation">)</span>    create_filter<span class="token punctuation">(</span><span class="token string">"res.jpg"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—Transpose,Blend,Split,Composite</title>
      <link href="hou-duan-kai-fa/python-pil-transpose-blend-split-composite/"/>
      <url>hou-duan-kai-fa/python-pil-transpose-blend-split-composite/</url>
      
        <content type="html"><![CDATA[<h4 id="Transpose-方向变换"><a href="#Transpose-方向变换" class="headerlink" title="Transpose 方向变换"></a>Transpose 方向变换</h4><ul><li>横看成岭侧成峰，好不容易有了Object，还不从各个方向都欣赏一下。<br><img src="https://img-blog.csdnimg.cn/20190727215620420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="Blend-调节透明度并合并"><a href="#Blend-调节透明度并合并" class="headerlink" title="Blend 调节透明度并合并"></a>Blend 调节透明度并合并</h4></li><li><pre><code>前提：两张图片的尺寸和模式一致。</code></pre></li><li>一张图想同时放两个Object，也不是不可以，但是图这两个Object怎么分配资源？当然是55开还是28开都可以，原则就是你只有两者的和为1。<blockquote><ul><li>合并公式：res_img = image1 * (1 - alpha) + image2 * alpha<br><img src="https://img-blog.csdnimg.cn/20190727220007302.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h4 id="Split-RGB通道"><a href="#Split-RGB通道" class="headerlink" title="Split RGB通道"></a>Split RGB通道</h4>每张图片都是有红绿蓝三个通道的，split方法可以将三个通道分离，像不像三种肤色的Object。<br><img src="https://img-blog.csdnimg.cn/20190727220155886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="Composite-两张图片合并，并加入mask图像作为透明度。"><a href="#Composite-两张图片合并，并加入mask图像作为透明度。" class="headerlink" title="Composite 两张图片合并，并加入mask图像作为透明度。"></a>Composite 两张图片合并，并加入mask图像作为透明度。</h4></li><li>前提：image1, image2, mask 图片的尺寸和模式一致。<br>相当于Photoshop里的通道蒙版，下图效果不是特别好，可以注意一下图1的嘴，颜色没有图2、3明显。拿自己的Object试试看，可能对比效果会好一点。<br><img src="https://img-blog.csdnimg.cn/20190727220505748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/local/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageDrawfont_posotion <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span>color <span class="token operator">=</span>  <span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span>font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'Arial.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"unic"</span><span class="token punctuation">)</span>thumbnail_size <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span>row_count <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">def</span> <span class="token function">create_thumbnail</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> thumbnail_size    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span>size<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    <span class="token keyword">return</span> im<span class="token keyword">def</span> <span class="token function">get_position</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    pic_width <span class="token operator">=</span> width<span class="token operator">*</span>row_count    position <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">%</span>pic_width<span class="token punctuation">,</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">/</span>pic_width<span class="token operator">*</span>width    <span class="token keyword">return</span> position<span class="token keyword">def</span> <span class="token function">get_pic_size</span><span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> pic_num<span class="token punctuation">,</span> row_count<span class="token punctuation">)</span><span class="token punctuation">:</span>    pic_width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> row_count    extra_row <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> pic_num <span class="token operator">%</span> row_count <span class="token keyword">else</span> <span class="token number">0</span>    pic_height <span class="token operator">=</span> <span class="token punctuation">(</span>pic_num <span class="token operator">/</span> row_count <span class="token operator">+</span> extra_row<span class="token punctuation">)</span> <span class="token operator">*</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> pic_width<span class="token punctuation">,</span> pic_height<span class="token keyword">class</span> <span class="token class-name">MyTranspose</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    FLIP_LEFT_RIGHT <span class="token operator">=</span> <span class="token string">"FLIP_LEFT_RIGHT"</span>    FLIP_TOP_BOTTOM <span class="token operator">=</span> <span class="token string">"FLIP_TOP_BOTTOM"</span>    ROTATE_90 <span class="token operator">=</span> <span class="token string">"ROTATE_90"</span>    ROTATE_180 <span class="token operator">=</span> <span class="token string">"ROTATE_180"</span>    ROTATE_270 <span class="token operator">=</span> <span class="token string">"ROTATE_270"</span>    TRANSPOSE <span class="token operator">=</span> <span class="token string">"TRANSPOSE"</span>    TransposeList <span class="token operator">=</span> <span class="token punctuation">[</span>FLIP_LEFT_RIGHT<span class="token punctuation">,</span>FLIP_TOP_BOTTOM<span class="token punctuation">,</span>ROTATE_90<span class="token punctuation">,</span>ROTATE_180<span class="token punctuation">,</span>ROTATE_270<span class="token punctuation">,</span>TRANSPOSE<span class="token punctuation">]</span>    ImageTransposeList <span class="token operator">=</span> <span class="token punctuation">[</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>FLIP_TOP_BOTTOM<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>ROTATE_90<span class="token punctuation">,</span>                          Image<span class="token punctuation">.</span>ROTATE_180<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>ROTATE_270<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>TRANSPOSE<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MySplit</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    R <span class="token operator">=</span> <span class="token string">"R"</span>    G <span class="token operator">=</span> <span class="token string">"G"</span>    B <span class="token operator">=</span> <span class="token string">"B"</span>    SplitList <span class="token operator">=</span> <span class="token punctuation">[</span>R<span class="token punctuation">,</span> G<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">create_transpose</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 方向变换</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyTranspose<span class="token punctuation">.</span>TransposeList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyTranspose<span class="token punctuation">.</span>TransposeList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOURimg <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>MyTranspose<span class="token punctuation">.</span>ImageTransposeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MyTranspose<span class="token punctuation">.</span>TransposeList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count<span class="token operator">+=</span><span class="token number">1</span>    CONTOURimg <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">)</span>    CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> <span class="token string">"ORIGINAL PIC"</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>    image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># image.show()</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"transpose.jpg"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_blend</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 合并</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    copy_img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>    res_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>blend<span class="token punctuation">(</span>img<span class="token punctuation">,</span> copy_img<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    res_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_composite</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 蒙版工具</span>    count <span class="token operator">=</span> <span class="token number">0</span>    mask_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"R"</span><span class="token punctuation">,</span><span class="token string">"G"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">]</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> i        copy_img <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>        res_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>blend<span class="token punctuation">(</span>thumbnail_im<span class="token punctuation">,</span> copy_img<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>        my_split <span class="token operator">=</span> res_img<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>composite<span class="token punctuation">(</span>thumbnail_im<span class="token punctuation">,</span> res_img<span class="token punctuation">,</span> my_split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> <span class="token string">"mask: %s"</span> <span class="token operator">%</span> mask_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>im<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"composite.jpg"</span><span class="token punctuation">)</span>    <span class="token comment"># image.show()</span><span class="token keyword">def</span> <span class="token function">create_split</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 图层</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MySplit<span class="token punctuation">.</span>SplitList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MySplit<span class="token punctuation">.</span>SplitList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        CONTOURimg <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MySplit<span class="token punctuation">.</span>SplitList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># image.show()</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"split.jpg"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># create_transpose("res.jpg")</span>    <span class="token comment"># create_split("res.jpg")</span>    <span class="token comment"># create_blend("res.jpg")</span>    create_composite<span class="token punctuation">(</span><span class="token string">"res.jpg"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—Color</title>
      <link href="hou-duan-kai-fa/python-pil-color/"/>
      <url>hou-duan-kai-fa/python-pil-color/</url>
      
        <content type="html"><![CDATA[<h4 id="ImageColor"><a href="#ImageColor" class="headerlink" title="ImageColor"></a>ImageColor</h4><h5 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h5><ul><li>共六位前两位表示R，中间两位表示G，后两位表示B 如：#ff0000</li></ul><h5 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h5><ul><li>如：rgb(255, 0, 0)、rgb(100%, 0%, 0%)</li></ul><h5 id="HSL-Hue-Saturation-Ligntness"><a href="#HSL-Hue-Saturation-Ligntness" class="headerlink" title="HSL(Hue-Saturation-Ligntness)"></a>HSL(Hue-Saturation-Ligntness)</h5><ul><li>hsl(hue, saturation%, lightness%)</li><li>hue 为[0, 360], red=0, green=120, blue=240</li><li>saturation 为[0%, 100%] gray=0, full=100%</li><li>lightness 为[0%, 100%] black=0, normal=50%, white=100%</li><li>如：hsl(0, 100%, 50%)</li></ul><h5 id="Getrgb"><a href="#Getrgb" class="headerlink" title="Getrgb"></a>Getrgb</h5><ul><li>六种方法获取红色tuple值<pre class="line-numbers language-python" data-language="python"><code class="language-python">ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"ff0000"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"rgb(255,0,0)"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"rgb(100%,0%,0%)"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"hsl(0,100%,50%)"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span> <span class="token comment"># 不是每个颜色类型的单词都可以这样用，pil中罗列了常用的颜色</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—ImageFilter函数</title>
      <link href="hou-duan-kai-fa/python-pil-imagefilter-han-shu/"/>
      <url>hou-duan-kai-fa/python-pil-imagefilter-han-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/icamera0/article/details/50708888">参考地址</a></p><h4 id="滤镜函数"><a href="#滤镜函数" class="headerlink" title="滤镜函数"></a>滤镜函数</h4><h5 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h5><p><img src="https://img-blog.csdnimg.cn/20190729010351783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h5><blockquote><p>Kernel(size, kernel, scale=None, offset=0)</p></blockquote><ul><li>生成给定尺寸的卷积核，变量的size必须为(3, 3) 或(5, 5)。</li><li>kernel与size对应，必须为9或25个整数或浮点数。</li><li>如果设置scale，则卷积核作用于每个像素之后都要除以scale值，默认值为卷积核的权重之和。</li><li>如果设置offset，则将offset值与卷积核相加，然后除以scale</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>Kernel_im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>Kernel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RankFilter"><a href="#RankFilter" class="headerlink" title="RankFilter"></a>RankFilter</h5><blockquote><p>RankFilter(size, rank)</p></blockquote><ul><li>等级滤波器。</li><li>对于输入图像的每个像素点，等级滤波器根据像素值，在(size, size) 的区域中对所有像素点进行排序，然后拷贝对应等级的值存储到输出图像中。</li><li>size，以像素点为中心size * size 的像素点中进行排序。</li><li>rank，size * size 的像素中选择排序第rank位的像素作为新值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>RankFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="MinFilter-MedianFilter-MaxFilter"><a href="#MinFilter-MedianFilter-MaxFilter" class="headerlink" title="MinFilter, MedianFilter,MaxFilter"></a>MinFilter, MedianFilter,MaxFilter</h5><blockquote><p>MinFilter(size)<br>最小滤波器。<br>MedianFilter(size)<br>中值滤波器。<br>MaxFilter(size)<br>最大滤波器。</p></blockquote><ul><li>size，以像素点为中心的(size * size) 区域中选择最小、中值、最大的像素作为新值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MinFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MedianFilterFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MaxFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ModeFilter"><a href="#ModeFilter" class="headerlink" title="ModeFilter"></a>ModeFilter</h5><blockquote><p>ModeFilter(size)</p></blockquote><ul><li>模式滤波器</li><li>size，以像素点为中心的(size * size)区域中选择出现次数最多的像素最为新值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>ModeFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-expire比exists更好用</title>
      <link href="zhong-jian-jian/redis-expire-bi-exists-geng-hao-yong/"/>
      <url>zhong-jian-jian/redis-expire-bi-exists-geng-hao-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/9352d20fb2e0">参考文章——简书</a></p><h4 id="什么情况下expire比exists更好？"><a href="#什么情况下expire比exists更好？" class="headerlink" title="什么情况下expire比exists更好？"></a>什么情况下expire比exists更好？</h4><h6 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h6><ul><li>redis key过期时间必须设置（特殊需求除外），但是如果DB的值有变动会主动更新到redis，所以不会有数据不同步的情况。<h6 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h6></li><li>每次都需要判断某个key是否存在，然后才能执行相应的操作。<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6></li><li>最坏情况下，代码在执行exists时key是有效的，后面对key进行操作时，发现在那两行代码执行的中间，key被清掉了。</li><li>条件虽然比较极端，但是在代码里——一切皆有可能。<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6></li><li>expire代替exists，重置key的过期时间。相当于利用expire给key续命，可以合理的“长生不死”。</li></ul><h1 id="过期相关补充"><a href="#过期相关补充" class="headerlink" title="过期相关补充"></a>过期相关补充</h1><h4 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">EXPIRE <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>TTL<span class="token operator">></span> <span class="token punctuation">:</span> 将键的生存时间设为 ttl 秒PEXPIRE <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>TTL<span class="token operator">></span> <span class="token punctuation">:</span>将键的生存时间设为 ttl 毫秒EXPIREAT <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>timestamp<span class="token operator">></span> <span class="token punctuation">:</span>将键的过期时间设为 timestamp 所指定的秒数时间戳PEXPIREAT <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>timestamp<span class="token operator">></span><span class="token punctuation">:</span> 将键的过期时间设为 timestamp 所指定的毫秒数时间戳<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">persist key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="redis值和过期时间的存储"><a href="#redis值和过期时间的存储" class="headerlink" title="redis值和过期时间的存储"></a>redis值和过期时间的存储</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy83MzYxMzgzLTcwMDYyYTM2ZDQxOWZjMTcucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h4 id="删除book键的过期时间后的存储结构"><a href="#删除book键的过期时间后的存储结构" class="headerlink" title="删除book键的过期时间后的存储结构"></a>删除book键的过期时间后的存储结构</h4><ul><li>book键的过期时间没有了<br><img src="https://img-blog.csdnimg.cn/20190823213116792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-基础知识整理</title>
      <link href="uncatesgorized/python-ji-chu-zhi-shi-zheng-li/"/>
      <url>uncatesgorized/python-ji-chu-zhi-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>基本数据类型：int,float,str,list,dict,tuple,set,bool<br>数值类型：int,float,bool<br>序列类型：str,list,tuple<br>散列类型：set,dict</p><p>字节类型 a=bytes(‘123’)/a = b’123’<br>字节数组 bytearray(‘123’)</p><p>可变序列：list,set,dict<br>不可变序列：str,tuple</p><h4 id="数据类型方法"><a href="#数据类型方法" class="headerlink" title="数据类型方法"></a>数据类型方法</h4><h5 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h5><ol><li>增<pre class="line-numbers language-python" data-language="python"><code class="language-python">strs <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3strs <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">]</span><span class="token punctuation">)</span>strs <span class="token operator">=</span> <span class="token string">"%s%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span>strs <span class="token operator">=</span> <span class="token string">"&#123;&#125;&#123;&#125;&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>删<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># m准备替换的内容，n替换的内容，x替换的个数</span>strs <span class="token operator">=</span> x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>改<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x转化为大写</span>x<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x转化为小写</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 去x左右空白</span>x<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 去左空白</span>x<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 去右空白</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x标题化</span>x<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 第一个字母大写</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span>m<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment"># 以m为界分割，分割x次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>查<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m的索引 找不到抛异常</span>x<span class="token punctuation">.</span>find<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m的索引 找不到返-1</span>x<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 计数</span>x<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 是否是数字</span>x<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 是否是字母</span>x<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 是否是大写</span>x<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 是否是小写</span>x<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 是否以m开头</span>x<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 是否以m结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h5><ol><li>增<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>li<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment"># 在x下标处插入m</span>li<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>删<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 删除并返回该元素的值，若无参数则从最后开始删</span>li<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 删掉第一个m</span>li<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 清空 py2无此方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>改<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查 <pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m索引的内容</span>li<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m的数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>浅复制<pre class="line-numbers language-python" data-language="python"><code class="language-python">copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>深复制<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copyli2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>li1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>永久排序<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">/</span><span class="token boolean">False</span><span class="token punctuation">)</span>li<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 倒排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>临时排序<pre class="line-numbers language-python" data-language="python"><code class="language-python">li2 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">/</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># li2是list</span>li2 <span class="token operator">=</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token comment"># li2是listreverseiterator 对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h5><ol><li>查<pre class="line-numbers language-python" data-language="python"><code class="language-python">t<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">)</span>t<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h5><p><strong>交集&amp;</strong><br><strong>并集|</strong><br><strong>差集-</strong></p><ol><li>增<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 随机删除</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>改<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>update<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 向集合添加m，m可以为str list tuple set dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># 是否存在交集 </span>a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># a是否是b的子集</span>a<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># a是否是b的父集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-BloomFilter实现</title>
      <link href="hou-duan-kai-fa/python-bloomfilter-shi-xian/"/>
      <url>hou-duan-kai-fa/python-bloomfilter-shi-xian/</url>
      
        <content type="html"><![CDATA[<ul><li>学习笔记，如有不足之处，欢迎指正。</li></ul><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> time<span class="token keyword">import</span> redis<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">class</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cap<span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cap <span class="token operator">=</span> cap        self<span class="token punctuation">.</span>seed <span class="token operator">=</span> seed    <span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ret <span class="token operator">+=</span> self<span class="token punctuation">.</span>seed <span class="token operator">*</span> ret <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> ret<span class="token keyword">class</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 随机种子</span>    SEEDS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">543</span><span class="token punctuation">,</span> <span class="token number">460</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">876</span><span class="token punctuation">,</span> <span class="token number">796</span><span class="token punctuation">,</span> <span class="token number">607</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">837</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">591</span><span class="token punctuation">,</span> <span class="token number">946</span><span class="token punctuation">,</span> <span class="token number">846</span><span class="token punctuation">,</span> <span class="token number">521</span><span class="token punctuation">,</span> <span class="token number">913</span><span class="token punctuation">,</span> <span class="token number">636</span><span class="token punctuation">,</span> <span class="token number">878</span><span class="token punctuation">,</span> <span class="token number">735</span><span class="token punctuation">,</span> <span class="token number">414</span><span class="token punctuation">,</span> <span class="token number">372</span><span class="token punctuation">,</span>             <span class="token number">344</span><span class="token punctuation">,</span> <span class="token number">324</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">327</span><span class="token punctuation">,</span> <span class="token number">891</span><span class="token punctuation">,</span> <span class="token number">798</span><span class="token punctuation">,</span> <span class="token number">933</span><span class="token punctuation">,</span> <span class="token number">493</span><span class="token punctuation">,</span> <span class="token number">293</span><span class="token punctuation">,</span> <span class="token number">836</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">544</span><span class="token punctuation">,</span> <span class="token number">924</span><span class="token punctuation">,</span> <span class="token number">849</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">862</span><span class="token punctuation">,</span> <span class="token number">648</span><span class="token punctuation">,</span> <span class="token number">338</span><span class="token punctuation">,</span>             <span class="token number">465</span><span class="token punctuation">,</span> <span class="token number">562</span><span class="token punctuation">,</span> <span class="token number">693</span><span class="token punctuation">,</span> <span class="token number">979</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">763</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">387</span><span class="token punctuation">,</span> <span class="token number">374</span><span class="token punctuation">,</span> <span class="token number">349</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">680</span><span class="token punctuation">,</span> <span class="token number">574</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">307</span><span class="token punctuation">,</span> <span class="token number">580</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">535</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span>             <span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">519</span><span class="token punctuation">,</span> <span class="token number">644</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">686</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">424</span><span class="token punctuation">,</span> <span class="token number">326</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">909</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">951</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">812</span><span class="token punctuation">,</span> <span class="token number">901</span><span class="token punctuation">,</span> <span class="token number">926</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">507</span><span class="token punctuation">,</span> <span class="token number">739</span><span class="token punctuation">,</span> <span class="token number">371</span><span class="token punctuation">,</span>             <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">584</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">284</span><span class="token punctuation">,</span> <span class="token number">617</span><span class="token punctuation">,</span> <span class="token number">332</span><span class="token punctuation">,</span> <span class="token number">472</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">605</span><span class="token punctuation">,</span> <span class="token number">262</span><span class="token punctuation">,</span> <span class="token number">355</span><span class="token punctuation">,</span> <span class="token number">526</span><span class="token punctuation">,</span> <span class="token number">647</span><span class="token punctuation">,</span> <span class="token number">923</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">518</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">,</span> error_rate<span class="token operator">=</span><span class="token number">0.0000001</span><span class="token punctuation">,</span> redis_con<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">"bloomfilter"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bit_size <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>capacity <span class="token operator">*</span> math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>math<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> error_rate<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 所需位数</span>        self<span class="token punctuation">.</span>hash_time <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log1p<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>bit_size <span class="token operator">/</span> capacity<span class="token punctuation">)</span>  <span class="token comment"># 最少hash次数</span>        self<span class="token punctuation">.</span>memery <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bit_size <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 占用多少M内存</span>        self<span class="token punctuation">.</span>block_num <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memery <span class="token operator">/</span> <span class="token number">512</span><span class="token punctuation">)</span>  <span class="token comment"># 需要多少个512M的内存块,value的第一个字符必须是ascii码，最多有256个内存块</span>        self<span class="token punctuation">.</span>seeds <span class="token operator">=</span> self<span class="token punctuation">.</span>SEEDS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>hash_time<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key        self<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>hash_func <span class="token operator">=</span> <span class="token punctuation">[</span>SimpleHash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bit_size<span class="token punctuation">,</span> seed<span class="token punctuation">)</span> <span class="token keyword">for</span> seed <span class="token keyword">in</span> self<span class="token punctuation">.</span>seeds<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>redis_con <span class="token operator">=</span> redis_con    <span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>block_num<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_contains</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str_input<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> str_input<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            m5 <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            str_input <span class="token operator">=</span> m5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token boolean">True</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>get_key<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            <span class="token keyword">for</span> f <span class="token keyword">in</span> self<span class="token punctuation">.</span>hash_func<span class="token punctuation">:</span>                loc <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>                ret <span class="token operator">=</span> ret <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>redis_con<span class="token punctuation">.</span>getbit<span class="token punctuation">(</span>name<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>            <span class="token keyword">return</span> ret        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str_input<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            m5 <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            str_input <span class="token operator">=</span> m5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>get_key<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            <span class="token keyword">for</span> f <span class="token keyword">in</span> self<span class="token punctuation">.</span>hash_func<span class="token punctuation">:</span>                loc <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>redis_con<span class="token punctuation">.</span>setbit<span class="token punctuation">(</span>name<span class="token punctuation">,</span> loc<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bloom_filter_redis_conn_args <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token string">"6379"</span><span class="token punctuation">,</span>        <span class="token string">"db"</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    redis_con <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span><span class="token operator">**</span>bloom_filter_redis_conn_args<span class="token punctuation">)</span><span class="token punctuation">)</span>    bloom_filter <span class="token operator">=</span> BloomFilter<span class="token punctuation">(</span>redis_con<span class="token operator">=</span>redis_con<span class="token punctuation">)</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6100000</span><span class="token punctuation">,</span> <span class="token number">6101000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bloom_filter<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bloom_filter<span class="token punctuation">.</span>is_contains<span class="token punctuation">(</span><span class="token string">"6100101"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初步结论（本地测试）"><a href="#初步结论（本地测试）" class="headerlink" title="初步结论（本地测试）"></a>初步结论（本地测试）</h4><ul><li>插入1000条耗时在2-4s之间。</li><li>插入和查询耗时基本相同。</li></ul><h4 id="Redis数据查询"><a href="#Redis数据查询" class="headerlink" title="Redis数据查询"></a>Redis数据查询</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➜  ~ redis<span class="token operator">-</span><span class="token function">cli</span> <span class="token operator">--</span>bigkeys <span class="token operator">-</span>i 0<span class="token punctuation">.</span>1 <span class="token operator">-</span>h 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token comment"># Scanning the entire keyspace to find biggest keys as well as</span><span class="token comment"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span><span class="token comment"># per 100 SCAN commands (not usually needed).</span><span class="token punctuation">[</span>00<span class="token punctuation">.</span>00<span class="token operator">%</span><span class="token punctuation">]</span> Biggest string found so far <span class="token string">'bloomfilter0'</span> with 419346305 bytes<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span> summary <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>Sampled 1 keys in the keyspace<span class="token operator">!</span>Total key length in bytes is 12 <span class="token punctuation">(</span>avg len 12<span class="token punctuation">.</span>00<span class="token punctuation">)</span>Biggest string found <span class="token string">'bloomfilter0'</span> has 419346305 bytes1 strings with 419346305 bytes <span class="token punctuation">(</span>100<span class="token punctuation">.</span>00<span class="token operator">%</span> of keys<span class="token punctuation">,</span> avg size 419346305<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 lists with 0 items <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00<span class="token operator">%</span> of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 hashs with 0 fields <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00<span class="token operator">%</span> of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 streams with 0 entries <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00<span class="token operator">%</span> of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 sets with 0 members <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00<span class="token operator">%</span> of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 zsets with 0 members <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00<span class="token operator">%</span> of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 bloomfilter0 所占内存为400M左右</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用在线网站</title>
      <link href="xiao-lu-gong-ju/chang-yong-zai-xian-wang-zhan/"/>
      <url>xiao-lu-gong-ju/chang-yong-zai-xian-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>欢迎补充</p><h4 id="curl-命令转换"><a href="#curl-命令转换" class="headerlink" title="curl 命令转换"></a>curl 命令转换</h4><p><a href="https://curl.trillworks.com/">https://curl.trillworks.com/</a></p><h4 id="curl-to-Go"><a href="#curl-to-Go" class="headerlink" title="curl-to-Go"></a>curl-to-Go</h4><p><a href="https://mholt.github.io/curl-to-go/">https://mholt.github.io/curl-to-go/</a></p><h4 id="JSON-to-Go"><a href="#JSON-to-Go" class="headerlink" title="JSON-to-Go"></a>JSON-to-Go</h4><p><a href="https://mholt.github.io/json-to-go/">https://mholt.github.io/json-to-go/</a></p><h4 id="mysql-转-ES-工具"><a href="#mysql-转-ES-工具" class="headerlink" title="mysql 转 ES 工具"></a>mysql 转 ES 工具</h4><p><a href="http://www.ischoolbar.com/EsParser/">http://www.ischoolbar.com/EsParser/</a></p><h4 id="json格式化、压缩、转义"><a href="#json格式化、压缩、转义" class="headerlink" title="json格式化、压缩、转义"></a>json格式化、压缩、转义</h4><p><a href="http://www.bejson.com/">http://www.bejson.com/</a></p><h4 id="代码对比"><a href="#代码对比" class="headerlink" title="代码对比"></a>代码对比</h4><p><a href="https://tool.oschina.net/diff">https://tool.oschina.net/diff</a></p><h4 id="corntab"><a href="#corntab" class="headerlink" title="corntab"></a>corntab</h4><p><a href="https://tool.lu/crontab/">https://tool.lu/crontab/</a></p><h4 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h4><p><a href="https://unixtime.51240.com/">https://unixtime.51240.com/</a></p><h4 id="URL编解码"><a href="#URL编解码" class="headerlink" title="URL编解码"></a>URL编解码</h4><p><a href="http://www.jsons.cn/urlencode/">http://www.jsons.cn/urlencode/</a></p><h4 id="中文字符与Unicode字符相互转换"><a href="#中文字符与Unicode字符相互转换" class="headerlink" title="中文字符与Unicode字符相互转换"></a>中文字符与Unicode字符相互转换</h4><p><a href="https://javawind.net/tools/native2ascii.jsp?action=transform">https://javawind.net/tools/native2ascii.jsp?action=transform</a></p><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><p><a href="https://cloudconvert.com/extract-7z-archive">https://cloudconvert.com/extract-7z-archive</a></p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><a href="https://app.diagrams.net/">https://app.diagrams.net/</a></p><h4 id="Golang程序员开发效率神器汇总"><a href="#Golang程序员开发效率神器汇总" class="headerlink" title="Golang程序员开发效率神器汇总"></a>Golang程序员开发效率神器汇总</h4><p><a href="https://juejin.cn/post/6844904007169736718">https://juejin.cn/post/6844904007169736718</a></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h4 id="加载等待CSS、GIF图"><a href="#加载等待CSS、GIF图" class="headerlink" title="加载等待CSS、GIF图"></a>加载等待CSS、GIF图</h4><p><a href="https://preloaders.net/">https://preloaders.net/</a><br><a href="https://loading.io/">https://loading.io/</a></p><h4 id="CSS代码兼容补全"><a href="#CSS代码兼容补全" class="headerlink" title="CSS代码兼容补全"></a>CSS代码兼容补全</h4><p><a href="http://autoprefixer.github.io/">http://autoprefixer.github.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-三行代码发送钉钉机器人消息</title>
      <link href="xiao-lu-gong-ju/golang-san-xing-dai-ma-fa-song-ding-ding-ji-qi-ren-xiao-xi/"/>
      <url>xiao-lu-gong-ju/golang-san-xing-dai-ma-fa-song-ding-ding-ji-qi-ren-xiao-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="dingtalk"><a href="#dingtalk" class="headerlink" title="dingtalk"></a>dingtalk</h1><p>钉钉机器人消息封装——Golang</p><p>目前自定义机器人支持</p><ul><li>文本（text）</li><li>链接（link）</li><li>markdown</li><li>ActionCard<ul><li>整体跳转</li><li>独立跳转</li></ul></li><li>FeedCard</li></ul><p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">机器人官方文档</a></p><ul><li>添加钉钉群：<strong>35451012</strong>，执行dingtalk_test.go测试方法可直接查看以下消息内容。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建钉钉群机器人"><a href="#创建钉钉群机器人" class="headerlink" title="创建钉钉群机器人"></a>创建钉钉群机器人</h3><ol><li>选择添加<code>自定义</code>机器人。</li><li>安全设置<br> 共有关键词、加签、IP白名单三种设置，需要根据情况进行选择。<br> <img src="https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg" alt="Xnip2020-07-05_15-55-24.jpg"></li><li>选择<code>自定义关键词</code>，这里设置的关键词在初始化机器人的时候会用到。<h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinkbean<span class="token operator">/</span>dingtalk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// key 创建钉钉机器人需要设置的关键词，默认为`.`</span><span class="token keyword">func</span> <span class="token function">InitDingTalk</span><span class="token punctuation">(</span>tokens <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>dingTalk<span class="token comment">// 加签方式创建钉钉机器人</span><span class="token comment">// 加签机器人 access_token和secret一一对应，在创建机器人是获取</span><span class="token keyword">func</span> <span class="token function">InitDingTalkWithSecret</span><span class="token punctuation">(</span>tokens <span class="token builtin">string</span><span class="token punctuation">,</span> secret <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>DingTalk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/blinkbean/dingtalk"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单个机器人有单位时间内消息条数的限制，如果有需要可以初始化多个token，发消息时随机发给其中一个机器人。</span>    <span class="token keyword">var</span> dingToken <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"7bd675b66646ba890046c2198257576470099e1bda0770bad7dd6684fb1e0415"</span><span class="token punctuation">&#125;</span>    cli <span class="token operator">:=</span> dingtalk<span class="token punctuation">.</span><span class="token function">InitDingTalk</span><span class="token punctuation">(</span>dingToken<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>    cli<span class="token punctuation">.</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text类型"><a href="#text类型" class="headerlink" title="text类型"></a>text类型</h3></li></ol><ul><li>方法及可选参数  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span>content <span class="token builtin">string</span><span class="token punctuation">,</span> opt <span class="token operator">...</span>atOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数</span><span class="token comment">// @所有人</span><span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// @指定群成员</span><span class="token function">WithAtMobiles</span><span class="token punctuation">(</span>mobiles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// at所有人</span>cli<span class="token punctuation">.</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// at指定群成员</span>mobiles <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"131********"</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token function">WithAtMobiles</span><span class="token punctuation">(</span>mobiles<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg" alt="Xnip2020-07-05_10-46-59.jpg"></li></ul><h3 id="link类型"><a href="#link类型" class="headerlink" title="link类型"></a>link类型</h3><ul><li>方法  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendLinkMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> picUrl<span class="token punctuation">,</span> msgUrl <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">cli<span class="token punctuation">.</span><span class="token function">SendLinkMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> picUrl<span class="token punctuation">,</span> msgUrl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg" alt="Xnip2020-07-05_10-25-33.jpg"></li></ul><h3 id="markdown类型"><a href="#markdown类型" class="headerlink" title="markdown类型"></a>markdown类型</h3><ul><li><p>方法及可选参数</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token comment">// text：markdown格式字符串</span><span class="token function">SendMarkDownMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>atOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数 目前钉钉markdown格式消息不支持@（可能是钉钉的bug），所以以下可选参数暂时不生效。</span><span class="token comment">// @所有人</span><span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// @指定群成员</span><span class="token function">WithAtMobiles</span><span class="token punctuation">(</span>mobiles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">cli<span class="token punctuation">.</span><span class="token function">SendMarkDownMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Markdown进阶</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 按行写入数组，增强markdown的可读性</span>msg <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>    <span class="token string">"### Link test"</span><span class="token punctuation">,</span>    <span class="token string">"---"</span><span class="token punctuation">,</span>    <span class="token string">"- &lt;font color=#00ff00 size=6>红色文字&lt;/font>"</span><span class="token punctuation">,</span>    <span class="token string">"- content2"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendMarkDownMessageBySlice</span><span class="token punctuation">(</span><span class="token string">"Markdown title"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 字体及颜色</span>dm <span class="token operator">:=</span> <span class="token function">DingMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"颜色测试"</span><span class="token punctuation">,</span> H2<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"失败：$$ 同行不同色 $$"</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span>  <span class="token comment">// 双$分隔</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"金色"</span><span class="token punctuation">,</span> GOLD<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">,</span> GREEN<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"警告"</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"普通文字"</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span>cli<span class="token punctuation">.</span><span class="token function">SendMarkDownMessageBySlice</span><span class="token punctuation">(</span><span class="token string">"color test"</span><span class="token punctuation">,</span> dm<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg" alt="Xnip2020-07-05_10-27-33.jpg"><br>  <img src="https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg" alt="Xnip2020-07-26_17-14-40.jpg"></p></li><li><p>点击DTMD链接发送消息</p><p>  点击’dtmdLink1’，自动发送’dtmdValue1’并@机器人，简化输入</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建有序map</span>dtmdOrderMap <span class="token operator">:=</span> <span class="token function">DingMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"dtmdOrderMap1"</span><span class="token punctuation">,</span> <span class="token string">"dtmdValue1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"dtmdOrderMap2"</span><span class="token punctuation">,</span> <span class="token string">"dtmdValue2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"dtmdOrderMap3"</span><span class="token punctuation">,</span> <span class="token string">"dtmdValue3"</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> dingTalkCli<span class="token punctuation">.</span><span class="token function">SendDTMDMessage</span><span class="token punctuation">(</span><span class="token string">"DTMD title"</span><span class="token punctuation">,</span> dtmdOrderMap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg" alt="Xnip2020-11-02_17-17-26.jpg"></p></li></ul><h3 id="ActionCard类型-独立跳转"><a href="#ActionCard类型-独立跳转" class="headerlink" title="ActionCard类型(独立跳转)"></a>ActionCard类型(独立跳转)</h3><ul><li>方法及可选参数  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendActionCardMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>actionCardOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数</span><span class="token comment">// 标题</span><span class="token function">WithCardSingleTitle</span><span class="token punctuation">(</span>title <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">// 跳转地址</span><span class="token function">WithCardSingleURL</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">cli<span class="token punctuation">.</span><span class="token function">SendActionSingleMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token function">WithCardSingleTitle</span><span class="token punctuation">(</span>sTitle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WithCardSingleURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg" alt="Xnip2020-07-05_10-28-57.jpg"></li></ul><h3 id="ActionCard类型-独立跳转-1"><a href="#ActionCard类型-独立跳转-1" class="headerlink" title="ActionCard类型(独立跳转)"></a>ActionCard类型(独立跳转)</h3><ul><li>方法及可选参数  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendActionCardMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>actionCardOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数</span><span class="token comment">// 按钮排列方向，默认水平</span><span class="token function">WithCardBtnVertical</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 跳转按钮</span><span class="token function">WithCardBtns</span><span class="token punctuation">(</span>btns <span class="token punctuation">[</span><span class="token punctuation">]</span>ActionCardMultiBtnModel<span class="token punctuation">)</span><span class="token comment">// ActionCardMultiBtnModel</span><span class="token keyword">type</span> ActionCardMultiBtnModel <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Title     <span class="token builtin">string</span> <span class="token string">`json:"title,omitempty"`</span>    ActionURL <span class="token builtin">string</span> <span class="token string">`json:"actionURL,omitempty"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">btns <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ActionCardMultiBtnModel<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>    Title<span class="token punctuation">:</span>     <span class="token string">"test1"</span><span class="token punctuation">,</span>    ActionURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    Title<span class="token punctuation">:</span>     <span class="token string">"test2"</span><span class="token punctuation">,</span>    ActionURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendActionSingleMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token function">WithCardBtns</span><span class="token punctuation">(</span>btns<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg" alt="Xnip2020-07-05_10-29-21.jpg"><br>  <img src="https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg" alt="Xnip2020-07-26_17-14-56.jpg"></li></ul><h3 id="FeedCard类型"><a href="#FeedCard类型" class="headerlink" title="FeedCard类型"></a>FeedCard类型</h3><ul><li>方法  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendFeedCardMessage</span><span class="token punctuation">(</span>feedCard <span class="token punctuation">[</span><span class="token punctuation">]</span>FeedCardLinkModel<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// FeedCardLinkModel</span><span class="token keyword">type</span> FeedCardLinkModel <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Title      <span class="token builtin">string</span> <span class="token string">`json:"title,omitempty"`</span>    MessageURL <span class="token builtin">string</span> <span class="token string">`json:"messageURL,omitempty"`</span>    PicURL     <span class="token builtin">string</span> <span class="token string">`json:"picURL,omitempty"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">links <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>FeedCardLinkModel<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        Title<span class="token punctuation">:</span>      <span class="token string">"FeedCard1."</span><span class="token punctuation">,</span>        MessageURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>        PicURL<span class="token punctuation">:</span>     testImg<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        Title<span class="token punctuation">:</span>      <span class="token string">"FeedCard2"</span><span class="token punctuation">,</span>        MessageURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>        PicURL<span class="token punctuation">:</span>     testImg<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        Title<span class="token punctuation">:</span>      <span class="token string">"FeedCard3"</span><span class="token punctuation">,</span>        MessageURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>        PicURL<span class="token punctuation">:</span>     testImg<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendFeedCardMessage</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg" alt="Xnip2020-07-05_10-30-02.jpg"></li></ul><h3 id="OutGoing"><a href="#OutGoing" class="headerlink" title="OutGoing"></a>OutGoing</h3><ul><li>消息格式  <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"atUsers"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"dingtalkId"</span><span class="token operator">:</span><span class="token string">"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7xv/8vh*"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"chatbotUserId"</span><span class="token operator">:</span><span class="token string">"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7x/8vh*"</span><span class="token punctuation">,</span>    <span class="token property">"conversationId"</span><span class="token operator">:</span><span class="token string">"cidkkCwvtlh1L0RmFuhmashi*=="</span><span class="token punctuation">,</span>    <span class="token property">"conversationTitle"</span><span class="token operator">:</span><span class="token string">"项目群"</span><span class="token punctuation">,</span>    <span class="token property">"conversationType"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>    <span class="token property">"createAt"</span><span class="token operator">:</span><span class="token number">1595232438950</span><span class="token punctuation">,</span>    <span class="token property">"isAdmin"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"isInAtList"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"msgId"</span><span class="token operator">:</span><span class="token string">"msgm/bJkKjTupFM7ZoRF/eKR*=="</span><span class="token punctuation">,</span>    <span class="token property">"msgtype"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>    <span class="token property">"sceneGroupCode"</span><span class="token operator">:</span><span class="token string">"project"</span><span class="token punctuation">,</span>    <span class="token property">"senderId"</span><span class="token operator">:</span><span class="token string">"$:LWCP_v1:$x4wFOct/DGctv96o4IxxB*=="</span><span class="token punctuation">,</span>    <span class="token property">"senderNick"</span><span class="token operator">:</span><span class="token string">"blinkbean"</span><span class="token punctuation">,</span>    <span class="token property">"sessionWebhook"</span><span class="token operator">:</span><span class="token string">"https://oapi.dingtalk.com/robot/sendBySession?session=6d69b333f243db32d42c11sda9de620*"</span><span class="token punctuation">,</span>    <span class="token property">"sessionWebhookExpiredTime"</span><span class="token operator">:</span><span class="token number">1595237839030</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">" outgoing"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Usage  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">OutGoing</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cli <span class="token operator">:=</span> dingtalk<span class="token punctuation">.</span><span class="token function">InitDingTalk</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"***"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>    msg<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">OutGoing</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    <span class="token comment">// 处理content</span>    res <span class="token operator">:=</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Content<span class="token punctuation">)</span>      textMsg <span class="token operator">:=</span> dingtalk<span class="token punctuation">.</span><span class="token function">NewTextMsg</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"respData"</span><span class="token punctuation">,</span> textMsg<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-字符串高效拼接</title>
      <link href="hou-duan-kai-fa/golang-zi-fu-chuan-gao-xiao-pin-jie/"/>
      <url>hou-duan-kai-fa/golang-zi-fu-chuan-gao-xiao-pin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://zhuanlan.zhihu.com/p/48865454">原文链接</a></h2><p>在我们编程的时候，和字符串打交道是必不可少的，我们对数据库里文本的处理，Web文本的显示，文本数据的存储等都需要和字符串打交道，那么对于字符串来说，查找、拼接这些都是常用的操作，尤其是以拼接使用的比较多，比如把一个人的姓名和年龄拼接在一起显示。</p><p>在Go语言（golang）中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？因为内存很贵、性能很重要，有时候不慎字符串的转换和拷贝，就可以把你的内存吃光，性能低下，不得不考虑。</p><p>一个例子<br>对于任何功能、性能、方法的研究，没有比例子更有说服力的啦。在这里，我们使用一个例子，来演示不同字符串的拼接方式，以及对应的性能分析。这个例子如下：</p><p>昵称:飞雪无情<br>博客:<a href="http://www.flysnow.org/">http://www.flysnow.org/</a><br>微信公众号:flysnow_org<br>在这个例子中，通过字符串拼接的方式，拼接出如上的内容，这里特别强调，在这个例子中，换行也是字符串拼接的一部分，因为我们要严格拼接出如上的内容。</p><p>+号拼接<br>这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。</p><pre class="line-numbers language-none"><code class="language-none">func StringPlus() string&#123;    var s string    s+&#x3D;&quot;昵称&quot;+&quot;:&quot;+&quot;飞雪无情&quot;+&quot;\n&quot;    s+&#x3D;&quot;博客&quot;+&quot;:&quot;+&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;+&quot;\n&quot;    s+&#x3D;&quot;微信公众号&quot;+&quot;:&quot;+&quot;flysnow_org&quot;    return s&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：</p><pre class="line-numbers language-none"><code class="language-none">func BenchmarkStringPlus(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringPlus()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行go test -bench=. -benchmem 查看性能输出如下：</p><p>BenchmarkStringPlus-8   20000000    108 ns/op   144 B/op    2 allocs/op<br>每次操作需要108ns,进行2次内存分配，分配114字节的内存。</p><p>fmt 拼接<br>这种拼接，借助于fmt.Sprint系列函数进行拼接，然后返回拼接的字符串。</p><pre class="line-numbers language-none"><code class="language-none">func StringFmt() string&#123;    return fmt.Sprint(&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了演示，代码没有换行，可能在手机上影响阅读体验，见谅。它的性能我们也测试一下看看效果。</p><pre class="line-numbers language-none"><code class="language-none">func BenchmarkStringFmt(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringFmt()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行查看测试结果：</p><p>BenchmarkStringFmt-8    5000000     385 ns/op   80 B/op     1 allocs/op<br>虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有+号操作快。</p><p>Join 拼接<br>这个是利用strings.Join函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。</p><pre class="line-numbers language-none"><code class="language-none">func StringJoin() string&#123;    s:&#x3D;[]string&#123;&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;&#125;    return strings.Join(s,&quot;&quot;)&#125;func BenchmarkStringJoin(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringJoin()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。</p><p>BenchmarkStringJoin-8   10000000    177 ns/op   160 B/op    2 allocs/op<br>整体和+操作相差不了太多，大概低0.5倍的样子。</p><p><a href="http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html">http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html</a></p><p>Go语言字符串高效拼接（一） | 飞雪无情的博客</p><p>buffer 拼接<br>这种被用的也很多，使用的是bytes.Buffer进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以byte,rune等，并且实现了io.Writer接口，写入也非常方便。</p><pre class="line-numbers language-none"><code class="language-none">func StringBuffer() string &#123;    var b bytes.Buffer    b.WriteString(&quot;昵称&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;飞雪无情&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;博客&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;微信公众号&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;flysnow_org&quot;)    return b.String()&#125;func BenchmarkStringBuffer(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringBuffer()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看他的性能，运行输出即可：</p><p>BenchmarkStringBuffer-8     5000000     291 ns/op   336 B/op    3 allocs/op<br>好像并不是太好,和最差的fmt拼接差不多，和+号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。</p><p>builder 拼接<br>为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。</p><pre class="line-numbers language-none"><code class="language-none">func StringBuilder() string &#123;    var b strings.Builder    b.WriteString(&quot;昵称&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;飞雪无情&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;博客&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;微信公众号&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;flysnow_org&quot;)    return b.String()&#125;func BenchmarkStringBuilder(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringBuilder()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方都说比buffer性能好了，我们看看性能测试的结果。</p><p>BenchmarkStringBuilder-8    10000000    170 ns/op   232 B/op    4 allocs/op<br>的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。</p><p>性能对比<br>以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。</p><p>运行go test -bench=. -benchmem -benchtime=3s -cpuprofile=profile.out得到如下测试结果：</p><pre class="line-numbers language-none"><code class="language-none">StringPlus-8    50000000    112 ns&#x2F;op   144 B&#x2F;op    2 allocs&#x2F;opStringFmt-8     20000000    344 ns&#x2F;op   80 B&#x2F;op     1 allocs&#x2F;opStringJoin-8    30000000    171 ns&#x2F;op   160 B&#x2F;op    2 allocs&#x2F;opStringBuffer-8  20000000    302 ns&#x2F;op   336 B&#x2F;op    3 allocs&#x2F;opStringBuilder-8 30000000    171 ns&#x2F;op   232 B&#x2F;op    4 allocs&#x2F;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过go tool pprof profile.out 看下我们输出的cpu profile信息。这里主要使用top命令。</p><pre class="line-numbers language-none"><code class="language-none">Showing top 15 nodes out of 89      flat  flat%   sum%        cum   cum%    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。</p><p>以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是+号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。</p><p>总结<br>从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？我们下一篇继续接着分析，这里提前透漏一些：比如:</p><p>拼接的字符串大小<br>拼接的字符串数量<br>以上这两个很关键，可以看下我上面的例子是属于哪一种。</p><p>好了，更深入具体的，请看下一篇字符串拼接分析。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-9宫格头像生成</title>
      <link href="hou-duan-kai-fa/golang-9-gong-ge-tou-xiang-sheng-cheng/"/>
      <url>hou-duan-kai-fa/golang-9-gong-ge-tou-xiang-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><ul><li>头像间有间隔<br><img src="https://img-blog.csdnimg.cn/20200303144245619.png" alt="在这里插入图片描述"></li><li>头像间无间隔<br><img src="https://img-blog.csdnimg.cn/20200303144310558.png" alt="在这里插入图片描述"></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li><p>网络图片下载到本地</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">multiGetImages</span><span class="token punctuation">(</span>urls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> dir <span class="token builtin">string</span><span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>localPath <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> w <span class="token operator">=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span>timestamp <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> url <span class="token operator">:=</span><span class="token keyword">range</span> urls <span class="token punctuation">&#123;</span>name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s/%s_%d_%d.png"</span><span class="token punctuation">,</span> dir<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> i<span class="token punctuation">)</span>localPath <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>localPath<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">downloadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>w<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">downloadImage</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> imgName <span class="token builtin">string</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>out<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>imgName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> out<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>client <span class="token operator">:=</span> http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>Timeout<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">&#125;</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pix<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>图片拼接</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">imageCompose</span><span class="token punctuation">(</span>imagePath <span class="token builtin">string</span><span class="token punctuation">,</span> localPaths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> gap <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>imageSize <span class="token operator">:=</span> <span class="token number">80</span>imageRow <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>localPaths<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 根据传入图片数量判断行列数量</span>imageCol <span class="token operator">:=</span> imageRowrowOffset <span class="token operator">:=</span> gapcolOffset <span class="token operator">:=</span> gapbackImg <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>imageSize<span class="token operator">*</span>imageRow<span class="token operator">+</span>gap<span class="token operator">*</span><span class="token punctuation">(</span>imageCol<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imageSize<span class="token operator">*</span>imageCol<span class="token operator">+</span>gap<span class="token operator">*</span><span class="token punctuation">(</span>imageRow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">.</span>NRGBA<span class="token punctuation">&#123;</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>tempRow<span class="token punctuation">,</span> tempCol <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">for</span> tempRow <span class="token operator">&lt;</span> imageRow<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> tempCol <span class="token operator">&lt;</span> imageCol<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>imgIndex <span class="token operator">:=</span> imageCol<span class="token operator">*</span><span class="token punctuation">(</span>tempRow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> tempCol <span class="token operator">-</span> <span class="token number">1</span>resizeImg<span class="token punctuation">,</span> err <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>localPaths<span class="token punctuation">[</span>imgIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>resizeImg <span class="token operator">=</span> imaging<span class="token punctuation">.</span><span class="token function">Blur</span><span class="token punctuation">(</span>imaging<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>resizeImg<span class="token punctuation">,</span> imageSize<span class="token punctuation">,</span> imageSize<span class="token punctuation">,</span> imaging<span class="token punctuation">.</span>Lanczos<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 加了模糊操作</span>backImg <span class="token operator">=</span> imaging<span class="token punctuation">.</span><span class="token function">Paste</span><span class="token punctuation">(</span>backImg<span class="token punctuation">,</span> resizeImg<span class="token punctuation">,</span> image<span class="token punctuation">.</span><span class="token function">Pt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tempCol<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>imageSize<span class="token operator">+</span>colOffset<span class="token punctuation">,</span> <span class="token punctuation">(</span>tempRow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>imageSize<span class="token operator">+</span>rowOffset<span class="token punctuation">)</span><span class="token punctuation">)</span>tempCol <span class="token operator">+=</span> <span class="token number">1</span>colOffset <span class="token operator">+=</span> gap<span class="token punctuation">&#125;</span>tempRow <span class="token operator">+=</span> <span class="token number">1</span>rowOffset <span class="token operator">+=</span> gaptempCol <span class="token operator">=</span> <span class="token number">1</span>colOffset <span class="token operator">=</span> gap<span class="token punctuation">&#125;</span>err <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>backImg<span class="token punctuation">,</span> imagePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除临时图片</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeFile</span><span class="token punctuation">(</span>filePaths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>url <span class="token operator">:=</span> <span class="token keyword">range</span> filePaths<span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的AES加密结果相同吗</title>
      <link href="hou-duan-kai-fa/ni-de-aes-jia-mi-jie-guo-xiang-tong-ma/"/>
      <url>hou-duan-kai-fa/ni-de-aes-jia-mi-jie-guo-xiang-tong-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="AES加密后的结果，数据接收方解不出来，是哪里的问题？"><a href="#AES加密后的结果，数据接收方解不出来，是哪里的问题？" class="headerlink" title="AES加密后的结果，数据接收方解不出来，是哪里的问题？"></a>AES加密后的结果，数据接收方解不出来，是哪里的问题？</h2><h4 id="AES的安全性："><a href="#AES的安全性：" class="headerlink" title="AES的安全性："></a>AES的安全性：</h4><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8">密码学</a>的意义上，只要存在一个方法，比<a href="https://zh.wikipedia.org/wiki/%E8%9B%AE%E5%8A%9B%E6%94%BB%E5%87%BB">穷举法</a>还要更有效率，就能被视为一种“破解”。故一个针对AES 128位密钥的攻击若“只”需要2^120^计算复杂度（少于穷举法　2^128^），128位密钥的AES就算被破解了。从应用的角度来看，这种程度的破解依然太不切实际。</p></blockquote><h4 id="AES加密方式有五种："><a href="#AES加密方式有五种：" class="headerlink" title="AES加密方式有五种："></a>AES加密方式有五种：</h4><ul><li><p>**电码本模式（Electronic Codebook Book (ECB)**，将整个明文分成若干段相同的小段，然后对每一小段进行加密。</p></li><li><p><strong>密码分组链接模式（Cipher Block Chaining (CBC)）</strong>，先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。</p><p>优点：能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。</p><p>缺点：（1）不利于并行计算；（2）传递误差——前一个出错则后续全错；（3）第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。</p><p>初始化IV的选取方式：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）</p></li><li><p><strong>计算器模式（Counter (CTR)）</strong>, 完全的流模式。将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 。</p></li><li><p><strong>密码反馈模式（Cipher FeedBack (CFB)）</strong></p></li><li><p><strong>输出反馈模式（Output FeedBack (OFB)）</strong>,密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</p></li></ul><h4 id="密钥长度三种："><a href="#密钥长度三种：" class="headerlink" title="密钥长度三种："></a>密钥长度三种：</h4><p>​    密钥越长，安全强度越高，运算开销就会越大。</p><ul><li>AES-128：16byte</li><li>AES-192：24byte</li><li>AES-256：32byte</li></ul><h4 id="Padding："><a href="#Padding：" class="headerlink" title="Padding："></a>Padding：</h4><ul><li>PKCS5：PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。</li><li>PKCS7：PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。</li><li>NOPADDING：指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。</li></ul><h4 id="实际使用中要注意的地方"><a href="#实际使用中要注意的地方" class="headerlink" title="实际使用中要注意的地方"></a>实际使用中要注意的地方</h4><ol><li>密钥、初始向量相同。</li><li>加密模式相同。</li><li>Padding模式相同。</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">aesEncrypt</span><span class="token punctuation">(</span>orig <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token comment">// 转成字节数组</span>origData <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span>k <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 分组秘钥</span>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"key 长度必须 16/24/32长度: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取秘钥块的长度</span>blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 补全码</span>origData <span class="token operator">=</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span><span class="token comment">// 加密模式</span>blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 创建数组</span>cryted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 加密</span>blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>cryted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span><span class="token keyword">return</span> base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>cryted<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">aesDecrypt</span><span class="token punctuation">(</span>cryted <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>crytedByte<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>cryted<span class="token punctuation">)</span>k <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 分组秘钥</span>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"key 长度必须 16/24/32长度: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取秘钥块的长度</span>blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 加密模式</span>blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 创建数组</span>orig <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crytedByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 解密</span>blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>orig<span class="token punctuation">,</span> crytedByte<span class="token punctuation">)</span><span class="token comment">// 去补全码</span>orig <span class="token operator">=</span> <span class="token function">PKCS7UnPadding</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结束了吗？"><a href="#结束了吗？" class="headerlink" title="结束了吗？"></a>结束了吗？</h4><p>加密或解密结果通常是byte数组，需要进一步转换为字符串。这时候通常又有两种选择，<strong>hex</strong>和<strong>base64</strong>。如果使用了base64进行编码，那么还有一个需要双方约定的地方。</p><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>Base64编码好处：简短、不可读性，即所编码的数据不会被人用肉眼所直接看到。</p><p>注意：后端与js通信时base64模式的选择🐶</p><table><thead><tr><th>模式</th><th>区别</th><th>备注</th></tr></thead><tbody><tr><td>StdEncoding</td><td>字符串由A-Za-z0-9+/组成，字节长度不能被3整除，用=补足</td><td></td></tr><tr><td>RawStdEncoding</td><td>字符串由A-Za-z0-9+/组成，字节长度不能被3整除，不用=补足</td><td></td></tr><tr><td>URLEncoding</td><td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，用=补足</td><td></td></tr><tr><td>RawURLEncoding</td><td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，不用=补足</td><td></td></tr></tbody></table><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> encodeStd <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">const</span> encodeURL <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//编码</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawStdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawStdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">//解码</span>base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang sync/atomic包的原子操作是怎么保证的</title>
      <link href="hou-duan-kai-fa/golang-sync-atomic-bao-de-yuan-zi-cao-zuo-shi-zen-me-bao-zheng-de/"/>
      <url>hou-duan-kai-fa/golang-sync-atomic-bao-de-yuan-zi-cao-zuo-shi-zen-me-bao-zheng-de/</url>
      
        <content type="html"><![CDATA[<p>在Go语言标准库中，<code>sync/atomic</code>包将底层硬件提供的原子级内存操作封装成了Go的函数。</p><p><code>Mutex</code>由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在CPU实现的指令集里，有一些指令直接封装进atomic包，这些指令在执行过程中是不允许中断的，因此原子操作可以在<code>lock-free</code>的情况下保证并发安全，并且它的性能也能做到随CPU个数的增多而线性扩展。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>int32</li><li>int64</li><li>uint32</li><li>uint64</li><li>uintptr</li><li>unsafe.Pointer</li></ul><h3 id="操作类型"><a href="#操作类型" class="headerlink" title="操作类型"></a>操作类型</h3><ul><li><p>增或减 AddXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">*</span>addr <span class="token operator">+=</span> delta<span class="token keyword">return</span> <span class="token operator">*</span>addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>比较并交换 CompareAndSwapXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token operator">*</span>addr <span class="token operator">==</span> old <span class="token punctuation">&#123;</span><span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token builtin">new</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>载入 LoadXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">return</span> <span class="token operator">*</span>addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>存储 StoreXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">*</span>addr <span class="token operator">=</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>交换 SwapXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">old <span class="token operator">=</span> <span class="token operator">*</span>addr<span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token builtin">new</span><span class="token keyword">return</span> old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="什么操作叫做原子操作？"><a href="#什么操作叫做原子操作？" class="headerlink" title="什么操作叫做原子操作？"></a>什么操作叫做原子操作？</h3><p>一个或者多个操作在CPU执行过程中不被中断的特性，称为原子性(atomicity)。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣城他们拥有了“不可分割”的原子性。</p><p>在Go中，一条普通的赋值语句其实不是一个原子操作。列如，在32位机器上写int64类型的变量就会有中间状态，因为他会被拆成两次写操作(MOV)——写低32位和写高32位。</p><h3 id="用锁行不行？"><a href="#用锁行不行？" class="headerlink" title="用锁行不行？"></a>用锁行不行？</h3><p>原子操作由<strong>底层硬件</strong>支持，而锁则由操作系统的<strong>调度器</strong>实现。锁应当用来保护一段逻辑，对于一个变量更新的保护，原子操作通常会更有效率，并且更能利用计算机多核的优势，如果要更新的是一个复合对象，则应当使用<code>atomic.Value</code>封装好的实现。</p><h4 id="值类型操作"><a href="#值类型操作" class="headerlink" title="值类型操作"></a>值类型操作</h4><ul><li>如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那得到的就是一个毫无逻辑的中间变量，会导致程序出现诡异的bug。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//在被操作值被频繁变更的情况下,CAS操作并不那么容易成功</span><span class="token comment">//利用for循环以进行多次尝试</span><span class="token keyword">var</span> value <span class="token builtin">int32</span><span class="token keyword">func</span> <span class="token function">addValue1</span><span class="token punctuation">(</span>delta <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">&#123;</span><span class="token comment">//在进行读取value的操作的过程中,其他对此值的读写操作是可以被同时进行的</span><span class="token comment">//那么这个读操作很可能会读取到一个只被修改了一半的数据</span>v <span class="token operator">:=</span> value<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用Load函数防止只读取一半有效数据的发生</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">addValue2</span><span class="token punctuation">(</span>delta <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用载入</span>v <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//在函数的结果值为true时,退出循环</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="struct类型操作"><a href="#struct类型操作" class="headerlink" title="struct类型操作"></a>struct类型操作</h4><ul><li>如果对一个结构体直接进行赋值，那出现问题的概率更高。线程刚写完一部分字段，读线程就读取了变量，那么只能读到一部分修改的值，破坏了变量的完整性，读到的值也是完全错误的。</li><li>面对这种多线程下变量的读写问题，1.4 版本的时候 <code>atomic.Value</code>登场，它使得我们可以不依赖于不保证兼容性的<code>unsafe.Pointer</code>类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用示例</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Addr <span class="token builtin">string</span>Port <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Config<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>Addr <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Port<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Config <span class="token punctuation">&#123;</span><span class="token comment">// do something</span><span class="token keyword">return</span> Config<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">automicValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> config atomic<span class="token punctuation">.</span>Valuewg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>config<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="atomic-Value-设计与实现"><a href="#atomic-Value-设计与实现" class="headerlink" title="atomic.Value 设计与实现"></a>atomic.Value 设计与实现</h4><p><code>atomic</code>包中除了<code>atomic.Value</code>外，其余都是早期由汇编写成的，<code>atomic.Value</code>类型的底层实现也是建立在已有的<code>atomic</code>包的基础上。</p><blockquote><h5 id="goroutine抢占"><a href="#goroutine抢占" class="headerlink" title="goroutine抢占"></a>goroutine抢占</h5><p>Go中调度器是GMP模型，简单理解G就是goroutine；M可以类比内核线程，是执行G的地方；P是调度G以及为G的执行准备所需资源。一般情况下，P的数量CPU的可用核心数，也可由<code>runtime.GOMAXPROCS</code>指定。</p><p>调度规则：某个G不能一直占用M，在某个时刻的时候，runtime会判断当前M是否可以被抢占，即M上正在执行的G让出。P在合理的时刻将G调度到合理的M上执行，在runtime里面，每个P维护一个本地存放待执行G的队列localq，同时还存在一个全局的待执行G的队列globalq；调度就是P从localq或globalq中取出G到对应的M上执行，所谓抢占，runtime将G抢占移出运行状态，拷贝G的执行栈放入待执行队列中，可能是某个P的localq，也可能是globalq，等待下一次调度，因此当被抢占的G重回待执行队列时有可能此时的P与前一次运行的P并非同一个。</p><p>所谓禁止抢占，即当前执行G不允许被抢占调度，直到禁止抢占标记解除。Go runtime实现了G的禁止抢占与解除禁止抢占。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//atomic.Value源码</span><span class="token keyword">type</span> Value <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所以可以存储任何类型的数据</span><span class="token punctuation">&#125;</span><span class="token comment">// 空 interface&#123;&#125; 的内部表示格式，作用是将interface&#123;&#125;类型分解，得到其中两个字段</span><span class="token keyword">type</span> ifaceWords <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>typ  unsafe<span class="token punctuation">.</span>Pointerdata unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">&#125;</span><span class="token comment">// 取数据就是正常走流程</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Value<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>typ <span class="token operator">:=</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">^</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 第一次还没写入</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 构造新的interface&#123;&#125;返回出去</span>data <span class="token operator">:=</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>xp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>xp<span class="token punctuation">.</span>typ <span class="token operator">=</span> typxp<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 写数据（如何保证数据完整性）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Value<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync/atomic: store of nil value into Value"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 绕过 Go 语言类型系统的检查，与任意的指针类型互相转换</span>vp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 旧值</span>xp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 新值</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 配合CompareAndSwap达到乐观锁的功效</span>typ <span class="token operator">:=</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 第一次写入</span><span class="token function">runtime_procPin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 禁止抢占</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">CompareAndSwapPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 没有抢到锁，说明已经有别的线程抢先完成赋值，重新进入循环</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token comment">// 首次赋值</span><span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>data<span class="token punctuation">,</span> xp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> xp<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 写入成功，解除占用状态</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">^</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 第一次写入还未完成，继续等待</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token comment">// 两次需要写入相同类型</span><span class="token keyword">if</span> typ <span class="token operator">!=</span> xp<span class="token punctuation">.</span>typ <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync/atomic: store of inconsistently typed value into Value"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>data<span class="token punctuation">,</span> xp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 禁止抢占，标记当前G在M上不会被抢占，并返回当前所在P的ID。</span><span class="token keyword">func</span> <span class="token function">runtime_procPin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 解除G的禁止抢占状态，之后G可被抢占。</span><span class="token keyword">func</span> <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://studygolang.com/pkgdoc">Go语言中文网</a></p><p><a href="https://blog.betacat.io/post/golang-atomic-value-exploration/">Go 语言标准库中 atomic.Value 的前世今生</a></p><p><a href="https://www.cnblogs.com/sunsky303/p/11820500.html">你不知道的Go unsafe.Pointer uintptr原理和玩法</a></p><p><a href="https://segmentfault.com/a/1190000021944703">理解Go 1.13中sync.Pool的设计与实现</a></p><p><a href="https://segmentfault.com/a/1190000017783070">Go Slice 最大容量大小是怎么来的</a></p><p><a href="https://juejin.cn/post/6844903662553137165">Golang 的 协程调度机制 与 GOMAXPROCS 性能调优</a></p><p><a href="https://www.kancloud.cn/digest/batu-go/153537">Golang同步：原子操作使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> atomic包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论-单数组实现双端队列</title>
      <link href="suan-fa/suan-fa-dao-lun-dan-shu-zu-shi-xian-shuang-duan-dui-lie/"/>
      <url>suan-fa/suan-fa-dao-lun-dan-shu-zu-shi-xian-shuang-duan-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。"><a href="#栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。" class="headerlink" title="栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。"></a>栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// 一个数组实现双端队列</span><span class="token keyword">const</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">type</span> Deque <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>leftHead  <span class="token builtin">int</span>rightHead <span class="token builtin">int</span>size      <span class="token builtin">int</span> <span class="token comment">// 记录现有元素数量</span>arr       <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">pre</span><span class="token punctuation">(</span>position <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span>position <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">LeftInsert</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">]</span> <span class="token operator">=</span> vald<span class="token punctuation">.</span>size<span class="token operator">++</span>d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">RightInsert</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">]</span> <span class="token operator">=</span> vald<span class="token punctuation">.</span>size<span class="token operator">++</span>d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">LeftDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>val <span class="token operator">:=</span> d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">]</span>d<span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">RightDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>val <span class="token operator">:=</span> d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">]</span>d<span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> deque <span class="token operator">=</span> Deque<span class="token punctuation">&#123;</span>leftHead<span class="token punctuation">:</span>  <span class="token number">0</span><span class="token punctuation">,</span>rightHead<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">:</span>       <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论-两个栈实现队列</title>
      <link href="suan-fa/suan-fa-dao-lun-liang-ge-zhan-shi-xian-dui-lie/"/>
      <url>suan-fa/suan-fa-dao-lun-liang-ge-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="用两个栈实现队列，并分析相关队列操作的运行时间。"><a href="#用两个栈实现队列，并分析相关队列操作的运行时间。" class="headerlink" title="用两个栈实现队列，并分析相关队列操作的运行时间。"></a>用两个栈实现队列，并分析相关队列操作的运行时间。</h3><ul><li>单栈push和pop的运行时间都为O(1)，所以需要考虑的就是两个栈之间切换所用时间。</li><li>最坏情况：在push和pop交替操作时，需要将一个栈中的数据转移到另一个栈中，转移所用时间为O(n)，n为当前栈中元素个数。</li><li>最好情况：用flag记录上一次是push还是pop，如果和当前操作一致，则直接操作对应的栈，时间复杂度为O(1)。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">const</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">type</span> StackDeque <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>pushStack <span class="token operator">*</span>StackpopStack  <span class="token operator">*</span>Stackflag      <span class="token builtin">bool</span> <span class="token comment">// true in push，false in pop</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StackDeque<span class="token punctuation">)</span> <span class="token function">exchange</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>to<span class="token punctuation">.</span><span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> from<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>to<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>flag<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StackDeque<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>flag <span class="token punctuation">&#123;</span> <span class="token comment">// 当前在pop栈</span>s<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>popStack<span class="token punctuation">,</span> s<span class="token punctuation">.</span>pushStack<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>pushStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StackDeque<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>flag <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pushStack<span class="token punctuation">,</span> s<span class="token punctuation">.</span>popStack<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>popStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------实现栈开始----------------</span><span class="token keyword">type</span> Stack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>arr  <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span>size <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>size <span class="token operator">==</span> maxSize <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> vals<span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>val <span class="token operator">:=</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------实现栈结束----------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论-两个队列实现栈</title>
      <link href="suan-fa/suan-fa-dao-lun-liang-ge-dui-lie-shi-xian-zhan/"/>
      <url>suan-fa/suan-fa-dao-lun-liang-ge-dui-lie-shi-xian-zhan/</url>
      
        <content type="html"><![CDATA[<h3 id="用两个队列实现栈，并分析相关栈操作的运行时间。"><a href="#用两个队列实现栈，并分析相关栈操作的运行时间。" class="headerlink" title="用两个队列实现栈，并分析相关栈操作的运行时间。"></a>用两个队列实现栈，并分析相关栈操作的运行时间。</h3><p>思路同：<a href="https://liyuxing.blog.csdn.net/article/details/111464812">两个栈实现队列</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> DequeStack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>pushDeque <span class="token operator">*</span>DequepopDeque <span class="token operator">*</span>Dequeflag <span class="token builtin">bool</span> <span class="token comment">// true in push, false in pop</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DequeStack<span class="token punctuation">)</span> <span class="token function">exchange</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>to<span class="token punctuation">.</span><span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> from<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>to<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token operator">!</span>d<span class="token punctuation">.</span>flag<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DequeStack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>d<span class="token punctuation">.</span>flag<span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>popDeque<span class="token punctuation">,</span> d<span class="token punctuation">.</span>pushDeque<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>pushDeque<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DequeStack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span>flag<span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>pushDeque<span class="token punctuation">,</span> d<span class="token punctuation">.</span>popDeque<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>popDeque<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 队列实现</span><span class="token keyword">type</span> Deque <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>arr  <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span>head <span class="token builtin">int</span>tail <span class="token builtin">int</span>size <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span>position <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> vald<span class="token punctuation">.</span>tail <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>tail<span class="token punctuation">)</span>d<span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>val <span class="token operator">:=</span> d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>head<span class="token punctuation">]</span>d<span class="token punctuation">.</span>head <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>head<span class="token punctuation">)</span>d<span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token number">0</span>d<span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token number">0</span>d<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论—一个数组中实现两个栈</title>
      <link href="suan-fa/suan-fa-dao-lun-yi-ge-shu-zu-zhong-shi-xian-liang-ge-zhan/"/>
      <url>suan-fa/suan-fa-dao-lun-yi-ge-shu-zu-zhong-shi-xian-liang-ge-zhan/</url>
      
        <content type="html"><![CDATA[<h3 id="如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。"><a href="#如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。" class="headerlink" title="如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。"></a>如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。</h3><ul><li>要求push和pop操作的运行时间为O(1)。</li></ul><h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><ul><li>两个栈分别从数组的两端开始，向中间push元素，直到两个指针相遇。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">const</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">const</span> <span class="token punctuation">(</span>sLeft stackType <span class="token operator">=</span> <span class="token boolean">iota</span>sRight<span class="token punctuation">)</span><span class="token keyword">type</span> stackType <span class="token builtin">int</span><span class="token keyword">type</span> Stack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>arr   <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span>left  <span class="token builtin">int</span>right <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> stack <span class="token operator">=</span> Stack<span class="token punctuation">&#123;</span>arr<span class="token punctuation">:</span>   <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>left<span class="token punctuation">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">:</span> maxSize<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">,</span> stackType stackType<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> stackType <span class="token operator">==</span> sLeft <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> vals<span class="token punctuation">.</span>left<span class="token operator">++</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> vals<span class="token punctuation">.</span>right<span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span>stackType stackType<span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">,</span> exist <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> stackType <span class="token operator">==</span> sLeft <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>left <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>val <span class="token operator">=</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>left<span class="token punctuation">]</span>exist <span class="token operator">=</span> <span class="token boolean">true</span>s<span class="token punctuation">.</span>left<span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>right <span class="token operator">&lt;</span> maxSize <span class="token punctuation">&#123;</span>val <span class="token operator">=</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>right<span class="token punctuation">]</span>exist <span class="token operator">=</span> <span class="token boolean">true</span>s<span class="token punctuation">.</span>right<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 两栈都为空</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>right <span class="token operator">==</span> maxSize <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>right<span class="token operator">-</span>s<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-exists有可能超出你的预期</title>
      <link href="hou-duan-kai-fa/redis-exists-you-ke-neng-chao-chu-ni-de-yu-qi/"/>
      <url>hou-duan-kai-fa/redis-exists-you-ke-neng-chao-chu-ni-de-yu-qi/</url>
      
        <content type="html"><![CDATA[<h4 id="Redis的Exists有可能超出你的预期"><a href="#Redis的Exists有可能超出你的预期" class="headerlink" title="Redis的Exists有可能超出你的预期"></a>Redis的Exists有可能超出你的预期</h4><ul><li>理论上每个key都应该有过期时间（当然也可以是一万年），通常情况下用exists来判断一个key是否存在都没什么问题（一般过期时间都比较长）。但如果过期时间需要精确到秒或十秒及，那么exists就会出乎你的意料。</li></ul><h4 id="Redis过期键删除策略"><a href="#Redis过期键删除策略" class="headerlink" title="Redis过期键删除策略"></a>Redis过期键删除策略</h4><ul><li>Redis key过期的方式有三种：</li></ul><ol><li>被动删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key<blockquote><p>对这个key执行exists不会触发惰性删除</p></blockquote></li><li>主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批已过期的key</li><li>当前已用内存超过maxmemory限定时，触发主动清理策略<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">get_chatroom_user_tips</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>chatroom_redis<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># 间隔时间</span>        _interval <span class="token operator">=</span> <span class="token number">30</span>        <span class="token keyword">if</span> group_ids<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> time<span class="token operator">=</span>_interval<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> group_ids<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="上面代码存在的问题及应对方式"><a href="#上面代码存在的问题及应对方式" class="headerlink" title="上面代码存在的问题及应对方式"></a>上面代码存在的问题及应对方式</h6>问题</li></ol><ul><li>redis Key在30s之后过期，但是执行exists命令的返回值可能还为True。</li><li>但是如果执行ttl命令是发现返回值为0。</li></ul><p>解决</p><ul><li>用ttl代替exists<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">get_chatroom_user_tips</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>chatroom_redis<span class="token punctuation">.</span>ttl<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># 间隔时间</span>        _interval <span class="token operator">=</span> <span class="token number">30</span>        <span class="token keyword">if</span> group_ids<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> time<span class="token operator">=</span>_interval<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> group_ids<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-自增列AUTO_INCREMENT</title>
      <link href="shu-ju-ku/mysql-zi-zeng-lie-auto-increment/"/>
      <url>shu-ju-ku/mysql-zi-zeng-lie-auto-increment/</url>
      
        <content type="html"><![CDATA[<h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><h6 id="两种情况"><a href="#两种情况" class="headerlink" title="两种情况"></a>两种情况</h6><p>1、在载入语句执行前，已经<strong>不确定</strong>要插入多少条记录。</p><ul><li>在执行插入语句时在==表级别==加一个==auto-inc锁==，然后为每条待插入记录的auto-increment修饰的列分配递增的值，语句执行结束后，再把auto-inc锁释放掉。一个事务再持有auto-inc锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。<blockquote><p>AUTO-INC锁的作用范围只是单个插入语句，插入语句执行完成后，这个锁就被释放了，跟我们之前介绍的锁在事务结束时释放是不一样的。</p></blockquote></li></ul><p>2、插入语句执行前就<strong>确定</strong>要插入多少条记录。</p><ul><li>采用一个轻量级的锁，在为插入语句生成auto-increment修饰的列的值时获取一下这个轻量级锁，生成需要用到的auto-increment列的值后，==立马释放==，不需要等语句执行。<blockquote><p>InnoDB中提供系统变量 innodb_autoinc_lock_mode 控制用以上哪种方式进行自增的赋值。</p><ol><li>innodb_autoinc_lock_mode=0 一律采用auto-inc锁。</li><li>innodb_autoinc_lock_mode=2 一律采用轻量级锁。</li><li>innodb_autoinc_lock_mode=1 混着来，插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</li></ol><p>当一律采用轻量级锁时，可能会造成不同事物中插入语句生成的值时交叉的，在有主从复制的场景中是不安全的。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-两次redis操作用不用pipeline</title>
      <link href="zhong-jian-jian/redis-liang-ci-redis-cao-zuo-yong-bu-yong-pipeline/"/>
      <url>zhong-jian-jian/redis-liang-ci-redis-cao-zuo-yong-bu-yong-pipeline/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么需要-pipeline-？"><a href="#为什么需要-pipeline-？" class="headerlink" title="为什么需要 pipeline ？"></a>为什么需要 pipeline ？</h4><ul><li>正常情况下，客户端发送一个命令，等待 Redis 应答；Redis 接收到命令，处理后应答。请求发出到响应的时间叫做往返时间，即 RTT（Round Time Trip）。在这种情况下，如果需要执行大量的命令，就需要等待上一条命令应答后再执行。这中间不仅仅多了许多次 RTT，而且还频繁的调用系统 IO，发送网络请求。</li><li>pipeline 允许客户端可以一次发送多条命令，而不等待上一条命令执行的结果。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVlY5MTY?x-oss-process=image/format,png" alt="在这里插入图片描述"><h4 id="两次redis操作，用pipeline会不会好一点"><a href="#两次redis操作，用pipeline会不会好一点" class="headerlink" title="两次redis操作，用pipeline会不会好一点"></a>两次redis操作，用pipeline会不会好一点</h4></li><li>执行10万次set<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">import</span> time<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    my_redis <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">.</span>from_url<span class="token punctuation">(</span><span class="token string">"redis://:@127.0.0.1/0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socket_timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 不用pipeline</span>    start_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key1 <span class="token operator">=</span> <span class="token string">"test1_%s"</span> <span class="token operator">%</span> i        my_redis<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        my_redis<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>    end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> end_time <span class="token operator">-</span> start_time<span class="token comment"># 使用pipeline</span>    start_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>    pipe <span class="token operator">=</span> my_redis<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key1 <span class="token operator">=</span> <span class="token string">"test2_%s"</span> <span class="token operator">%</span> i        pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>    pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> end_time <span class="token operator">-</span> start_time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行结果<blockquote><p>16651、14477、15041 # 不用pipeline<br>4517、4158、4325  # 使用pipeline</p></blockquote></li><li>初步结论<blockquote><p>即使只有两次redis操作，pipeline的效果也很突出。</p></blockquote></li></ul><h4 id="两次已经表现优异了，次数多点怎么样？"><a href="#两次已经表现优异了，次数多点怎么样？" class="headerlink" title="两次已经表现优异了，次数多点怎么样？"></a>两次已经表现优异了，次数多点怎么样？</h4><ul><li><p>执行100万次sadd 操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">start_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key1 <span class="token operator">=</span> <span class="token string">"test1_%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        my_redis<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    my_redis<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span> end_time <span class="token operator">-</span> start_timestart_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>pipe <span class="token operator">=</span> my_redis<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key1 <span class="token operator">=</span> <span class="token string">"test2_%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    pipe<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span> end_time <span class="token operator">-</span> start_time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行结果</p><blockquote><p>83849<br>26313</p></blockquote></li><li><p>初步结论</p><blockquote><p>pipeline居家必备</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-索引与算法</title>
      <link href="shu-ju-ku/mysql-suo-yin-yu-suan-fa/"/>
      <url>shu-ju-ku/mysql-suo-yin-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="B-树索引的管理"><a href="#B-树索引的管理" class="headerlink" title="B+树索引的管理"></a>B+树索引的管理</h3><ul><li><p>创建索引</p><p>对于索引的添加或删除，MySQL先创建一张临时表，把数据导入临时表，删除原表，然后把临时表重命名为原来的表。因此大表创建和删除索引的时间非常长。</p><p>快速索引创建法：对于非聚集索引的创建，InnoDB会对表加S锁，创建过程中只能读，不能写。</p></li></ul><h3 id="B-树索引的使用"><a href="#B-树索引的使用" class="headerlink" title="B+树索引的使用"></a>B+树索引的使用</h3><ul><li><p>顺序读</p><p>顺序的读取磁盘上的块</p></li><li><p>随机读</p><p>访问的块不连续，需要磁头不断移动</p></li><li><p>预读取</p><p>通过一次I/O请求多个页预读到缓冲池中，并且估计预读的多个页马上会被访问。传统I/O请求每次只读取一个页，在传统机械硬盘较低的IOPS下，预读计数可以大大提高读取的性能。</p><blockquote><ol><li><p>随机预读</p><p>当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。</p><p>InnoDB Plugin 1.0.4开始，随机预读被取消。</p></li><li><p>线性预读</p><p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。</p><p>N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p></li></ol></blockquote></li></ul><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><ul><li><p>InnoDB中的哈希算法</p><p>InnoDB使用哈希算法对字典进行查找，采用链表方式解决冲突、哈希函数采用除法散列方式（ ==h(k)=k mod m== ）。</p><p>缓冲池中的Page页都有一个chain指针，指向相同哈希函数值的页。</p><p>除法散列，m的取值为略大于2倍的缓冲池页数量的质素。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-碎片整理遇到的那些事</title>
      <link href="shu-ju-ku/mysql-sui-pian-zheng-li-yu-dao-de-na-xie-shi/"/>
      <url>shu-ju-ku/mysql-sui-pian-zheng-li-yu-dao-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要碎片整理"><a href="#为什么要碎片整理" class="headerlink" title="为什么要碎片整理"></a>为什么要碎片整理</h3><ul><li>MySQL中使用varchar、text、blob等可变长度的文本数据类型之后需要做额外的MySQL数据表碎片整理。</li><li>当MySQL从表中删除一行内容，该段空间就会被留空。如果有大量的删除操作，会使留空空间变得比存储列表内容所使用的空间更大。</li><li>MySQL进行数据扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。</li></ul><h3 id="碎片查看及整理"><a href="#碎片查看及整理" class="headerlink" title="碎片查看及整理"></a>碎片查看及整理</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name<span class="token punctuation">,</span><span class="token keyword">engine</span><span class="token punctuation">,</span>table_rows<span class="token punctuation">,</span>data_length<span class="token punctuation">,</span>index_length<span class="token punctuation">,</span>DATA_FREE <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> TABLE_NAME<span class="token operator">=</span><span class="token string">'chat_msgs'</span><span class="token punctuation">;</span><span class="token keyword">optimize</span> <span class="token keyword">table</span> chat_msgs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200420224821232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420224845211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="information-schema-tables"><a href="#information-schema-tables" class="headerlink" title="information_schema.tables"></a>information_schema.tables</h3><ul><li>show create table information_schema.tables;</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">TABLES</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>TABLE_CATALOG<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>TABLE_SCHEMA<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>TABLE_NAME<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>TABLE_TYPE<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">ENGINE</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>VERSION<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ROW_FORMAT<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>TABLE_ROWS<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>AVG_ROW_LENGTH<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>DATA_LENGTH<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>MAX_DATA_LENGTH<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>INDEX_LENGTH<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>DATA_FREE<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>CREATE_TIME<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>UPDATE_TIME<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>CHECK_TIME<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>TABLE_COLLATION<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>CHECKSUM<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>CREATE_OPTIONS<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>TABLE_COMMENT<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MEMORY <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>desc information_schema.tables; 存储了数据表的元数据信息</li></ul><table><thead><tr><th align="left">Field</th><th align="left">Type</th><th align="left">Null</th><th align="left">Key</th><th align="left">Default</th><th align="left">Extra</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">TABLE_CATALOG</td><td align="left">varchar(512)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TABLE_SCHEMA</td><td align="left">varchar(64)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">DB名</td></tr><tr><td align="left">TABLE_NAME</td><td align="left">varchar(64)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">表名</td></tr><tr><td align="left">TABLE_TYPE</td><td align="left">varchar(64)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">ENGINE</td><td align="left">varchar(64)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">VERSION</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">ROW_FORMAT</td><td align="left">varchar(10)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">是否压缩</td></tr><tr><td align="left">TABLE_ROWS</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">表的粗略行统计</td></tr><tr><td align="left">AVG_ROW_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">DATA_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">表的大小（单位字节）</td></tr><tr><td align="left">MAX_DATA_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">INDEX_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">索引大小</td></tr><tr><td align="left">DATA_FREE</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">碎片大小</td></tr><tr><td align="left">AUTO_INCREMENT</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CREATE_TIME</td><td align="left">datetime</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">UPDATE_TIME</td><td align="left">datetime</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CHECK_TIME</td><td align="left">datetime</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TABLE_COLLATION</td><td align="left">varchar(32)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CHECKSUM</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CREATE_OPTIONS</td><td align="left">varchar(255)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TABLE_COMMENT</td><td align="left">varchar(2048)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li>查看所有db</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> TABLE_SCHEMA <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看表大小</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>DATA_LENGTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>INDEX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> size <span class="token keyword">from</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'mysql'</span> <span class="token operator">and</span> table_name <span class="token operator">like</span> <span class="token string">'time_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看数据库大小</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>DATA_LENGTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>INDEX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> size <span class="token keyword">from</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'mysql'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3><ul><li>官方建议碎片整理每周或每月一次即可。</li><li>optimize table 只对MyISAM、BDB、InnoDB表起作用，尤其MyISAM最为明显。并不是所有表都需要碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。</li><li>optimize table 运行过程中会锁定表。</li><li>默认情况下，直接对InnoDB引擎的数据表使用optimize table可能会显示[Table dose not support optimize,doing recreate + analyze instead] 的提示信息。这时候可以用mysqld –skip-new 或者 mysqld –safe-mode 命令来重启MySQL，以便让其他引擎支持optimize table。</li><li>对于mysql和Infobright等数据库，information_schema数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-文件</title>
      <link href="shu-ju-ku/mysql-wen-jian/"/>
      <url>shu-ju-ku/mysql-wen-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="参数文件"><a href="#参数文件" class="headerlink" title="参数文件"></a>参数文件</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql --help | grep my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有参数文件，取源代码中的默认值。</p><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><ul><li><p>错误日志</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看文件位置show variables like &#39;log_error&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>二进制日志</p><p>事务提交前进行记录。</p><p>记录对数据库执行更改的所有操作，主要作用是恢复和复制。</p><p>二进制日志文件在默认情况下没有启动，启动后会使性能下降1%。</p><ul><li><p>binlog_format（可以动态更改）</p><ol><li><p>statement 二进制日志文件记录逻辑SQL语句。</p></li><li><p>row 记录表的行更改情况。</p><p>生成的日志文件更大，网络开销也增加</p></li><li><p>mixed 默认statement，某些情况下用row。</p><blockquote><p>使用NDB引擎</p><p>使用UUID，ROW_COUNT()等不确定函数</p><p>使用insert delay</p><p>使用用户定义函数</p><p>使用临时表</p></blockquote></li></ol></li></ul></li><li><p>慢查询日志</p></li><li><p>查询日志</p></li></ul><h4 id="socket文件"><a href="#socket文件" class="headerlink" title="socket文件"></a>socket文件</h4><p>​    用Unix域套接字方式进行连接时需要的文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;socket&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="pid文件"><a href="#pid文件" class="headerlink" title="pid文件"></a>pid文件</h4><p>​    MySQL实例的进程ID文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;pid_file&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="表结构文件"><a href="#表结构文件" class="headerlink" title="表结构文件"></a>表结构文件</h4><p>​    MySQL的数据存储都是按照表的，每个表都会有与之对应的文件。不论使用何种引擎，MySQL都有一个以frm为后缀的文件，记录表的结构定义。</p><h4 id="存储引擎文件"><a href="#存储引擎文件" class="headerlink" title="存储引擎文件"></a>存储引擎文件</h4><ul><li><p>表空间文件</p><p>MySQL存储的数据按表空间进行存放。</p><ol><li><p>默认表空间</p><p>默认情况下，会有一个默认初始化大小10MB、名为ibdata1的文件（默认表空间文件），通过innodb_data_file设置。</p></li><li><p>单独表空间</p><p>通过设置innodb_file_per_table可以将每个基于InnoDB存储引擎的表单独产生一个表空间，文件名为.idb。</p><p>单独表空间文件仅存储该表的数据、索引和插入缓冲，其余信息还是存放在默认表空间中。</p></li></ol></li></ul><p><img src="https://img-blog.csdnimg.cn/20200504133622515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p>重做日志文件</p><p>事务进行中，不断有重做日志写入文件，记录关于每个页更改的物理情况。</p><p>默认情况下会有两个文件，ib_ligfile0和ib_ligfile1（循环使用），记录了InnoDB的事务日志。</p><p>重做日志文件的只要作用是保证数据的完整性。如主机断电导致实例失败，InnoDB会使用日志回复到断电前的状态。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200504133647661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-存储引擎和体系结构</title>
      <link href="shu-ju-ku/mysql-cun-chu-yin-qing-he-ti-xi-jie-gou/"/>
      <url>shu-ju-ku/mysql-cun-chu-yin-qing-he-ti-xi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL有哪些常见的引擎，说说他们的区别？"><a href="#MySQL有哪些常见的引擎，说说他们的区别？" class="headerlink" title="MySQL有哪些常见的引擎，说说他们的区别？"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engines; #查看支持的引擎<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MyISAM：非事务处理存储引擎</p><p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p><p>在线分析处理OLAP。</p><p>全文索引。</p></li><li><p>InnoDB：具备外键功能的存储引擎、行锁</p><p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p><p>在线事务处理OLTP。</p></li><li><p>Mermory：基于内存</p><p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p><p>默认hash索引。</p></li><li><p>Archive：数据存档，数据插入后不能修改，只支持insert和select</p><p>针对高写入压缩做了优化的简单引擎，压缩存储1：10。</p></li><li><p>Maria</p><p>MyISAM后续版本</p><p>缓存数据和索引文件，行锁设计，MVCC，支持事务，更好的BLOB字符类型处理性能</p></li><li><p>NDB</p><p>集群存储引擎</p><p>数据全放内存（可以将非索引数据放磁盘）</p></li><li><p>Merge、CSV、Sphinx、Infobright</p></li></ul><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>b+树索引</td><td>yes</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>MVCC</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>事务</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>存储限制</td><td>64TB</td><td>256TB</td><td>RAM</td><td>None</td></tr><tr><td>索引缓存</td><td>yes</td><td>yes</td><td>本身就是缓存</td><td>No</td></tr><tr><td>外键</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>锁粒度</td><td>row</td><td>table</td><td>table</td><td>row</td></tr><tr><td>全文索引</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>数据缓存</td><td>yes</td><td>no</td><td>本身就是缓存</td><td>no</td></tr></tbody></table><h3 id="数据库和实例的区别"><a href="#数据库和实例的区别" class="headerlink" title="数据库和实例的区别"></a>数据库和实例的区别</h3><ul><li>数据库：物理操作系统文件或其他形式文件类型的集合。</li><li>数据库实例：有数据库后台进程/线程以及一个共享内存区组成。</li></ul><h3 id="查看MySQL从哪里读取的配置文件"><a href="#查看MySQL从哪里读取的配置文件" class="headerlink" title="查看MySQL从哪里读取的配置文件"></a>查看MySQL从哪里读取的配置文件</h3><p>从上到下找my.cnf文件，最终值以最后一个文件中的参数为准。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  ~ mysql --help | grep my.cnf                      order of preference, my.cnf, $MYSQL_TCP_PORT,&#x2F;etc&#x2F;my.cnf &#x2F;etc&#x2F;mysql&#x2F;my.cnf &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql-client&#x2F;8.0.18&#x2F;etc&#x2F;my.cnf ~&#x2F;.my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h3><p><img src="https://img-blog.csdnimg.cn/20200504105206146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>连接池</li><li>管理服务和工具</li><li>SQL接口</li><li>查询分析器</li><li>优化器</li><li>缓冲</li><li>存储引擎</li><li>物理文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-事务</title>
      <link href="shu-ju-ku/mysql-shi-wu/"/>
      <url>shu-ju-ku/mysql-shi-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库引入事务的主要目的"><a href="#数据库引入事务的主要目的" class="headerlink" title="数据库引入事务的主要目的"></a>数据库引入事务的主要目的</h3><p>事务会把数据库从一种状态转换为另一种一致的状态，在提交工作时，可以确保要么所有修改都已经保存，要么都不保存。</p><h3 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h3><ul><li><p>原子性 atomicity</p><p>要么都成功，要么都失败。</p></li><li><p>一致性 consistency</p></li><li><p>事务执行前后，数据库的完整性约束没有破坏。（你的10张银行卡里共有100块，无论这10张银行卡之间怎么转账，也只有100块）</p></li><li><p>隔离性 isolation</p><p>一个事务的影响在事务提交前，其他事务都不可见。</p></li><li><p>持久性 durability</p><p>事务一旦提交，就是永久性的。</p></li></ul><h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><h4 id="redo"><a href="#redo" class="headerlink" title="redo"></a>redo</h4><p>事务通过重做（redo)日志文件和日志缓冲（InnoDB Log Buffer）实现。在写数据前，需要先写日志。这种实现方式称为预写日志方式（Write-Ahead Logging，WAL）</p><ul><li><p>当开始一个事务时，会记录该事务的一个LSN（Log Sequence Number，日志序列号）；</p></li><li><p>当事务执行时，会往InnoDB存储引擎的日志缓冲里插入事务日志；</p></li><li><p>事务提交是，必须将InnoDB存储引擎的日志缓冲写入磁盘。</p><p>通过预写日志的方式保证事务的完整性，会造成吸盘上存储的数据页和内存缓冲池中的页是不同步的。可以通过<code>show engine innodb status；</code>查看当前磁盘和日志的差距。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status\G;---LOG---Log sequence number 77292702 # 当前LSNLog flushed up to   77292702 # 刷新到重做日志文件的LSNPages flushed up to 77292702Last checkpoint at  77292702 # 刷新到磁盘的LSN0 pending log writes, 0 pending chkp writes8 log i&#x2F;o&#39;s done, 0.00 log i&#x2F;o&#39;s&#x2F;second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h3><p>事务需要回滚，需要undo。undo与redo正好相反，对于数据库进行修改是，数据库不但会产生redo，还会产生一定量的undo。</p><p>redo存放在重做日志中，undo存放在数据库内部的一个特殊段（segment）中，称为undo段（undo segment），undue段位于共享表空间中。</p><p>undo用于将数据库逻辑的恢复到原来的样子，数据结构本身在回滚前后可能不是相同的。</p><h3 id="事务常用控制语句"><a href="#事务常用控制语句" class="headerlink" title="事务常用控制语句"></a>事务常用控制语句</h3><ul><li>begin</li><li>commit</li><li>rollback</li></ul><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul><li><p>读未提交 read uncommitted</p><p>浏览访问</p></li><li><p>读已提交 read committed</p><p>游标稳定，生产上常用隔离级别</p></li><li><p>可重复度 repeatable read</p><p>InnoDB默认隔离级别，InnoDB在该级别下使用<code>next-key</code>锁的算法避免幻读的产生。</p></li><li><p>序列化 serializable</p><p>InnoDB会对每个select操作自动添加<code>lock in share mode</code>，即共享锁。因为InnoDB在rr的隔离级别就可以避免幻读，所以serializable隔离级别主要用于分布式事务。</p></li></ul><h4 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@tx_isolation\G;select @@global.tx_isolation\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><p>分布式事务由一个或多个资源管理器、一个事务管理器和一个应用程序组成。</p><p>分布式事务使用两段式提交<code>two-phase commit</code>的方式。在第一个阶段，所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好了。第二阶段，事务管理器告诉所有资源管理器执行rollback还是commit。如果任何节点显示不能提交，则所有节点都被告知需要回滚。</p><ul><li><p>资源管理器</p><p>提供访问事务资源的方法。通常一个数据库就是一个资源管理器。</p></li><li><p>事务管理器</p><p>协调参与全局事务中的各个事务。需要合参与全局事务中的所有资源管理器进行通信。</p></li><li><p>应用程序</p><p>定义事务的边界，置顶全局事务中的操作。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-备份与恢复</title>
      <link href="shu-ju-ku/mysql-bei-fen-yu-hui-fu/"/>
      <url>shu-ju-ku/mysql-bei-fen-yu-hui-fu/</url>
      
        <content type="html"><![CDATA[<h3 id="备份与恢复概述"><a href="#备份与恢复概述" class="headerlink" title="备份与恢复概述"></a>备份与恢复概述</h3><h4 id="按备份方法分："><a href="#按备份方法分：" class="headerlink" title="按备份方法分："></a>按备份方法分：</h4><ul><li><p>hot backup 热备、在线备份</p><p>数据库运行中直接备份，对正在运行的数据库没有任何影响。</p></li><li><p>cold backup 冷备、离线备份</p><p>最为简单，一般只需要拷贝相关的数据库物理文件即可。</p><p>优点：备份简单、恢复简单、恢复速度快、备份文件易于在不同操作系统和MySQL版本上恢复</p><p>缺点：备份文件大、不总是可以轻易跨平台。如大小写敏感、浮点数格式等。</p></li><li><p>warm backup 温备</p><p>数据库运行时进行备份，但是会对当前数据库的操作有影响，如加一个全局锁以保证数据的一致性。</p></li></ul><h4 id="按备份后文件内容分："><a href="#按备份后文件内容分：" class="headerlink" title="按备份后文件内容分："></a>按备份后文件内容分：</h4><ul><li><p>逻辑备份</p><p>备份后的文件内容时可读的，通常是文本文件，内容通常是SQL语句，或表内的数据数据，好处是可以看到导出文件的内容。适用于数据库的升级、迁移等，恢复所需要的时间往往较长。</p></li><li><p>裸文件备份</p><p>拷贝数据库的物理文件，数据库既可以处于运行状态，也可以处于停止状态。恢复时间短。</p></li></ul><h4 id="按备份数据的内容分："><a href="#按备份数据的内容分：" class="headerlink" title="按备份数据的内容分："></a>按备份数据的内容分：</h4><ul><li><p>完全备份</p><p>对数据库进行完整的备份。</p></li><li><p>增量备份</p><p>在上次完全备份的基础上，对更新的数据进行备份，官方并未提供增量备份的方法。</p></li><li><p>日志备份</p><p>主要是二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。</p></li></ul><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="复制的工作原理"><a href="#复制的工作原理" class="headerlink" title="复制的工作原理"></a>复制的工作原理</h4><p>异步同步，并非完全的主从同步。</p><ol><li>主服务器把数据更新记录到二进制日志中。</li><li>从服务器把主服务器的二进制日志拷贝到自己的中继日志（relay log)中。</li><li>从服务器重做中继日志中的事件，把更新应用到自己的数据库上。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200505105757299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="复制不仅限于备份"><a href="#复制不仅限于备份" class="headerlink" title="复制不仅限于备份"></a>复制不仅限于备份</h4><ol><li><p>数据分布</p><p>不同数据中心之间实现数据拷贝。</p></li><li><p>读取的负载均衡</p><p>读写分离。</p></li><li><p>数据库备份</p><p>从服务器不是备份，不能完全代替备份。</p></li><li><p>高可用性和故障转移</p><p>减少故障的停机时间和恢复时间。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-主从同步原理</title>
      <link href="shu-ju-ku/mysql-zhu-cong-tong-bu-yuan-li/"/>
      <url>shu-ju-ku/mysql-zhu-cong-tong-bu-yuan-li/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="Replication-线程"><a href="#Replication-线程" class="headerlink" title="Replication 线程"></a>Replication 线程</h4></li></ul><ol><li>master与slave之间实现整个复制过程主要由三个线程完成：两个（SQL线程和IO线程）在slave端，一个（IO线程）在master端。</li><li>要实现MySQL的replication，必须打开master端的Binary Log(mysql-bin.xxx)功能。</li><li>整个复制过程实际上就是slave从master端获取日志然后在自己身上<strong>顺序执行</strong>日志中记录的各种操作。</li></ol><ul><li><h4 id="复制基本过程（异步的）"><a href="#复制基本过程（异步的）" class="headerlink" title="复制基本过程（异步的）"></a>复制基本过程（异步的）</h4></li></ul><ol><li>slave上的IO线程连接master，请求从指定日志文件的指定位置（或者从最开始）之后的日志内容。 </li><li>master收到请求，负责复制的IO根据请求信息读取指定的日志，并返回（日志文件的地址也返回，方便下次直接根据地址请求）</li><li>slave的IO收到信息后，将日志内容依次写入到slave端的relay log文件的最末端，存master日志文件的地址。</li><li>slave的SQL线程检测到Relay Log中新加内容后，马上解析该Log文件的内容（Query语句），从而能保证两端的数据是一样的。</li></ol><ul><li><h4 id="MySQL半同步模式"><a href="#MySQL半同步模式" class="headerlink" title="MySQL半同步模式"></a>MySQL半同步模式</h4></li></ul><ol><li>在这种模式下：master会等到binlog<strong>成功传送并写入至少一个slave的relay log之后才会提交</strong>，否则一直等待，直到timeout（默认10s）。当出现timeout的时候，master会自动切换半同步为异步，<strong>直到至少有一个slave成功收到并发送Acknowledge，master会再切换回半同步模式</strong>。结合这个新功能，我们可以做到，在允许损失一定的事务吞吐量的前提下来保证同步数据的绝对安全，因为当你设置timeout为一个足够大的值的情况下，任何提交的数据都会安全抵达slave。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-Explain字段含义</title>
      <link href="shu-ju-ku/mysql-explain-zi-duan-han-yi/"/>
      <url>shu-ju-ku/mysql-explain-zi-duan-han-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-explain用法和结果的含义"><a href="#mysql-explain用法和结果的含义" class="headerlink" title="mysql explain用法和结果的含义"></a><a href="https://www.cnblogs.com/yycc/p/7338894.html">mysql explain用法和结果的含义</a></h1><h3 id="explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。"><a href="#explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。" class="headerlink" title="explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。"></a>explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。</h3><blockquote><p>explain 数据表 或 desc 数据表</p><p>显示数据表各字段含义</p></blockquote><blockquote><p>explain sql 或desc sql</p><p>显示sql执行效率</p></blockquote><h3 id="explain列解释"><a href="#explain列解释" class="headerlink" title="explain列解释"></a>explain列解释</h3><ol><li><p>==table== 输出的行所引用的表</p></li><li><p>==select_type== select类型</p><blockquote><ul><li><strong>SIMPLE</strong>:简单SELECT(不使用UNION或子查询)</li><li><strong>PRIMARY</strong>:最外面的SELECT</li><li><strong>UNION</strong>:UNION中的第二个或后面的SELECT语句</li><li><strong>DEPENDENT UNION</strong>:UNION中的第二个或后面的SELECT语句,取决于外面的查询</li><li><strong>UNION RESULT</strong>:UNION 的结果</li><li><strong>SUBQUERY</strong>:子查询中的第一个SELECT</li><li><strong>DEPENDENT SUBQUERY</strong>:子查询中的第一个SELECT,取决于外面的查询</li><li><strong>DERIVED</strong>:导出表的SELECT(FROM子句的子查询)</li></ul></blockquote></li><li><p>==type== 这是重要的列，显示连接使用了何种类型。</p><blockquote><p>结果值从好到坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><ul><li><strong>system</strong>:表仅有一行(=系统表)。这是const联接类型的一个特例。</li><li><strong>const</strong>:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!</li><li><strong>eq_ref</strong>:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。</li><li><strong>ref</strong>:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。</li><li><strong>ref_or_null</strong>:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。</li><li><strong>index_merge</strong>:该联接类型表示使用了索引合并优化方法。</li><li><strong>unique_subquery</strong>:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</li><li><strong>index_subquery</strong>:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</li><li><strong>range</strong>:只检索给定范围的行,使用一个索引来选择行。</li><li><strong>index</strong>:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li><li><strong>ALL</strong>:对于每个来自于先前的表的行组合,进行完整的表扫描。</li></ul></blockquote></li><li><p>==possible_keys== 指出MySQL能使用哪个索引在该表中找到行。</p></li><li><p>==key== 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。</p><blockquote><p>可以在SELECT语句中使用USE INDEX（indexname）、force index(indexname) 来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p></blockquote></li><li><p>==key_len== 使用的索引的长度。在不损失精确性的情况下，长度越短越好。如果键是NULL,则长度为NULL。</p></li><li><p>==ref== 显示使用哪个列或常数与key一起从表中选择行。</p></li><li><p>==rows== MYSQL认为必须检查的用来返回请求数据的行数。</p></li><li><p>==extra== 关于MYSQL如何解析查询的额外信息。</p><blockquote><p>坏的例子是<strong>Using temporary</strong>和<strong>Using filesort</strong>，意思MYSQL根本不能使用索引，结果是检索会很慢。</p><ul><li>distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了。</li><li>not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。</li><li>range checked for each Record（index map:#）:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。这是使用索引的最慢的连接之一。</li><li><strong>using filesort</strong>: 看到这个的时候，查询就需要优化了。<strong>MYSQL需要进行额外的步骤来发现如何对返回的行排序</strong>。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</li><li>using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</li><li>using temporary 看到这个的时候，查询需要优化了。为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。</li><li> where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）</li><li> system 表只有一行：system表。这是const连接类型的特殊情况。</li><li> const 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。</li><li>eq_ref 在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。</li><li>ref 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。</li><li>range 这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况。</li><li>index 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。</li><li>ALL 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。</li></ul></blockquote></li><li><p>==filtered== 显示了通过条件过滤出的行数的百分比估计值。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-InnoDB存储引擎</title>
      <link href="shu-ju-ku/mysql-innodb-cun-chu-yin-qing/"/>
      <url>shu-ju-ku/mysql-innodb-cun-chu-yin-qing/</url>
      
        <content type="html"><![CDATA[<h3 id="InnoDB引擎的4大特性"><a href="#InnoDB引擎的4大特性" class="headerlink" title="InnoDB引擎的4大特性"></a>InnoDB引擎的4大特性</h3><ol><li><p>插入缓存（物理页的一个组成部分）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status\G;INSERT BUFFER AND ADAPTIVE HASH INDEX # 插入缓冲信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于非聚集索引的插入或更新操作，不是每次直接插入索引页。而是先判断插入的非聚集索引页是否在缓冲池中。如果在，则直接插入，如果不在，先放入插入缓冲区，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作。</p><blockquote><p>那什么时候进行合并呢？</p><ul><li>非聚集索引页被读取到缓冲池中。select先检查insert buffer是否有非聚集索引页的存在，如果有则合并。</li><li>非聚集索引页没有可用空间。空间小于1/32页的大小，则进行合并。</li><li>master thread每秒和每10秒的合并操作。</li></ul></blockquote><p>这样通常能将多个插入合并到一个操作中，目的还是为了减少随机IO带来性能损耗。</p><p>使用需要满足两个条件</p><ul><li>索引是非聚集索引</li><li>索引不是唯一索引的</li></ul></li><li><p>两次写 double write</p><p>二次写缓存位于系统表空间，用来缓存从buffer poll中flush之后，写入数据文件之前的数据。数据页到double write以一次大的连续块的方式写入，需要的IO消耗小于写入数据文件的消耗。</p><blockquote><p>double write的组成：</p><ul><li><p>内存中double write buffer，大小为2M。</p></li><li><p>物理磁盘上共享表空间中连续的128个页，即两个区，大小为2M。</p></li></ul></blockquote><p>对缓冲池中的脏页进行刷新时，不是直接写磁盘，而是将脏页先复制到内存中的double write buffer，之后通过double write分两次，每次1M顺序的写入共享表空间的物理磁盘上。因为double write页是连续的，顺序写的开销很小。在完成double write页的写入后，再将double write buffer 中的页写入各个表空间文件中。这时的写入是离散的，如果在写入过程中出现崩溃，可以使用共享表空间的double write页进行恢复。</p></li><li><p>自适应哈希索引</p><p>InnoDB会监控对表上索引的查找，如果建立哈希索引可以带来速度的提升，则建立哈希索引。自适应哈希索引通过缓冲池的B+树构造，因此建立速度很快。</p><p>哈希索引会根据访问的频率和模式为==某些页建==立哈希索引，而不是整个表。</p><p>自适应哈希索引占用InnoDB buffer poll的空间。</p></li><li><p>预读</p><ul><li><p>随机预读（已废弃）</p><p>当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。InnoDB Plugin 1.0.4开始，随机预读被取消。</p></li><li><p>线性预读</p><p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p></li></ul></li></ol><h3 id="InnoDB体系架构"><a href="#InnoDB体系架构" class="headerlink" title="InnoDB体系架构"></a>InnoDB体系架构</h3><p><img src="https://img-blog.csdnimg.cn/20200504133348713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h4><p>默认情况下InnoDB后台有7个线程（版本不同，线程数可能不同；线程数也可以配置）</p><ol><li><p>1个master thread（几乎实现了所有功能）</p></li><li><p>1个锁监控线程</p></li><li><p>1个错误监控线程</p></li><li><p>4个I/O thread（不同版本read write线程数可能不同）</p><blockquote><p>Insert  buffer thread</p><p>Log thread</p><p>Read thread</p><p>Write  thread</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status\G; # 过去某个时间段的数据库状态Per second averages calculated from the last 46 seconds # 过去46s内的状态FILE I&#x2F;Oxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ol><li><p>缓冲池 buffer poll</p><p>占最大块内存，InnoDB将数据库文件按页（16k）读到缓冲池，然后按LRU保留缓存数据。数据库文件需要修改，首先修改缓冲池中的页（发生修改后，该页为脏页），按照一定的频率将缓冲池中的脏页刷新到文件。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status\G;BUFFER POOL AND MEMORYBuffer pool size   8191 # 一共多少个缓冲帧Free buffers       7529 # 空闲缓冲帧Database pages     658 # 已经使用缓冲帧Old database pages 262Modified db pages  0 # 脏页数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缓冲池中的数据页类型<ol><li>索引页</li><li>数据页</li><li>undo页</li><li>插入缓冲 insert buffer</li><li>自适应hash索引</li><li>InnoDB锁信息 lock info</li><li>数据字典信息 data dictionary</li></ol></li></ul></li><li><p>重做日志缓冲池 redo log buffer</p></li><li><p>额外内存池 additional memory poll</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-SortedSet排行榜同分</title>
      <link href="zhong-jian-jian/redis-sortedset-pai-xing-bang-tong-fen/"/>
      <url>zhong-jian-jian/redis-sortedset-pai-xing-bang-tong-fen/</url>
      
        <content type="html"><![CDATA[<h4 id="排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况："><a href="#排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：" class="headerlink" title="排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况："></a>排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：</h4><ol><li>谁排名靠前，按需求展示。</li><li>同分名次并列。</li></ol><h4 id="同分不同名"><a href="#同分不同名" class="headerlink" title="同分不同名"></a>同分不同名</h4><p>SortedSet score支持浮点数，只要给每个score加上对应的小数，就能实现按先后达到目标值的排序进行展示。</p><blockquote><p>如 1/timestamp 或 1/(时间戳最大值-timestamp)，这里可能有精度问题注意一下。</p></blockquote><h4 id="同分同名次"><a href="#同分同名次" class="headerlink" title="同分同名次"></a>同分同名次</h4><p>这时一个SortedSet 就不能满足需求了，因为不知道前面有多少个同分的成员。</p><ul><li><p>两个SortedSet，一个Hash<br>A SortedSet 放所有排名信息 member score<br>B SortedSet 放不重复的分数排名 member和score都用A中的score<br>C Hash记录 score 及 该分数成员的数量</p></li><li><p>数据更新<br>分数增加或减少</p></li></ul><p>1.检查C key中原分数下成员的数量，并减1，如果数量为0，删除在 B key中对应分数；检查新的分数是否已经在B key中，如果没有，加进去。<br>2.C key新的分数下团的数量加1。<br>3.A key正常增加分数。</p><ul><li><p>存在的问题：<br>两次分页请求可能存在排名变化，导致获取的数据重复的丢失的情况。</p></li><li><p>解决方案：<br>如果不能接受两次请求间排名变化导致的数据误差，可以给榜单做快照，请求时将快照编号带给服务端来解决。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-面试100问</title>
      <link href="shu-ju-ku/mysql-mian-shi-100-wen/"/>
      <url>shu-ju-ku/mysql-mian-shi-100-wen/</url>
      
        <content type="html"><![CDATA[<h5 id="面试官：“了解MySQL吗？”"><a href="#面试官：“了解MySQL吗？”" class="headerlink" title="面试官：“了解MySQL吗？”"></a>面试官：“了解MySQL吗？”</h5><p>要是说不了解，接下来该聊些啥呀？</p><h5 id="面试官：“了解的话，那说说XXX吧。”"><a href="#面试官：“了解的话，那说说XXX吧。”" class="headerlink" title="面试官：“了解的话，那说说XXX吧。”"></a>面试官：“了解的话，那说说XXX吧。”</h5><p>巴拉巴拉…</p><h3 id="MySQL有哪些常见的引擎，说说他们的区别？"><a href="#MySQL有哪些常见的引擎，说说他们的区别？" class="headerlink" title="MySQL有哪些常见的引擎，说说他们的区别？"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engines; #查看支持的引擎<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MyISAM：非事务处理存储引擎</p><p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p></li><li><p>InnoDB：具备外键功能的存储引擎</p><p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p></li><li><p>Mermory：基于内存</p><p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p></li><li><p>Archive：数据存档，数据插入后不能修改</p><p>针对高写入压缩做了优化的简单引擎。</p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>b+树索引</td><td>yes</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>MVCC</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>事务</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>存储限制</td><td>64TB</td><td>256TB</td><td>RAM</td><td>None</td></tr><tr><td>索引缓存</td><td>yes</td><td>yes</td><td>本身就是缓存</td><td>No</td></tr><tr><td>外键</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>锁粒度</td><td>row</td><td>table</td><td>table</td><td>row</td></tr><tr><td>全文索引</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>数据缓存</td><td>yes</td><td>no</td><td>本身就是缓存</td><td>no</td></tr></tbody></table></li></ul><h3 id="有哪些索引和他们之间的区别？"><a href="#有哪些索引和他们之间的区别？" class="headerlink" title="有哪些索引和他们之间的区别？"></a>有哪些索引和他们之间的区别？</h3><ul><li><h5 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h5><p>优点：</p><ol><li>Hash索引的检索可以一次到位，所以Hash索引的查询效率更高。</li></ol><p>缺点：</p><ol><li>Hash索引只能满足”=”，”IN”，”!=”，不能使用范围查询。</li><li>Hash值的大小关系不一定个原键值一样，不能做排序操作。</li><li>联合索引中不能利用部分索引键查询。</li><li>遇到大量Hash值相等的情况后，性能不一定比B树高。</li><li>存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询。</li></ol><p>InnoDB引擎有一个特殊功能叫“自适应哈希索引”。当InnoDB发现某些索引值被使用的非常频繁是，会在内存中基于B-Tree索引之上再建一个哈希索引，这样可以让B-Tree索引具有哈希索引的优点。这是一个==完全自动的、内部的行为==，用户无法控制或配置（如果有必要，可以关闭该功能）。</p></li><li><h5 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h5><p>优点：</p><ol><li><p>所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。</p></li><li><p>利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。</p></li><li><p><strong>B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)。</strong></p><p>假设叶子节点页可以存放100条记录，内部节点可以存放1000条目录，则</p><p>h=1，最多能放100条记录。</p><p>h=2，最多能放1000*100=100000条记录。</p><p>h=3，最多能放1000*1000*100=100000000（一亿）条记录。</p><p>h=4，最多能放1000*1000*1000*100=100000000000（一千亿）条记录，应该不会有这种数据量的表吧！</p><p>那为什么是O(logdN)呢？因为在页内查找一条记录时，使用的是==二分查找==。</p></li></ol></li><li><h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><ol><li>5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。</li><li>底层实现为倒排索引。</li></ol></li></ul><hr><ul><li><h5 id="聚集索引（聚簇索引）"><a href="#聚集索引（聚簇索引）" class="headerlink" title="聚集索引（聚簇索引）"></a>聚集索引（聚簇索引）</h5><ol><li><p>表数据按照索引的顺序存储，也就是说索引项的顺序和表中记录的物理顺序一致。</p></li><li><p>聚簇索引叶子节点存储了真实的数据行，不在有单独的数据页。</p></li><li><p>一张表只能创建一个聚簇索引，因为物理存储顺序只能有一种。<strong>聚簇集</strong>指的是数据行和相关的键值都保存在一起。</p></li><li><p>如果主键不是自增ID，MySQL会不断的调整数据的物理地址、分页分裂、页合并。如果自增，只需要一页一页的写，索引结构相对紧凑，磁盘碎片少，效率高。</p></li><li><p>聚簇索引不是人为创建的，默认就有。</p><p><img src="https://img-blog.csdnimg.cn/20200419175724907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol></li><li><h4 id="非聚集索引（二级索引）"><a href="#非聚集索引（二级索引）" class="headerlink" title="非聚集索引（二级索引）"></a>非聚集索引（二级索引）</h4><ol><li><p>表数据存储顺序与索引顺序无关。叶子节点包含索引字段值及指向数据页数据行的逻辑指针（行的主键值）。</p></li><li><p>适当建立联合索引（索引列包含全部查找列）能达到不用回表即可获取数据的目的。</p></li><li><p>为了保证B+树的同一层内节点的目录项记录除页号字段外是唯一的，内节点需要增加主键字段，即二级索引内节点由三部分组成：</p><blockquote><p>索引列的值</p><p>主键值</p><p>页号（页指针）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041917570460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><hr></li><li><p>主键索引</p><ol><li>每张表都会有主键，也会用主键生成主键索引。</li><li>主键索引就是聚簇索引，因此建表时最好用自增类型主键。</li><li>如果没有设置主键会发生什么？建表时如果没有设置主键，MySQL会启用内部的隐藏主键==row_id==（6个字节），也就是说无论如何一张表都必须有主键。MySQL会依次查找<strong>主键-&gt;唯一键-&gt;隐藏主键</strong>建立索引。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table table_name add primary key (column name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>普通索引，联合索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index 索引名 on table_name(column1,column2);alter table table_name add index 索引名(column1,column2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>唯一索引</p><ol><li>唯一索引可以有多个null（不提倡有null值）,但不能有重复的内容。</li><li>相比主键索引，主键字段不能为null，也不能重复。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create unique index index_name on table_name (column_list);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="为什么要使用索引？"><a href="#为什么要使用索引？" class="headerlink" title="为什么要使用索引？"></a>为什么要使用索引？</h3><ol><li>减少存储引擎需要扫描的数据量，加快查询速度。</li><li>索引可以把随机I/O变为顺序I/O。</li><li>对索引结果进行排序以避免使用磁盘临时表。</li></ol><h3 id="建索引、使用索引要注意什么？"><a href="#建索引、使用索引要注意什么？" class="headerlink" title="建索引、使用索引要注意什么？"></a>建索引、使用索引要注意什么？</h3><ol><li>数据类型越小越好。数据类型越小，在磁盘、内存和CPU缓存中需要的空间更少，处理速度更快。</li><li>数据类型越简单越好。整形优于字符串，内置日期和时间优于字符串。</li><li>尽量避免NULL。</li><li>复合索引将最常用作限制条件的列放在最左边，依次递减。</li><li>复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。</li><li>短索引。对串列进行索引，如果可能应该指定一个前缀长度，不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</li><li>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</li><li>建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。</li><li>建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。</li><li>使用NOT IN和!=操作，mysql将无法使用索引。</li><li>不要在列上进行运算，where字句的查询条件里使用了函数将不会使用索引。</li></ol><h3 id="B-树有什么特点？为什么B-树更适合做索引？"><a href="#B-树有什么特点？为什么B-树更适合做索引？" class="headerlink" title="B+树有什么特点？为什么B+树更适合做索引？"></a>B+树有什么特点？为什么B+树更适合做索引？</h3><p>回答这个问题，心里一定要有点B树🐶。</p><ol><li><p>二叉查找树：</p><ul><li><p>左子树不为空，则左子树节点值均小于根节点。</p></li><li><p>右子树不为空，则右子树节点值均大于根节点。</p></li><li><p>任意节点的左右子树也是二叉查找树。</p></li><li><p>没有键值相同的节点。</p></li><li><p>有可能会退化成一条线性链。</p></li></ul></li><li><p>AVL树：</p><ul><li><p>AVL树是带有平衡条件的二叉查找树，一般用平衡因子差值判断是否平衡并通过旋转实现平衡。</p></li><li><p>左右子树高度差不超过1。</p></li><li><p>与红黑树相比，它是严格的平衡二叉树。</p></li><li><p>AVL树适合于插入删除比较少，但查找多的情况。</p></li></ul></li><li><p>红黑树：</p><ul><li>一种二叉查找树，每个节点增加一个存储位标识颜色。</li><li>通过对任何一条从根节点到叶子节点的路径上各个节点着色方式的限制，确保没有一条路径会比其他路径长出两倍。</li><li>是一种弱平衡二叉树，相对AVL树，它的旋转次数少，适用于搜索，插入，删除操作多的情况。</li></ul></li><li><p>B树（b-树）</p><ul><li>为了磁盘或其它存储设备而设计的一种平衡多路查找树。</li><li>与二叉树相比，每个节点有多个分支。在相同节点的情况下，高度远远低于红黑树。</li><li>B/B+树操作时间由磁盘存取和CPU两部分构成，CPU速度非常快，多以B树的效率取决于磁盘访问次数。关键字总数相同的情况下B树的高度越小，磁盘I/O所花时间越少。</li><li>所有叶子节点位于同一层。</li></ul></li><li><p>B+树</p><ul><li>B树的变形树，非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，且有序。</li><li>B树不允许关键字重复,B+树允许重复。</li><li>所有叶子节点都有指向下一个叶子节点的指针。</li></ul></li><li><h5 id="那么为什么是B-树？"><a href="#那么为什么是B-树？" class="headerlink" title="那么为什么是B+树？"></a>那么为什么是B+树？</h5><ul><li><p>磁盘读写代价更低：内部节点只有指向下层节点的页指针（6个字节），因此内部节点相对B树更小，一页空间能容纳的关键字数量更多，I/O次数也就更少。</p></li><li><p>查询效率更稳定：任何关键字的查找必须走一条从根结点到叶子结点的路，所以每一个数据的查询效率相当。</p></li><li><p>利于数据库的扫描：B+树只需要遍历叶子节点就可以实现对全部关键字的扫描，更有利于范围查询。B树如果需要扫描，需要进行一次中序遍历，效率太低。</p></li></ul></li><li><h5 id="InnoDB的B-树索引"><a href="#InnoDB的B-树索引" class="headerlink" title="InnoDB的B+树索引"></a>InnoDB的B+树索引</h5><ul><li>每当某个表创建B+树索引的时候，都会为这个索引创建一个根节点页面。开始没有数据的时候，根节点中既没有用户记录，也没有目录项记录。</li><li>根节点中可用空间用完后再继续插入记录，会将根节点中的记录复制到一个新分配的页总，然后对新页进行页分裂。新插入的记录根据索引值大小分配到分裂的页中，根节点升级为存储目录项记录的页。</li><li>B+树索引的根节点从创建开始，便不会再移动。InnoDB用到这个索引的时候，会从固定的地方取出根节点的页号，从而访问这个索引。</li></ul></li></ol><h3 id="说说什么是最左匹配，对组合索引的理解"><a href="#说说什么是最左匹配，对组合索引的理解" class="headerlink" title="说说什么是最左匹配，对组合索引的理解"></a>说说什么是最左匹配，对组合索引的理解</h3><p>两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。</p><ul><li><p>建立联合索引时，从左到右依次判断，如果左边列相同，则根据第二列的大小排列，多列以此类推。</p></li><li><p>想要找”二班的小Q“，因为不知道年级，所以需要遍历所有数据。</p></li><li><p>年级&gt;=三 and 年级&lt;=四 and 名字=小Q，因为不知道是几班的，所以要把三、四年级都遍历一遍，但是也用到了年级这个索引列，不用找其他年级。</p></li><li><p>如果期望order by的子句使用索引，后面的顺序也必须按照索引列的顺序给出。如：按照年级、班级、名字顺次取10位同学。</p><p><img src="https://img-blog.csdnimg.cn/20200419175555700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h3 id="有没有遇到过慢查询，如何优化？"><a href="#有没有遇到过慢查询，如何优化？" class="headerlink" title="有没有遇到过慢查询，如何优化？"></a>有没有遇到过慢查询，如何优化？</h3><p>要是说没遇到过，面试官也不会以为你SQL学的好，他一定认为”渣渣，连慢查询都没写过🐶🐶🐶“。</p><h6 id="怎么更容易的写出慢查询？"><a href="#怎么更容易的写出慢查询？" class="headerlink" title="怎么更容易的写出慢查询？"></a>怎么更容易的写出慢查询？</h6><ul><li>建表随便一点，能达到事半功倍的效果。</li><li>建表不建索引，或者建了索引但是没有用上。</li><li>隐式类型转换。</li><li>select * where xxx=xxx 不管是啥，先查出来再说。</li><li>select xxx limit 100000 符合条件的数据有多少，全部拿出来，用不用再说。</li><li>join 各种表，连接一万遍。</li><li>为了展现强大的SQL水平，一条SQL要写一页，谁都别想看懂。</li><li>花样 like。</li><li>可能还有更高深的方法。。。</li></ul><h6 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h6><p>要想优化，得先定位问题，explain或desc查看SQL是怎么执行的。👀👀👀<a href="https://blog.csdn.net/liyuxing6639801/article/details/105646853">explain用法和结果的含义</a></p><ul><li><p>索引</p><blockquote><ol><li>合理利用覆盖索引。</li><li>索引中的字段数建议不超过5个。</li><li>单张表的索引数量控制在5个以内。</li><li>对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。</li><li>短索引。</li></ol></blockquote></li><li><p>SQL</p><blockquote><ol><li>SQL语句中IN包含的值不应过多，否则即使有索引还是可能扫全表。</li><li>如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引（不建议）。</li><li>WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。</li><li>SELECT语句只获取需要的字段。</li><li>避免在SQL语句进行数学运算或者函数运算，否则不走索引。</li><li>避免使用JOIN。</li><li>统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1)。但是COUNT(*)也可以用Redis等其他方式代替。</li><li>WHERE条件中的非等值条件（IN、BETWEEN、&lt;、&lt;=、&gt;、&gt;=）会导致后面的条件使用不了索引。</li><li>复杂SQL拆分。</li><li>使用合理的分页方式以提高分页的效率。</li></ol></blockquote></li><li><p>建表</p><blockquote><ol><li><p>每一列都是not null：如果某一列可能存储null值，那么mysql需要额外维护一个==null值列表==，存储上，查询上都增加了成本。</p></li><li><p>能用固定长度数据类型解决的，不用变长类型。</p></li></ol></blockquote></li><li><p>表维护</p><blockquote><p>定期将历史数据存档，表内数据维持在一定数量范围。</p><p>使用hash等方式分表。</p></blockquote></li><li><p>碎片整理</p><blockquote><p><a href="https://blog.csdn.net/liyuxing6639801/article/details/105646967">碎片整理遇到的那些事</a></p></blockquote></li></ul><h3 id="Mysql有哪几种事物隔离级别及区别？"><a href="#Mysql有哪几种事物隔离级别及区别？" class="headerlink" title="Mysql有哪几种事物隔离级别及区别？"></a>Mysql有哪几种事物隔离级别及区别？</h3><ul><li><h5 id="事务基本要素"><a href="#事务基本要素" class="headerlink" title="事务基本要素"></a>事务基本要素</h5><ol><li>原子性<strong>Atomicity</strong></li><li>一致性<strong>Consistency</strong></li><li>隔离性<strong>Isolation</strong></li><li>持久性<strong>Durability</strong></li></ol></li><li><h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><p>默认隔离级别：repeatable-read 可重复读。</p><p>事务隔离级别为串行化时，读写数据都会锁住整张表。</p><p>事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。</p><p>事务隔离级别为读提交时，写数据只会锁住相应的行。</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交read-uncommitted</td><td>是</td><td>是</td><td>是</td></tr><tr><td>不可重复读read-committed</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读repeatable-read</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化serializable</td><td>否</td><td>否</td><td>否</td></tr></tbody></table></li></ul><ul><li><h5 id="不可重复读和幻读"><a href="#不可重复读和幻读" class="headerlink" title="不可重复读和幻读"></a>不可重复读和幻读</h5><p>不可重复读重点在于update</p><p>幻读的重点在于insert</p></li></ul><h3 id="Mysql中的锁"><a href="#Mysql中的锁" class="headerlink" title="Mysql中的锁"></a>Mysql中的锁</h3><ul><li>锁结构</li></ul><p><img src="https://img-blog.csdnimg.cn/20200419175424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_14,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>MySQL中的行锁和表锁</p><ol><li>行锁是InnoDB引擎才有的。MyISAM、Memory、Merge等引擎都只支持表锁，并且不支持事务。</li><li>表锁实现简单，占用资源少，但是粒度大，性能较差。</li><li>对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如<code>SELECT</code>、<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>的语句会发生阻塞，反之也会发生阻塞。这个过程通过在server层使用==元数据锁==（MDL）实现。</li></ol></li><li><p>一致性读</p><p>事务利用MVCC进行读取操作，称为一致性读、快照读或一致性无锁读。一致性读不会对表中记录进行加锁，其他事务可以自由对表中记录进行改动。</p></li><li><p>行级锁</p><ol><li><p>共享锁</p><p>Share Locks，简称S锁。事务在读取一条记录时，需要先获取S锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... lock in share mode;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>独占锁</p><p>也叫排它锁，Exclusive Locks，简称X锁。事务要改动一条记录时，需要先获取该记录的X锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... for update;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>行级锁兼容性</p><table><thead><tr><th>兼容性</th><th>X</th><th>S</th></tr></thead><tbody><tr><td>X</td><td>No</td><td>No</td></tr><tr><td>S</td><td>No</td><td>Yes</td></tr></tbody></table></li></ol></li><li><p>表级锁</p><ol><li><p>表级共享锁</p></li><li><p>表级独占锁</p></li><li><p>意向共享锁（IS锁）</p><p>给表上锁前需要知道表中有没有行锁，遍历又不是MySQL的风格，于是提出了意向锁。也就是在给某条记录加S锁时，需要先加一个表级别的IX锁。</p></li><li><p>意向独占锁（IX锁)</p><p>同理</p></li><li><p>表级锁兼容性</p><p>意向锁只是为了快速判断，意向锁之间都是兼容的。</p><table><thead><tr><th align="center">兼容性</th><th align="center">X</th><th align="center">S</th><th align="center">IX</th><th align="center">IS</th></tr></thead><tbody><tr><td align="center">X</td><td align="center">No</td><td align="center">No</td><td align="center">No</td><td align="center">No</td></tr><tr><td align="center">S</td><td align="center">No</td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center">IX</td><td align="center">No</td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center">IS</td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr></tbody></table></li></ol></li><li><h5 id="表级别AUTO-INC锁"><a href="#表级别AUTO-INC锁" class="headerlink" title="表级别AUTO-INC锁"></a>表级别AUTO-INC锁</h5><p>主键通常添加==AUTO_INCREMENT==属性，系统实现自增的原理有两个：</p><blockquote><ol><li><p>执行插入操作时，在表级别加一个==AUTO-INC==锁，然后为每条记录分配递增值，该语句结束后再释放AUTO-INC锁，这样可以保证递增值是连续的。</p><p>AUTO_INC锁的作用范围只是insert语句，insert语句执行完就被释放了，不用等到事务结束。</p></li><li><p>采用轻量级的锁，在为insert语句生成递增值的时候获取一下轻量级锁，获取到后即可释放，不用等insert语句执行完毕再释放。</p></li><li><p>InnoDB提供一个<code>innodb_autoinc_lock_mode</code>系统变量，值为0时，一律采用AUTO-INC锁；值为2时，一律采用轻量级锁（不安全）；值为1时，在插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</p></li></ol></blockquote></li><li><p>行锁的具体类型</p><ul><li><p>普通行锁</p></li><li><p>间隙锁</p><p>官方名为LOCK_GAP，简称gap锁，仅仅是为了==防止插入幻影记录==而提出的。获取间隙锁后，其他事务不能在当前记录和相邻前一条记录的间隙中插入新记录。</p><p>MySQL在可重复读隔离级别下是可以解决幻读问题的：</p><ol><li>MVCC</li><li>加锁，加锁方案解决时，由于第一次执行读取操作时，幻影记录尚不存在，所以无法给其加锁。因此提出间隙锁。</li></ol></li><li><p>Next-Key Lock</p><p>官方名为LOCK_ORDINARY。既想锁住某条记录，又想阻止其他事务在该记录前面间隙插入新纪录。</p></li><li><p>插入意向锁</p><p>在插入数据时发现存在间隙锁，需要进行等待。在等待的时候需要在内存中生成插入意向锁。插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（要它有啥用）。</p></li></ul></li></ul><h3 id="Mysql主从是怎么同步的？"><a href="#Mysql主从是怎么同步的？" class="headerlink" title="Mysql主从是怎么同步的？"></a>Mysql主从是怎么同步的？</h3><p>MySQL服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行（两个线程）该日志文件保持与主服务器的数据一致。</p><ul><li><p>主从同步的好处</p><ol><li>读写分离。</li><li>数据备份。</li><li>故障切换。</li><li>主服务器生成实时数据，从服务器分析，提高主服务器性能。</li></ol></li><li><p>同步方法</p><ol><li><p>Statement Based Replication 基于SQL语句的复制，主服务器将SQL写到日志文件中</p><p>优点：日志文件小；记录了所有语句，方便审计。</p><p>缺点：sql中的函数语句不能正确复制；告警信息不能正确复制；</p></li><li><p>Row Based Replication 基于行的复制，行变化作为事件写入二进制日志。</p><p>优点：最安全的复制方式；更少的行级锁</p><p>缺点：日志文件大；不能进行日志审计</p></li><li><p>Mixed Based Replication 混合，既使用SBR又使用RBR，默认SBR。</p></li></ol></li></ul><h3 id="MySQL主从同步延迟问题"><a href="#MySQL主从同步延迟问题" class="headerlink" title="MySQL主从同步延迟问题"></a>MySQL主从同步延迟问题</h3><ol><li>高延迟——高并发场景下从库的数据会比主库慢，从而导致延迟。出现写入主库成功，但是数据需要等待几十毫秒或者更长时间才能读到。</li><li>丢数据——master节点突然挂掉，但是新写的数据还没有同步到slave节点，导致数据丢失。</li></ol><blockquote><p>主库和从库执行相同的SQL，主库可以快速执行，为什么从库不行？</p><p>master可以并发，但是slave的SQL线程只能顺序执行。当TPS较高时，产生的SQL超过slave一个SQL线程能承受的范围，延时就产生了。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status # Seconds_Behind_Master查看从库落后多长时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MySQL主从同步解决方案</p><ol><li><p>半同步复制——解决数据丢失问题，但会增加延迟。</p><p>默认是异步复制的方式，master并不关心slave数据有没有写入成功。</p><p>从库写入relay_log成功才返回ack消息，然后才返回客户端。</p><p><img src="https://img-blog.csdnimg.cn/20200419175312840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_left" alt="在这里插入图片描述"></p></li><li><p>多库并行复制——解决从库复制延迟问题</p><p>多启了几个线程</p></li></ol></li><li><h5 id="常见主从延迟原因及解决方案"><a href="#常见主从延迟原因及解决方案" class="headerlink" title="常见主从延迟原因及解决方案"></a>常见主从延迟原因及解决方案</h5><ol><li>SQL执行速度慢：优化索引</li><li>批量DML：通过缓存等方式降低DB并发压力</li><li>大事务，耗时长：事务拆解，移除不必要事务</li></ol></li></ul><h3 id="MySQL中varchar与char的区别以及char-10-中的10代表的涵义？"><a href="#MySQL中varchar与char的区别以及char-10-中的10代表的涵义？" class="headerlink" title="MySQL中varchar与char的区别以及char(10)中的10代表的涵义？"></a>MySQL中varchar与char的区别以及char(10)中的10代表的涵义？</h3><ul><li>从字面上看varchar是变长，char是定长，实际是这样吗？如果使用utf8进行编码有什么不同？</li><li>在utf8下char(10)代表最小可以存储10字节的字符，最大可以存储30字节的字符。也就意味着变长长度列表中会记录char数据类型的长度。</li><li>在多字节字符集（如：utf8)的情况下，char和varchar的实际存储都是变长字符类型。</li><li>char(10)最小存储10个字节，如果不足用0x20（空格）补足，因此在InnoDB utf8编码集下更推荐使用varchar。</li></ul><p>持续更新…</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac-安装sshpass</title>
      <link href="uncatesgorized/mac-an-zhuang-sshpass/"/>
      <url>uncatesgorized/mac-an-zhuang-sshpass/</url>
      
        <content type="html"><![CDATA[<p>网上好多都失效了，2019-11-20以下方法亲测可行。</p><pre class="line-numbers language-none"><code class="language-none">brew install https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kadwanev&#x2F;bigboybrew&#x2F;master&#x2F;Library&#x2F;Formula&#x2F;sshpass.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功后执行 sshpass出现以下效果，说明安装成功。</p><pre class="line-numbers language-none"><code class="language-none">➜  ~ sshpassUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters   -f filename   Take password to use from file   -d number     Use number as file descriptor for getting password   -p password   Provide password as argument (security unwise)   -e            Password is passed as env-var &quot;SSHPASS&quot;   With no parameters - password will be taken from stdin   -P prompt     Which string should sshpass search for to detect a password prompt   -v            Be verbose about what you&#39;re doing   -h            Show help (this screen)   -V            Print version informationAt most one of -f, -d, -p or -e should be used<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功了，那就把密码记下来吧</p><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">alias jump&#x3D;&quot;sshpass -p &#39;666&#39; ssh host&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>载入文件 source ~/.bashrc, 具体是哪个文件根据自身情况决定，我把.bashrc 加在了.zshrc里，所以我执行的是<code>source ~/.zshrc</code>。</p><p>接下来就是验证成果是时候了。</p><pre class="line-numbers language-none"><code class="language-none">➜  ~ jumpLast login: Wed Nov 20 21:59:08 2019 from 172.16.113.151Welcome to Alibaba Cloud Elastic Compute Service !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Success"><a href="#Success" class="headerlink" title="Success"></a>Success</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> sshpass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂-ip转int，int转ip</title>
      <link href="hou-duan-kai-fa/za-ip-zhuan-int-int-zhuan-ip/"/>
      <url>hou-duan-kai-fa/za-ip-zhuan-int-int-zhuan-ip/</url>
      
        <content type="html"><![CDATA[<h4 id="IP和int之间相互转换"><a href="#IP和int之间相互转换" class="headerlink" title="IP和int之间相互转换"></a>IP和int之间相互转换</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">toInt</span><span class="token punctuation">(</span>ip <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span>i <span class="token operator">:=</span> <span class="token number">3</span>sum <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> j<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>intV<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> intV<span class="token operator">*</span><span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">toIp</span><span class="token punctuation">(</span>num <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">3</span><span class="token keyword">for</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>num <span class="token operator">/=</span> <span class="token number">256</span>i<span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> IP </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-表</title>
      <link href="shu-ju-ku/mysql-biao/"/>
      <url>shu-ju-ku/mysql-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="主键三连"><a href="#主键三连" class="headerlink" title="主键三连"></a>主键三连</h3><ul><li>显示定义主键。</li><li>如果没有显示指定，查找表中唯一索引，如果有，该列为主键。</li><li>不符合上面两条，InnoDB自动创建一个6字节大小的指针。</li></ul><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><ul><li>表空间-&gt;段-&gt;区-&gt;页</li></ul><p><img src="https://img-blog.csdnimg.cn/20200504134054591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p>表空间</p><p>每张表的表空间存放的只是数据、索引、插入缓冲。其他类型的数据，如undo信息，系统事务信息，二次写缓冲等还是存放在共享表空间中。</p></li><li><p>段</p><p>每个段开始时，先用32个页大小的碎片页来存放数据，用完后在用区（64个连续页）</p><ol><li>数据段 B+数的叶子节点</li><li>索引段 B+数的非叶子节点</li><li>回滚段</li></ol></li><li><p>区</p><p>由64个连续的页组成，每个页16KB，每个区1MB。</p><p>InnoDB每次最多可以申请4个区，以此保证数据的顺序性能。</p></li><li><p>页</p><p>每个页至少2行，最多7992行</p><ol><li>数据页(B-tree Node)</li><li>undo页</li><li>系统页</li><li>事务数据页</li><li>插入缓冲位图页</li><li>插入缓冲空闲列表页</li><li>未压缩的二进制大对象(BLOB)页</li><li>压缩的二进制大对象页</li></ol></li><li><p>行</p><p>每个页存放16KB/2~200行记录，即7992行。</p></li></ul><h3 id="物理存储结构"><a href="#物理存储结构" class="headerlink" title="物理存储结构"></a>物理存储结构</h3><ol><li>共享表空间</li><li>Redo文件组</li><li>表结构定义文件</li><li>独立表空间（需要设置才有）</li></ol><h3 id="InnoDB行记录格式"><a href="#InnoDB行记录格式" class="headerlink" title="InnoDB行记录格式"></a>InnoDB行记录格式</h3><ul><li>Compact行格式</li></ul><p><img src="https://img-blog.csdnimg.cn/20200504134112330.png#pic_center" alt="在这里插入图片描述"></p><ul><li><p>变长字段</p><p>逆序放置</p><p>列长小于255，用一个字节；大于255，用两个字节；最大不能超过2个字节。所以varchar最大长度是65535。</p></li><li><p>NULL标志（至少一个字节）</p><p>逆序放置</p></li><li><p>记录头信息</p><p>固定占用5字节</p></li><li><p>隐藏列——事务ID和回滚指针列</p></li><li><p>RowID列（6字节）</p></li><li><p>行溢出数据</p><p>InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页之外，即作为行溢出数据。</p></li><li><p>Char的行结构存储</p><p>在多字节字符型的存储中，char被视为变长类型，未能占满长度的字符用0x20填充。可以说在多字节字符集的情况下，char和varchar的行存储基本没有区别。</p></li></ul><h3 id="InnoDB数据页结构"><a href="#InnoDB数据页结构" class="headerlink" title="InnoDB数据页结构"></a>InnoDB数据页结构</h3><p>InnoDB数据页由7个部分组成：</p><ol><li><p>文件头 file header</p><p>大小固定 8个部分，共38个字节</p><blockquote><p>属于哪个表空间</p><p>上一页、下一页（叶子节点双向链表）</p><p>页类型（叶子节点、索引节点、undo log页···）</p><p>等···</p></blockquote></li><li><p>页头 page header</p><p>大小固定 14个部分，共56个字节</p><blockquote><p>记录数量</p><p>空闲链表首指针</p><p>堆中第一条记录的指针</p><p>属于哪个索引ID</p><p>等···</p></blockquote></li><li><p>Infimun + supermum records</p><p>每页中有两个虚拟行记录，用来限定记录的边界。</p><p>Infimun 最小值</p><p>supermum 最大值</p></li></ol><p>  <img src="https://img-blog.csdnimg.cn/20200504134129918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li><p>用户记录(行记录) user records</p></li><li><p>空闲空间 free space</p><p>链表数据结构，有记录被删除后，会被加入到空闲链表中。</p></li><li><p>页目录 page directory</p><p>存放记录的相对位置</p><p>B+数索引只能找到记录所在的页，数据库把页载入内存，然后通过page directory进行二分查找。二分查找的时间复杂度很低，通常忽略这部分时间。</p></li><li><p>文件尾信息 file tailer</p><p>页的完整性保证</p><p>大小固定 1个部分，共8个字节</p></li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li><p>数据完整性</p><p>实体完整性</p><p>域完整性</p><p>参照完整性</p></li><li><p>四种约束</p><p>主键</p><p>唯一键</p><p>外键</p><p>default</p><p>not null</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-锁</title>
      <link href="shu-ju-ku/mysql-suo/"/>
      <url>shu-ju-ku/mysql-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-锁"><a href="#MySQL-锁" class="headerlink" title="MySQL 锁"></a>MySQL 锁</h3><ul><li><h4 id="thanks"><a href="#thanks" class="headerlink" title="thanks :"></a>thanks :</h4></li></ul><ol><li><a href="https://blog.csdn.net/claram/article/details/54023216">zhiboer</a></li><li><a href="https://blog.csdn.net/puhaiyang/article/details/72284702">静下心来静下心来</a></li></ol><ul><li><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><blockquote><ul><li>没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。</li><li>for update仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效</li><li>MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。</li><li>排他锁包含行锁、表锁。</li></ul></blockquote></li><li><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4></li><li><p>悲观锁</p><blockquote><ul><li>共享锁<blockquote><p>共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。<br>关键字：==lock in share mode==</p><pre class="line-numbers language-none"><code class="language-none">begin; SELECT * from city where id &#x3D; &quot;1&quot;  lock in share mode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li>排他锁<blockquote><p>多个不同的事务，对同一个资源只能有一把锁。<br>关键字：==for update==</p><ul><li>每次获取商品时，对该商品加排他锁。</li><li>期间其他用户阻塞等待访问该记录。</li><li>悲观锁适合写入频繁的场景。</li></ul></blockquote></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">begin;    select * from goods where id &#x3D; 1 for update;    update goods set stock &#x3D; stock - 1 where id &#x3D; 1;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>乐观锁</p><blockquote><blockquote><ul><li>每次获取商品时，不对该商品加锁。</li><li>在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。</li><li>乐观锁适合读取频繁的场景。</li></ul></blockquote></blockquote><pre class="line-numbers language-none"><code class="language-none">#不加锁获取 id&#x3D;1 的商品对象select * from goods where id &#x3D; 1begin;    #更新 stock 值，这里需要注意 where 条件 “stock &#x3D; cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新    update goods set stock &#x3D; stock - 1 where id &#x3D; 1 and stock &#x3D; cur_stock;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="行锁和表锁"><a href="#行锁和表锁" class="headerlink" title="行锁和表锁"></a>行锁和表锁</h4><blockquote><ol><li>只根据主键进行查询，并且查询到数据，主键字段产生行锁。</li><li>除了使用非主键不含索引字段查询，其余所有的查询，没有查询到数据，就不产生锁。</li><li>根据主键、非主键含索引（name）进行查询，并且查询到数据，主键字段产生行锁，name字段产生行锁。<pre class="line-numbers language-none"><code class="language-none">begin;select * from goods where id &#x3D; 1 and name&#x3D;&#39;prod11&#39; for update;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>根据主键、非主键不含索引（name）进行查询，并且查询到数据，如果其他线程按主键字段进行再次查询，则主键字段产生行锁，如果其他线程按非主键不含索引字段进行查询，则非主键不含索引字段产生表锁，如果其他线程按非主键含索引字段进行查询，则非主键含索引字段产生行锁，如果索引值是枚举类型，mysql也会进行表锁。</li><li>根据非主键含索引（name）进行查询，并且查询到数据，name字段产生行锁。</li><li>根据非主键不含索引（name）进行查询，查到或查不到数据，name字段产生表锁。</li><li>只根据主键进行查询，查询条件为不等于，查到或查不到数据，主键字段产生都表锁。</li><li>只根据主键进行查询，查询条件为 like，查到或查不到数据，主键字段产生表锁。</li></ol></blockquote></li><li><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ol><li>InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。==行锁一定有索引==</li><li>当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。 </li><li>如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。</li><li>检索值的==数据类型==与索引字段不同，虽然MySQL能够进行数据类型转换，但却不会使用索引，从而导致InnoDB使用表锁。</li></ol></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-常用命令整理</title>
      <link href="uncatesgorized/git-chang-yong-ming-ling-zheng-li/"/>
      <url>uncatesgorized/git-chang-yong-ming-ling-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="远程分支强制覆盖本地分支-超级常用"><a href="#远程分支强制覆盖本地分支-超级常用" class="headerlink" title="远程分支强制覆盖本地分支(超级常用)"></a>远程分支强制覆盖本地分支(超级常用)</h4><p>置顶是因为我自己用了无数遍呀！！</p><pre class="line-numbers language-none"><code class="language-none">git fetch --allgit reset --hard origin&#x2F;your branch namegit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="快捷提交"><a href="#快捷提交" class="headerlink" title="快捷提交"></a>快捷提交</h4><pre class="line-numbers language-none"><code class="language-none">git commit -a -m &#39;this is my commit&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m &#39;your commit&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="命令简写-mac环境，windows没试"><a href="#命令简写-mac环境，windows没试" class="headerlink" title="命令简写(mac环境，windows没试)"></a>命令简写(mac环境，windows没试)</h4><p>命令行输入：</p><pre class="line-numbers language-none"><code class="language-none">alias<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会列出所有git相关的缩写，当然也可以自己配。<br><img src="https://img-blog.csdnimg.cn/20190526223820765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="alias"><br>常用的也就几个：</p><pre class="line-numbers language-none"><code class="language-none">切换指定分支：gco branch_name切换到master分支：gcm查看分支：gb查看修改：gd拉代码：gl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建没有parent的新分支"><a href="#新建没有parent的新分支" class="headerlink" title="新建没有parent的新分支"></a>新建没有parent的新分支</h4><pre class="line-numbers language-none"><code class="language-none">git checkout --orphan branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git-代码量"><a href="#Git-代码量" class="headerlink" title="Git 代码量"></a>Git 代码量</h4><pre class="line-numbers language-none"><code class="language-none">git log --format&#x3D;&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\t&quot;; git log --author&#x3D;&quot;$name&quot; --pretty&#x3D;tformat: --numstat | awk &#39;&#123; add +&#x3D; $1; subs +&#x3D; $2; loc +&#x3D; $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#39; -; done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git-命令提示：perl-warning-Setting-locale-failed"><a href="#Git-命令提示：perl-warning-Setting-locale-failed" class="headerlink" title="Git 命令提示：perl: warning: Setting locale failed."></a>Git 命令提示：perl: warning: Setting locale failed.</h4><pre class="line-numbers language-none"><code class="language-none">vim  ~&#x2F;.zshrc# Setting for the new UTF-8 terminal support in LionLC_CTYPE&#x3D;en_US.UTF-8LC_ALL&#x3D;en_US.UTF-8source ~&#x2F;.zshrc重启iTerm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="merge某个或几个commit"><a href="#merge某个或几个commit" class="headerlink" title="merge某个或几个commit"></a>merge某个或几个commit</h4><p>有些特殊情况不能直接merge(一个分支上同时有你和别人的commit)，但是你的commit需要上线了。</p><ul><li>查找要merge的commitId<pre class="line-numbers language-none"><code class="language-none">gco old_branchgit log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>commit 1534c530522982a6ff050ac420b300ae4364474e<br>Author: lidoudou &lt;<a href="mailto:&#x6c;&#105;&#x64;&#x6f;&#117;&#x64;&#x6f;&#x75;&#64;&#x63;&#115;&#x64;&#x6e;&#x2e;&#x63;&#111;&#x6d;">&#x6c;&#105;&#x64;&#x6f;&#117;&#x64;&#x6f;&#x75;&#64;&#x63;&#115;&#x64;&#x6e;&#x2e;&#x63;&#111;&#x6d;</a>&gt;<br>Date:   Sat Apr 27 17:15:14 2019 +0800<br> update kafka setting</p></blockquote></li><li>切换到目标分支，pick目标commit<pre class="line-numbers language-none"><code class="language-none">gco new_branchgit cherr-pick 1534c530522  &#x2F;&#x2F; commitId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>正常的话现在可以看到new_branch上有了commitId不同，但是标识名相同的记录。</li><li>当然也会出现意外——代码冲突了，按一般的冲突一样fix就OK了。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生-优秀的工程师文化</title>
      <link href="uncatesgorized/cheng-xu-ren-sheng-you-xiu-de-gong-cheng-shi-wen-hua/"/>
      <url>uncatesgorized/cheng-xu-ren-sheng-you-xiu-de-gong-cheng-shi-wen-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="自我认识"><a href="#自我认识" class="headerlink" title="自我认识"></a>自我认识</h4><ul><li><code>有深刻的认知和认同</code></li><li><strong>暂时没有做到或没有切身体会</strong><h4 id="优秀的工程师文化最基本三要素"><a href="#优秀的工程师文化最基本三要素" class="headerlink" title="优秀的工程师文化最基本三要素"></a>优秀的工程师文化最基本三要素</h4></li><li>尊重</li><li>信任</li><li>责任</li></ul><h4 id="工程师文化"><a href="#工程师文化" class="headerlink" title="工程师文化"></a>工程师文化</h4><ol><li><code>团队才是王道</code></li><li><code>快速失败，学习，迭代</code></li><li><strong>为学习预留时间</strong>，<code>保持学习耐心</code></li><li><code>必须坦诚，隐瞒是有害的</code></li><li><strong>学会批评</strong>和<code>接受批评</code></li><li>所谓强壮的文化，是能接受有益的改变，抵御有害的变化</li><li><code>建设团队文化并不是负责人的事，团队所有成员都有份</code></li><li>团队文化从招聘开始，技术再牛，如果步调跟团队不一致，往往会成为一个很大的不确定因素</li><li>想要优秀的工程师为自己工作，首要的是雇佣出色的工程师</li><li>每个人都对产品的成功抱有强烈的主人翁精神和责任感，初创团队成员更应有这种意识建设性批评是工程团队的成长基石</li><li>诤友难得</li><li><code>同步沟通的时候人越少越好（开会，群讨论）</code>，异步沟通的时候听众越多越好（邮件）能够参加会议跟身份地位等同起来的做法是极其愚蠢的</li><li>时间尚早但议题已经讨论完毕，立刻散会</li><li><code>不做设计，直接写代码的行为是不可取的</code></li><li>任何warning都可能要了你的命</li><li>每个提交都必须经过代码审查</li><li>真正的测试和发布流程</li><li>负责人要做李云龙式的冲锋队长不要学诸葛亮运筹帷幄</li><li>理解每一位员工的困难，萝卜加大棒式的管理方式不适合现在企业</li><li>做一个禅师，保持淡定和冷静</li><li>学会提问式沟通，<code>不要随便给人打标签</code>，任何人都会成长</li><li>培养敢于冒险精神的氛围</li><li>称赞同事可以，但是每个人都称赞那叫“互吹”</li><li>团队想要在一个方向上快速前进就要让所有人同心协力，步调必须一致</li><li>多关心下同伴在工作之外的情况是很有必要的</li><li>对同伴需要更多的激励和方向指引</li><li><code>独立工作不需要别人看着才能工作</code></li><li>学习新技能，在现有基础上继续磨练得到提高是一个工程师职业生涯的续命丹药</li><li>需要给自己目标，长期目标，<code>短期目标</code></li><li>快速走出负面情绪</li><li>不是要把“烂人”轰走，而是要培养一种拒绝负面行为的文化氛围</li><li>尊重别人的时间</li><li>不要过分的索取</li><li><strong>转移完美主义者的注意力</strong></li><li>知道什么时候放弃</li><li><code>在完成自己工作的前提下，要求更多的责任</code></li><li>敢于冒险，不怕失败</li><li><code>对不确定的事情提出疑问</code></li><li><code>在leader问你进展之前，主动汇报</code>。遇到的困难、完成任务、需要帮助，或者不希望什么事情发生</li><li>不尊重工程师的公司，只把他们当实现商业目的工具的公司，工程师不会对这家公司有任何感情</li><li><strong>过度的向上管理不可取</strong></li><li><strong>要分清什么是进取型工作什么是防御性工作</strong></li><li><code>要有自己的偶像</code>，并向偶像模仿，提高</li><li>如果不努力去学习、了解引导公司的方法，那就等于拿自己的命运去赌博</li><li>大而全的系统往往是完美主义者的臆想</li><li>最好不要纸上谈兵，架构不是设计出来的，是优化出来的</li><li><code>懒惰是千万要小心的陷阱</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件-Airflow进阶</title>
      <link href="uncatesgorized/ruan-jian-airflow-jin-jie/"/>
      <url>uncatesgorized/ruan-jian-airflow-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><hr><p><strong>用户界面也有以下相关操作按钮</strong></p><ul><li><p>查看</p><pre class="line-numbers language-none"><code class="language-none">1、列出现有所有的活动的DAGSairflow list_dags2、列出 tutorial 的任务idairflow list_tasks tutorial3、以树形图的形式列出 tutorial 的任务idairflow list_tasks tutorial --tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-none"><code class="language-none">1、模拟2015-06-01 执行tutorial的print_date任务airflow test tutorial print_date 2015-06-01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>回填数据</p><blockquote><p>如果希望新写的DAG执行过去一段时间的任务怎么办？<br>backfill 可以执行一个时间段内应该执行的所有任务</p></blockquote><pre class="line-numbers language-none"><code class="language-none">airflow backfill tutorial -s 2018-06-01 -e 2015-08-01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重建元数据库</p><pre class="line-numbers language-none"><code class="language-none">airflow resetdb [-h] [-y]-y --yes，不经过提示确认就重置，默认为False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="更多命令-官方Command-Line-Interface"><a href="#更多命令-官方Command-Line-Interface" class="headerlink" title="更多命令  官方Command Line Interface"></a>更多命令  <a href="http://airflow.incubator.apache.org/cli.html">官方Command Line Interface</a></h5></li></ul><hr><h2 id="BaseOperator"><a href="#BaseOperator" class="headerlink" title="BaseOperator"></a>BaseOperator</h2><p>官网例子，里面的各个属性有代表什么意思？</p><pre class="line-numbers language-none"><code class="language-none">&quot;&quot;&quot;Code that goes along with the Airflow tutorial located at:https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;incubator-airflow&#x2F;blob&#x2F;master&#x2F;airflow&#x2F;example_dags&#x2F;tutorial.py&quot;&quot;&quot;from airflow import DAGfrom airflow.operators.bash_operator import BashOperatorfrom datetime import datetime, timedeltadefault_args &#x3D; &#123;    &#39;owner&#39;: &#39;airflow&#39;,    &#39;depends_on_past&#39;: False,    &#39;start_date&#39;: datetime(2015, 6, 1),    &#39;email&#39;: [&#39;airflow@example.com&#39;],    &#39;email_on_failure&#39;: False,    &#39;email_on_retry&#39;: False,    &#39;retries&#39;: 1,    &#39;retry_delay&#39;: timedelta(minutes&#x3D;5),    # &#39;queue&#39;: &#39;bash_queue&#39;,    # &#39;pool&#39;: &#39;backfill&#39;,    # &#39;priority_weight&#39;: 10,    # &#39;end_date&#39;: datetime(2016, 1, 1),&#125;dag &#x3D; DAG(&#39;tutorial&#39;, default_args&#x3D;default_args)# t1, t2 and t3 are examples of tasks created by instantiating operatorst1 &#x3D; BashOperator(    task_id&#x3D;&#39;print_date&#39;,    bash_command&#x3D;&#39;date&#39;,    dag&#x3D;dag)t2 &#x3D; BashOperator(    task_id&#x3D;&#39;sleep&#39;,    bash_command&#x3D;&#39;sleep 5&#39;,    retries&#x3D;3,    dag&#x3D;dag)templated_command &#x3D; &quot;&quot;&quot;    &#123;% for i in range(5) %&#125;        echo &quot;&#123;&#123; ds &#125;&#125;&quot;        echo &quot;&#123;&#123; macros.ds_add(ds, 7)&#125;&#125;&quot;        echo &quot;&#123;&#123; params.my_param &#125;&#125;&quot;    &#123;% endfor %&#125;&quot;&quot;&quot;t3 &#x3D; BashOperator(    task_id&#x3D;&#39;templated&#39;,    bash_command&#x3D;templated_command,    params&#x3D;&#123;&#39;my_param&#39;: &#39;Parameter I passed in&#39;&#125;,    dag&#x3D;dag)t2.set_upstream(t1)t3.set_upstream(t1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><strong>retries</strong> (int) 重试几次才标记为失败</li><li><strong>retry_delay</strong> (timedelta) 两次重试间隔多长时间</li><li><strong>retry_exponential_backoff</strong>（bool）在重试延迟上运用算法增加等待时间</li><li><strong>max_retry_delay</strong> (timedelta)  重试之间的最大时间间隔</li><li><strong>start_time</strong> （datatime）确定第一个任务实例的execution_date，最佳做法是将start_date四舍五入到DAG的schedule_interval。</li><li><strong>end_time</strong> （datetime）如果指定，调度程序将不会超出此日期。</li><li><strong>depends_on_past</strong> （bool）设置为true时，任务实例将依次运行，同时依赖上一个任务的计划成功。允许start_date的任务实例运行。</li><li><strong>wait_for_downstream</strong> （bool）TODO</li><li><strong>dag</strong> (DAG) 任务所附的dag的引用（如果有的话）</li><li>parallelism：这个参数指定了整个Airflow系统，在任何一刻能同时运行的Task Instance的数量，这个数量跟DAG无关，只跟Executor和Task有关。举个例子：如果parallelism=15, 这时你有两个DAG，A和B，如果A需要同时开跑10个Task，B也要同时开跑10个Task，两个DAG同时触发，那么这时候同时在跑的Task数量只能是15，其余的5个会等之前的Task运行完了触发，这时的状态不会显示在web上。而且在这种情况下，触发的顺序是不确定的。</li></ol></blockquote><blockquote><ol start="11"><li>dag_concurrency：这个参数指定了同一个Dag Run中能同时运行的Task Instance的个数</li></ol></blockquote><blockquote><ol start="12"><li>max_active_runs_per_dag：这个参数指定了同一个Dag能被同时激活的Dag Run的数量</li></ol></blockquote><blockquote><ol start="13"><li>non_pooled_task_slot_count：这个参数指定了默认的Pool能同时运行的Task Instance的数量，如果你的Task没有指定Pool选项，那么这个Task就是属于这个默认的Pool的</li><li> <a href="https://www.cnblogs.com/skyrim/p/7456166.html">更多配置</a></li></ol></blockquote><h2 id="airflow执行组件"><a href="#airflow执行组件" class="headerlink" title="airflow执行组件"></a>airflow执行组件</h2><ul><li>Scheduler：这个是整个Airflow的调度器，Airflow所有DAG的调度过程是由Scheduler轮询来处理的。触发条件达到后，会丢给Executor执行。</li><li>Executor：现在的Executor有三种：</li></ul><blockquote><ul><li>SequnceExecutor：提供本地执行，并且串行执行一个DAG中的所有Task，基本上只用在初期的Airflow概念验证阶段    </li><li>LocalExecutor：这个是比较常用的Executor，可以在本地并行执行一个DAG内的所有Task    </li><li>CeleryExecutor：这个是在大型任务调度场景，或者是表较复杂的任务分离场景中需要用到的Executor。顾名思义，在这个Executor下，Airflow使用了Celery这个强大的Python分布式队列框架去分发任务，然后在这样的环境下，需要在执行任务的机器上启用Airflow Worker来处理队列中的请求。 </li><li>在一个Airflow中同时只能一个Executor启动，不能给指定的DAG指定Executor</li></ul></blockquote><ul><li>Pool：这个Pool虽然不是Airflow的核心，但也跟整个Airflow的执行流程相关。任何一个Task其实都是指定了Pool这个参数的，即使没有自己指定，其实也是归结到了Default Pool这么个池子中。Pool本身是个抽象的概念，由Slot组成，可以建立任何一个Pool，指定Slot的数量。任何一个使用了这个Pool的Task Instance就需要占用一个Slot，Slot用完了，Task就处于等待状态。<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2></li><li>配置元素优先级<blockquote><p>环境变量<br>  airflow.cfg中的配置<br>  airflow.cfg中的命令<br>  默认</p></blockquote></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>官方推荐 MySQL or Postgres 两种数据库</li><li>本地配置好数据库后<blockquote><p>在airflow.cfg 中配置“executor”为“LocalExecutor”，可以在本地并行化任务实例的执行程序。</p></blockquote></li></ul><h5 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h5><p><a href="http://wingerted.com/">http://wingerted.com</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Airflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件-Airflow安装与简单使用</title>
      <link href="uncatesgorized/ruan-jian-airflow-an-zhuang-yu-jian-dan-shi-yong/"/>
      <url>uncatesgorized/ruan-jian-airflow-an-zhuang-yu-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li><p>1、新建一个虚拟环境</p><pre class="line-numbers language-none"><code class="language-none">virtualenv airflowenvsource airflowenv&#x2F;bin&#x2F;activate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>2、安装airflow<br>需要等一段时间</p><pre class="line-numbers language-none"><code class="language-none">pip install airflow&#x3D;&#x3D;1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>3、查看安装结果</p><pre class="line-numbers language-none"><code class="language-none">airflow version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>出现如下则说明安装成功</p><pre class="line-numbers language-none"><code class="language-none">____________       _________________    |__( )_________  __&#x2F;__  &#x2F;________      ______  &#x2F;| |_  &#x2F;__  ___&#x2F;_  &#x2F;_ __  &#x2F;_  __ \_ | &#x2F;| &#x2F; &#x2F;___  ___ |  &#x2F; _  &#x2F;   _  __&#x2F; _  &#x2F; &#x2F; &#x2F;_&#x2F; &#x2F;_ |&#x2F; |&#x2F; &#x2F;_&#x2F;_&#x2F;  |_&#x2F;_&#x2F;  &#x2F;_&#x2F;    &#x2F;_&#x2F;    &#x2F;_&#x2F;  \____&#x2F;____&#x2F;|__&#x2F;  v1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><ul><li><p>4、cd 进入airflow文件夹</p><pre class="line-numbers language-none"><code class="language-none">ls -al<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><pre class="line-numbers language-none"><code class="language-none">有以下两个文件-rw-r--r--   1 ***  staff  11602  8 28 18:06 airflow.cfg-rw-r--r--   1 ***  staff   1549  8 27 12:31 unittests.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>airflow.cfg有许多<strong>配置项</strong>，后面会作简单解释</p></blockquote></li><li><p>5、初始化airflow数据库</p><pre class="line-numbers language-none"><code class="language-none">airflow initdb默认配置使用SQLLite，执行后在airflow文件夹生成一个airflow.db数据库文件（可以通过配置airflow.cfg的方式更改数据库类型如：mysql）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>6、启动服务</p><pre class="line-numbers language-none"><code class="language-none">airflow webserver -p 8080执行之后在浏览器输入：localhost:8080&#x2F;admin结果如下所示：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20180828194455231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="airflow"></p></li></ul><h4 id="安装工作结束"><a href="#安装工作结束" class="headerlink" title="安装工作结束"></a>安装工作结束</h4><h2 id="二、更改数据库为Mysql"><a href="#二、更改数据库为Mysql" class="headerlink" title="二、更改数据库为Mysql"></a>二、更改数据库为Mysql</h2><ul><li><p>1、安装MySQL，方法不限</p><pre class="line-numbers language-none"><code class="language-none">pip install mysql-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2、成功进入MySQL之后</p><pre class="line-numbers language-none"><code class="language-none">新建用户CREATE USER airflow;新建数据库CREATE DATABASE airflow;CREATE DATABASE celery_result_airflow;给权限GRANT all privileges on airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;GRANT all privileges on celery_result_airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3、打开上文提到的airflow.cfg<br>将 sql_alchemy_conn，改为如下：</p><pre class="line-numbers language-none"><code class="language-none">sql_alchemy_conn &#x3D; mysql:&#x2F;&#x2F;airflow:airflow@localhost:3306&#x2F;airflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">初始化元数据库airflow initdb重置元数据库airflow resetdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三、启动airflow"><a href="#三、启动airflow" class="headerlink" title="三、启动airflow"></a>三、启动airflow</h2><ul><li><p>运行命令（需要在不同窗口）</p><pre class="line-numbers language-none"><code class="language-none">airflow webserver -p 8080airflow scheduler以非root用户运行airflow worker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浏览器输入 localhost:8080/admin</p></li><li><p>(o゜▽゜)o☆[BINGO!]</p></li></ul><h2 id="四、实际项目中可能遇到的问题"><a href="#四、实际项目中可能遇到的问题" class="headerlink" title="四、实际项目中可能遇到的问题"></a>四、实际项目中可能遇到的问题</h2><ul><li><p>如何打开已有项目</p><pre class="line-numbers language-none"><code class="language-none">在 airflow.cfg文件中将 dags_folder 指向已有项目原本为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;airflow&#x2F;dags改为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;mive&#x2F;dags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要添加自己的dags，在airflow目录下新建dags文件夹，并将文件放入文件夹即可，airflow会自己找。</p></li><li><p>报错 No module named pyutil.program.conf</p><pre class="line-numbers language-none"><code class="language-none">‘*’号为Python版本cd airflowenv&#x2F;lib&#x2F;python*.*&#x2F;site-packagesvim data.pth在文件中一行，添加pyutil的路径（其他类似问题也可这样解决），如&#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行 airflow webserver之后提示缺少Redis或者其他包</p><pre class="line-numbers language-none"><code class="language-none">通通pip install 缺啥装啥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>schedule_interval 参数意义<br><a href="http://airflow.incubator.apache.org/scheduler.html?highlight=schedule_interval#dag-runs">官方文档</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Airflow </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
